/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.ChangePasswordRequest;
import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.RequestEmailConfirmationRequest;
import io.tiledb.cloud.v4.model.RequestPasswordResetRequest;
import io.tiledb.cloud.v4.model.ResetPasswordRequest;
import io.tiledb.cloud.v4.model.UserCreateRequest;
import io.tiledb.cloud.v4.model.UserCreateResponse;
import io.tiledb.cloud.v4.model.UserGetResponse;
import io.tiledb.cloud.v4.model.UserSelfResponse;
import io.tiledb.cloud.v4.model.UserUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePassword
     * @param changePasswordRequest data required to changes a user&#39;s password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(@javax.annotation.Nonnull ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/actions/users/change_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(@javax.annotation.Nonnull ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling changePassword(Async)");
        }

        return changePasswordCall(changePasswordRequest, _callback);

    }

    /**
     * Changes a user&#39;s password.
     * This endpoint allows a user to change their password. The user must provide the current password along with the new password. 
     * @param changePasswordRequest data required to changes a user&#39;s password (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void changePassword(@javax.annotation.Nonnull ChangePasswordRequest changePasswordRequest) throws ApiException {
        changePasswordWithHttpInfo(changePasswordRequest);
    }

    /**
     * Changes a user&#39;s password.
     * This endpoint allows a user to change their password. The user must provide the current password along with the new password. 
     * @param changePasswordRequest data required to changes a user&#39;s password (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(@javax.annotation.Nonnull ChangePasswordRequest changePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changes a user&#39;s password. (asynchronously)
     * This endpoint allows a user to change their password. The user must provide the current password along with the new password. 
     * @param changePasswordRequest data required to changes a user&#39;s password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(@javax.annotation.Nonnull ChangePasswordRequest changePasswordRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmEmail
     * @param X_TILEDB_REST_API_KEY The confirm email scoped token to validate the user&#39;s email address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email confirmed successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmEmailCall(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/users/confirm_email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (X_TILEDB_REST_API_KEY != null) {
            localVarHeaderParams.put("X-TILEDB-REST-API-KEY", localVarApiClient.parameterToString(X_TILEDB_REST_API_KEY));
        }


        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmEmailValidateBeforeCall(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_TILEDB_REST_API_KEY' is set
        if (X_TILEDB_REST_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_TILEDB_REST_API_KEY' when calling confirmEmail(Async)");
        }

        return confirmEmailCall(X_TILEDB_REST_API_KEY, _callback);

    }

    /**
     * Confirm an email address
     * Operation to confirm the email address by providing the token sent to user&#39;s email address
     * @param X_TILEDB_REST_API_KEY The confirm email scoped token to validate the user&#39;s email address (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email confirmed successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void confirmEmail(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY) throws ApiException {
        confirmEmailWithHttpInfo(X_TILEDB_REST_API_KEY);
    }

    /**
     * Confirm an email address
     * Operation to confirm the email address by providing the token sent to user&#39;s email address
     * @param X_TILEDB_REST_API_KEY The confirm email scoped token to validate the user&#39;s email address (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email confirmed successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmEmailWithHttpInfo(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY) throws ApiException {
        okhttp3.Call localVarCall = confirmEmailValidateBeforeCall(X_TILEDB_REST_API_KEY, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm an email address (asynchronously)
     * Operation to confirm the email address by providing the token sent to user&#39;s email address
     * @param X_TILEDB_REST_API_KEY The confirm email scoped token to validate the user&#39;s email address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email confirmed successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmEmailAsync(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmEmailValidateBeforeCall(X_TILEDB_REST_API_KEY, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param userCreateRequest user to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(@javax.annotation.Nonnull UserCreateRequest userCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCreateRequest;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(@javax.annotation.Nonnull UserCreateRequest userCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userCreateRequest' is set
        if (userCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'userCreateRequest' when calling createUser(Async)");
        }

        return createUserCall(userCreateRequest, _callback);

    }

    /**
     * Create a user
     * create a user for a new registration
     * @param userCreateRequest user to create (required)
     * @return UserCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public UserCreateResponse createUser(@javax.annotation.Nonnull UserCreateRequest userCreateRequest) throws ApiException {
        ApiResponse<UserCreateResponse> localVarResp = createUserWithHttpInfo(userCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a user
     * create a user for a new registration
     * @param userCreateRequest user to create (required)
     * @return ApiResponse&lt;UserCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCreateResponse> createUserWithHttpInfo(@javax.annotation.Nonnull UserCreateRequest userCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(userCreateRequest, null);
        Type localVarReturnType = new TypeToken<UserCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a user (asynchronously)
     * create a user for a new registration
     * @param userCreateRequest user to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(@javax.annotation.Nonnull UserCreateRequest userCreateRequest, final ApiCallback<UserCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(userCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<UserCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }

        return deleteUserCall(userId, _callback);

    }

    /**
     * Delete a user
     * Delete an existing user based on the provided user id
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(@javax.annotation.Nonnull String userId) throws ApiException {
        deleteUserWithHttpInfo(userId);
    }

    /**
     * Delete a user
     * Delete an existing user based on the provided user id
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(@javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user (asynchronously)
     * Delete an existing user based on the provided user id
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(@javax.annotation.Nonnull String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfUserCall(_callback);

    }

    /**
     * Retrieve the current user
     * Retrieve the user that is currently logged in
     * @return UserSelfResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public UserSelfResponse getSelfUser() throws ApiException {
        ApiResponse<UserSelfResponse> localVarResp = getSelfUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve the current user
     * Retrieve the user that is currently logged in
     * @return ApiResponse&lt;UserSelfResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSelfResponse> getSelfUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserSelfResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the current user (asynchronously)
     * Retrieve the user that is currently logged in
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful user response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfUserAsync(final ApiCallback<UserSelfResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserSelfResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(@javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }

        return getUserCall(userId, _callback);

    }

    /**
     * Retrieve a user
     * Retrieve an existing user based on the provided user id
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return UserGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public UserGetResponse getUser(@javax.annotation.Nonnull String userId) throws ApiException {
        ApiResponse<UserGetResponse> localVarResp = getUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a user
     * Retrieve an existing user based on the provided user id
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return ApiResponse&lt;UserGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetResponse> getUserWithHttpInfo(@javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a user (asynchronously)
     * Retrieve an existing user based on the provided user id
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(@javax.annotation.Nonnull String userId, final ApiCallback<UserGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestEmailConfirmation
     * @param requestEmailConfirmationRequest data required to initiate a password reset request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestEmailConfirmationCall(@javax.annotation.Nonnull RequestEmailConfirmationRequest requestEmailConfirmationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestEmailConfirmationRequest;

        // create path and map variables
        String localVarPath = "/actions/users/request_email_confirmation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestEmailConfirmationValidateBeforeCall(@javax.annotation.Nonnull RequestEmailConfirmationRequest requestEmailConfirmationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestEmailConfirmationRequest' is set
        if (requestEmailConfirmationRequest == null) {
            throw new ApiException("Missing the required parameter 'requestEmailConfirmationRequest' when calling requestEmailConfirmation(Async)");
        }

        return requestEmailConfirmationCall(requestEmailConfirmationRequest, _callback);

    }

    /**
     * Request a new email to be sent containing the email confirmation token
     * Operation to request for a new email to allow the user to confirm their email address. This email contains a link with the required api token. 
     * @param requestEmailConfirmationRequest data required to initiate a password reset request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void requestEmailConfirmation(@javax.annotation.Nonnull RequestEmailConfirmationRequest requestEmailConfirmationRequest) throws ApiException {
        requestEmailConfirmationWithHttpInfo(requestEmailConfirmationRequest);
    }

    /**
     * Request a new email to be sent containing the email confirmation token
     * Operation to request for a new email to allow the user to confirm their email address. This email contains a link with the required api token. 
     * @param requestEmailConfirmationRequest data required to initiate a password reset request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestEmailConfirmationWithHttpInfo(@javax.annotation.Nonnull RequestEmailConfirmationRequest requestEmailConfirmationRequest) throws ApiException {
        okhttp3.Call localVarCall = requestEmailConfirmationValidateBeforeCall(requestEmailConfirmationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request a new email to be sent containing the email confirmation token (asynchronously)
     * Operation to request for a new email to allow the user to confirm their email address. This email contains a link with the required api token. 
     * @param requestEmailConfirmationRequest data required to initiate a password reset request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Email sent successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestEmailConfirmationAsync(@javax.annotation.Nonnull RequestEmailConfirmationRequest requestEmailConfirmationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestEmailConfirmationValidateBeforeCall(requestEmailConfirmationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestPasswordReset
     * @param requestPasswordResetRequest data required to initiate a password reset request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was accepted. If the user exists they will receive an email. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestPasswordResetCall(@javax.annotation.Nonnull RequestPasswordResetRequest requestPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestPasswordResetRequest;

        // create path and map variables
        String localVarPath = "/actions/users/request_password_reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestPasswordResetValidateBeforeCall(@javax.annotation.Nonnull RequestPasswordResetRequest requestPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestPasswordResetRequest' is set
        if (requestPasswordResetRequest == null) {
            throw new ApiException("Missing the required parameter 'requestPasswordResetRequest' when calling requestPasswordReset(Async)");
        }

        return requestPasswordResetCall(requestPasswordResetRequest, _callback);

    }

    /**
     * Request a password reset while unauthorized
     * This endpoint sends an email to the user&#39;s registered email address with a password reset link.   The link contains a scoped token that authorizes the user to reset their password securely. 
     * @param requestPasswordResetRequest data required to initiate a password reset request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was accepted. If the user exists they will receive an email. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void requestPasswordReset(@javax.annotation.Nonnull RequestPasswordResetRequest requestPasswordResetRequest) throws ApiException {
        requestPasswordResetWithHttpInfo(requestPasswordResetRequest);
    }

    /**
     * Request a password reset while unauthorized
     * This endpoint sends an email to the user&#39;s registered email address with a password reset link.   The link contains a scoped token that authorizes the user to reset their password securely. 
     * @param requestPasswordResetRequest data required to initiate a password reset request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was accepted. If the user exists they will receive an email. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestPasswordResetWithHttpInfo(@javax.annotation.Nonnull RequestPasswordResetRequest requestPasswordResetRequest) throws ApiException {
        okhttp3.Call localVarCall = requestPasswordResetValidateBeforeCall(requestPasswordResetRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Request a password reset while unauthorized (asynchronously)
     * This endpoint sends an email to the user&#39;s registered email address with a password reset link.   The link contains a scoped token that authorizes the user to reset their password securely. 
     * @param requestPasswordResetRequest data required to initiate a password reset request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was accepted. If the user exists they will receive an email. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestPasswordResetAsync(@javax.annotation.Nonnull RequestPasswordResetRequest requestPasswordResetRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestPasswordResetValidateBeforeCall(requestPasswordResetRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetPassword
     * @param X_TILEDB_REST_API_KEY The reset password scoped token to reset the user&#39;s password (required)
     * @param resetPasswordRequest data required to initiate a password reset request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordCall(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, @javax.annotation.Nonnull ResetPasswordRequest resetPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetPasswordRequest;

        // create path and map variables
        String localVarPath = "/actions/users/reset_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (X_TILEDB_REST_API_KEY != null) {
            localVarHeaderParams.put("X-TILEDB-REST-API-KEY", localVarApiClient.parameterToString(X_TILEDB_REST_API_KEY));
        }


        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetPasswordValidateBeforeCall(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, @javax.annotation.Nonnull ResetPasswordRequest resetPasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'X_TILEDB_REST_API_KEY' is set
        if (X_TILEDB_REST_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_TILEDB_REST_API_KEY' when calling resetPassword(Async)");
        }

        // verify the required parameter 'resetPasswordRequest' is set
        if (resetPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'resetPasswordRequest' when calling resetPassword(Async)");
        }

        return resetPasswordCall(X_TILEDB_REST_API_KEY, resetPasswordRequest, _callback);

    }

    /**
     * Reset a user&#39;s password using a scoped token.
     * This endpoint allows a user to reset their password.  The user must provide a valid scoped token, received via email, along with their new password. The token ensures secure and authorized access to update the password. 
     * @param X_TILEDB_REST_API_KEY The reset password scoped token to reset the user&#39;s password (required)
     * @param resetPasswordRequest data required to initiate a password reset request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void resetPassword(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, @javax.annotation.Nonnull ResetPasswordRequest resetPasswordRequest) throws ApiException {
        resetPasswordWithHttpInfo(X_TILEDB_REST_API_KEY, resetPasswordRequest);
    }

    /**
     * Reset a user&#39;s password using a scoped token.
     * This endpoint allows a user to reset their password.  The user must provide a valid scoped token, received via email, along with their new password. The token ensures secure and authorized access to update the password. 
     * @param X_TILEDB_REST_API_KEY The reset password scoped token to reset the user&#39;s password (required)
     * @param resetPasswordRequest data required to initiate a password reset request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resetPasswordWithHttpInfo(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, @javax.annotation.Nonnull ResetPasswordRequest resetPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(X_TILEDB_REST_API_KEY, resetPasswordRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset a user&#39;s password using a scoped token. (asynchronously)
     * This endpoint allows a user to reset their password.  The user must provide a valid scoped token, received via email, along with their new password. The token ensures secure and authorized access to update the password. 
     * @param X_TILEDB_REST_API_KEY The reset password scoped token to reset the user&#39;s password (required)
     * @param resetPasswordRequest data required to initiate a password reset request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Password updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordAsync(@javax.annotation.Nonnull String X_TILEDB_REST_API_KEY, @javax.annotation.Nonnull ResetPasswordRequest resetPasswordRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(X_TILEDB_REST_API_KEY, resetPasswordRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param userUpdateRequest userUpdateDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UserUpdateRequest userUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdateRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UserUpdateRequest userUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }

        // verify the required parameter 'userUpdateRequest' is set
        if (userUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'userUpdateRequest' when calling updateUser(Async)");
        }

        return updateUserCall(userId, userUpdateRequest, _callback);

    }

    /**
     * Update a user
     * Update an existing user based on the provided data
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param userUpdateRequest userUpdateDetails (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void updateUser(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UserUpdateRequest userUpdateRequest) throws ApiException {
        updateUserWithHttpInfo(userId, userUpdateRequest);
    }

    /**
     * Update a user
     * Update an existing user based on the provided data
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param userUpdateRequest userUpdateDetails (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateUserWithHttpInfo(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UserUpdateRequest userUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a user (asynchronously)
     * Update an existing user based on the provided data
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param userUpdateRequest userUpdateDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated user </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(@javax.annotation.Nonnull String userId, @javax.annotation.Nonnull UserUpdateRequest userUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
