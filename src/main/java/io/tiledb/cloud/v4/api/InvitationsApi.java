/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.InvitationRespondRequest;
import io.tiledb.cloud.v4.model.InvitationRetrieveRequest;
import io.tiledb.cloud.v4.model.InvitationRetrieveResponse;
import io.tiledb.cloud.v4.model.InvitationsCreateRequestInner;
import io.tiledb.cloud.v4.model.InvitationsListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvitationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvitationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvitationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createInvitations
     * @param workspace The workspace name or id (required)
     * @param invitationsCreateRequestInner The request body containing the invitation to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitations created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvitationsCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<InvitationsCreateRequestInner> invitationsCreateRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationsCreateRequestInner;

        // create path and map variables
        String localVarPath = "/invitations/admin/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvitationsValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<InvitationsCreateRequestInner> invitationsCreateRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createInvitations(Async)");
        }

        // verify the required parameter 'invitationsCreateRequestInner' is set
        if (invitationsCreateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'invitationsCreateRequestInner' when calling createInvitations(Async)");
        }

        return createInvitationsCall(workspace, invitationsCreateRequestInner, _callback);

    }

    /**
     * Create one or more invitations
     * Create one or more invitations
     * @param workspace The workspace name or id (required)
     * @param invitationsCreateRequestInner The request body containing the invitation to create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitations created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void createInvitations(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<InvitationsCreateRequestInner> invitationsCreateRequestInner) throws ApiException {
        createInvitationsWithHttpInfo(workspace, invitationsCreateRequestInner);
    }

    /**
     * Create one or more invitations
     * Create one or more invitations
     * @param workspace The workspace name or id (required)
     * @param invitationsCreateRequestInner The request body containing the invitation to create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitations created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createInvitationsWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<InvitationsCreateRequestInner> invitationsCreateRequestInner) throws ApiException {
        okhttp3.Call localVarCall = createInvitationsValidateBeforeCall(workspace, invitationsCreateRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create one or more invitations (asynchronously)
     * Create one or more invitations
     * @param workspace The workspace name or id (required)
     * @param invitationsCreateRequestInner The request body containing the invitation to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitations created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInvitationsAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<InvitationsCreateRequestInner> invitationsCreateRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInvitationsValidateBeforeCall(workspace, invitationsCreateRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRetrieveRequest The request body for retrieving an invitation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvitationCall(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRetrieveRequest invitationRetrieveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationRetrieveRequest;

        // create path and map variables
        String localVarPath = "/invitations/{invitation_id}"
            .replace("{" + "invitation_id" + "}", localVarApiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvitationValidateBeforeCall(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRetrieveRequest invitationRetrieveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling getInvitation(Async)");
        }

        // verify the required parameter 'invitationRetrieveRequest' is set
        if (invitationRetrieveRequest == null) {
            throw new ApiException("Missing the required parameter 'invitationRetrieveRequest' when calling getInvitation(Async)");
        }

        return getInvitationCall(invitationId, invitationRetrieveRequest, _callback);

    }

    /**
     * Retrieve an invitation
     * Invitee retrieves an invitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRetrieveRequest The request body for retrieving an invitation (required)
     * @return InvitationRetrieveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public InvitationRetrieveResponse getInvitation(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRetrieveRequest invitationRetrieveRequest) throws ApiException {
        ApiResponse<InvitationRetrieveResponse> localVarResp = getInvitationWithHttpInfo(invitationId, invitationRetrieveRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an invitation
     * Invitee retrieves an invitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRetrieveRequest The request body for retrieving an invitation (required)
     * @return ApiResponse&lt;InvitationRetrieveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitationRetrieveResponse> getInvitationWithHttpInfo(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRetrieveRequest invitationRetrieveRequest) throws ApiException {
        okhttp3.Call localVarCall = getInvitationValidateBeforeCall(invitationId, invitationRetrieveRequest, null);
        Type localVarReturnType = new TypeToken<InvitationRetrieveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an invitation (asynchronously)
     * Invitee retrieves an invitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRetrieveRequest The request body for retrieving an invitation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvitationAsync(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRetrieveRequest invitationRetrieveRequest, final ApiCallback<InvitationRetrieveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvitationValidateBeforeCall(invitationId, invitationRetrieveRequest, _callback);
        Type localVarReturnType = new TypeToken<InvitationRetrieveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvitations
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitations list retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvitationsCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invitations/admin/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvitationsValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listInvitations(Async)");
        }

        return listInvitationsCall(workspace, page, perPage, _callback);

    }

    /**
     * Retrieve all sent invitations
     * Retrieve all invitations that the user has sent
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return InvitationsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitations list retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public InvitationsListResponse listInvitations(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        ApiResponse<InvitationsListResponse> localVarResp = listInvitationsWithHttpInfo(workspace, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Retrieve all sent invitations
     * Retrieve all invitations that the user has sent
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return ApiResponse&lt;InvitationsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitations list retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitationsListResponse> listInvitationsWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listInvitationsValidateBeforeCall(workspace, page, perPage, null);
        Type localVarReturnType = new TypeToken<InvitationsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all sent invitations (asynchronously)
     * Retrieve all invitations that the user has sent
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitations list retrieved </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvitationsAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback<InvitationsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvitationsValidateBeforeCall(workspace, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<InvitationsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for respondInvitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRespondRequest The request body for responding to an invitation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation responded to </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondInvitationCall(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRespondRequest invitationRespondRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationRespondRequest;

        // create path and map variables
        String localVarPath = "/invitations/{invitation_id}"
            .replace("{" + "invitation_id" + "}", localVarApiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call respondInvitationValidateBeforeCall(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRespondRequest invitationRespondRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling respondInvitation(Async)");
        }

        // verify the required parameter 'invitationRespondRequest' is set
        if (invitationRespondRequest == null) {
            throw new ApiException("Missing the required parameter 'invitationRespondRequest' when calling respondInvitation(Async)");
        }

        return respondInvitationCall(invitationId, invitationRespondRequest, _callback);

    }

    /**
     * Respond to an invitation
     * Invitee responds to an invitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRespondRequest The request body for responding to an invitation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation responded to </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void respondInvitation(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRespondRequest invitationRespondRequest) throws ApiException {
        respondInvitationWithHttpInfo(invitationId, invitationRespondRequest);
    }

    /**
     * Respond to an invitation
     * Invitee responds to an invitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRespondRequest The request body for responding to an invitation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation responded to </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> respondInvitationWithHttpInfo(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRespondRequest invitationRespondRequest) throws ApiException {
        okhttp3.Call localVarCall = respondInvitationValidateBeforeCall(invitationId, invitationRespondRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Respond to an invitation (asynchronously)
     * Invitee responds to an invitation
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param invitationRespondRequest The request body for responding to an invitation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation responded to </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondInvitationAsync(@javax.annotation.Nonnull String invitationId, @javax.annotation.Nonnull InvitationRespondRequest invitationRespondRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = respondInvitationValidateBeforeCall(invitationId, invitationRespondRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeInvitation
     * @param workspace The workspace name or id (required)
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation revoked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeInvitationCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String invitationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invitations/admin/{workspace}/{invitation_id}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "invitation_id" + "}", localVarApiClient.escapeString(invitationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeInvitationValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String invitationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling revokeInvitation(Async)");
        }

        // verify the required parameter 'invitationId' is set
        if (invitationId == null) {
            throw new ApiException("Missing the required parameter 'invitationId' when calling revokeInvitation(Async)");
        }

        return revokeInvitationCall(workspace, invitationId, _callback);

    }

    /**
     * Revoke an invitation
     * Inviter revokes a previously-sent invitation
     * @param workspace The workspace name or id (required)
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation revoked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void revokeInvitation(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String invitationId) throws ApiException {
        revokeInvitationWithHttpInfo(workspace, invitationId);
    }

    /**
     * Revoke an invitation
     * Inviter revokes a previously-sent invitation
     * @param workspace The workspace name or id (required)
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation revoked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeInvitationWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String invitationId) throws ApiException {
        okhttp3.Call localVarCall = revokeInvitationValidateBeforeCall(workspace, invitationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke an invitation (asynchronously)
     * Inviter revokes a previously-sent invitation
     * @param workspace The workspace name or id (required)
     * @param invitationId The invitation ID in the form inv_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation revoked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeInvitationAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String invitationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeInvitationValidateBeforeCall(workspace, invitationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
