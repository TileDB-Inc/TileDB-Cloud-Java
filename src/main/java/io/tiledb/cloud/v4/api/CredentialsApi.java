/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.CloudProvider;
import io.tiledb.cloud.v4.model.CredentialCreateRequest;
import io.tiledb.cloud.v4.model.CredentialGetResponse;
import io.tiledb.cloud.v4.model.CredentialUpdateRequest;
import io.tiledb.cloud.v4.model.CredentialsListResponse;
import io.tiledb.cloud.v4.model.CredentialsVerifyRequest;
import io.tiledb.cloud.v4.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CredentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CredentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CredentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCredential
     * @param workspace The workspace name or id (required)
     * @param credentialCreateRequest the new credentials to be created (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new credential was successfully added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialCreateRequest credentialCreateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credentialCreateRequest;

        // create path and map variables
        String localVarPath = "/credentials/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCredentialValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialCreateRequest credentialCreateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createCredential(Async)");
        }

        // verify the required parameter 'credentialCreateRequest' is set
        if (credentialCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'credentialCreateRequest' when calling createCredential(Async)");
        }

        return createCredentialCall(workspace, credentialCreateRequest, teamspaceId, _callback);

    }

    /**
     * Create a credential
     * create a new credential, the user will create a new credential to access assets
     * @param workspace The workspace name or id (required)
     * @param credentialCreateRequest the new credentials to be created (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new credential was successfully added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void createCredential(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialCreateRequest credentialCreateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        createCredentialWithHttpInfo(workspace, credentialCreateRequest, teamspaceId);
    }

    /**
     * Create a credential
     * create a new credential, the user will create a new credential to access assets
     * @param workspace The workspace name or id (required)
     * @param credentialCreateRequest the new credentials to be created (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new credential was successfully added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createCredentialWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialCreateRequest credentialCreateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = createCredentialValidateBeforeCall(workspace, credentialCreateRequest, teamspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a credential (asynchronously)
     * create a new credential, the user will create a new credential to access assets
     * @param workspace The workspace name or id (required)
     * @param credentialCreateRequest the new credentials to be created (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new credential was successfully added </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialCreateRequest credentialCreateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCredentialValidateBeforeCall(workspace, credentialCreateRequest, teamspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCredentialByName
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user credential deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialByNameCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credentials/{workspace}/{name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCredentialByNameValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteCredentialByName(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteCredentialByName(Async)");
        }

        return deleteCredentialByNameCall(workspace, name, teamspaceId, _callback);

    }

    /**
     * Delete user credential
     * Delete the named access credential. Any arrays still set to use this credential will use the user&#39;s default and may become unreachable
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user credential deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCredentialByName(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        deleteCredentialByNameWithHttpInfo(workspace, name, teamspaceId);
    }

    /**
     * Delete user credential
     * Delete the named access credential. Any arrays still set to use this credential will use the user&#39;s default and may become unreachable
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user credential deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCredentialByNameWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteCredentialByNameValidateBeforeCall(workspace, name, teamspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete user credential (asynchronously)
     * Delete the named access credential. Any arrays still set to use this credential will use the user&#39;s default and may become unreachable
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> user credential deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialByNameAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCredentialByNameValidateBeforeCall(workspace, name, teamspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCredentialByName
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credential response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialByNameCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credentials/{workspace}/{name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCredentialByNameValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getCredentialByName(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getCredentialByName(Async)");
        }

        return getCredentialByNameCall(workspace, name, teamspaceId, _callback);

    }

    /**
     * Get user credential
     * get information about user credential by name
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return CredentialGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credential response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public CredentialGetResponse getCredentialByName(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        ApiResponse<CredentialGetResponse> localVarResp = getCredentialByNameWithHttpInfo(workspace, name, teamspaceId);
        return localVarResp.getData();
    }

    /**
     * Get user credential
     * get information about user credential by name
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;CredentialGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credential response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialGetResponse> getCredentialByNameWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = getCredentialByNameValidateBeforeCall(workspace, name, teamspaceId, null);
        Type localVarReturnType = new TypeToken<CredentialGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user credential (asynchronously)
     * get information about user credential by name
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credential response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Credential does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialByNameAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nullable String teamspaceId, final ApiCallback<CredentialGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCredentialByNameValidateBeforeCall(workspace, name, teamspaceId, _callback);
        Type localVarReturnType = new TypeToken<CredentialGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCredentials
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param provider Show only the credentials from this provider. This should be one of the CloudProvider enum values. (optional)
     * @param type Show only the credentials of this type. This should be one of the AccessCredentialType enum values. (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credentials list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable CloudProvider provider, @javax.annotation.Nullable String type, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credentials/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCredentialsValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable CloudProvider provider, @javax.annotation.Nullable String type, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getCredentials(Async)");
        }

        return getCredentialsCall(workspace, teamspaceId, provider, type, page, perPage, _callback);

    }

    /**
     * Get user credentials
     * list the credentials available for the user
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param provider Show only the credentials from this provider. This should be one of the CloudProvider enum values. (optional)
     * @param type Show only the credentials of this type. This should be one of the AccessCredentialType enum values. (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return CredentialsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credentials list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public CredentialsListResponse getCredentials(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable CloudProvider provider, @javax.annotation.Nullable String type, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        ApiResponse<CredentialsListResponse> localVarResp = getCredentialsWithHttpInfo(workspace, teamspaceId, provider, type, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get user credentials
     * list the credentials available for the user
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param provider Show only the credentials from this provider. This should be one of the CloudProvider enum values. (optional)
     * @param type Show only the credentials of this type. This should be one of the AccessCredentialType enum values. (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return ApiResponse&lt;CredentialsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credentials list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CredentialsListResponse> getCredentialsWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable CloudProvider provider, @javax.annotation.Nullable String type, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getCredentialsValidateBeforeCall(workspace, teamspaceId, provider, type, page, perPage, null);
        Type localVarReturnType = new TypeToken<CredentialsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user credentials (asynchronously)
     * list the credentials available for the user
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param provider Show only the credentials from this provider. This should be one of the CloudProvider enum values. (optional)
     * @param type Show only the credentials of this type. This should be one of the AccessCredentialType enum values. (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful credentials list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable CloudProvider provider, @javax.annotation.Nullable String type, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback<CredentialsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCredentialsValidateBeforeCall(workspace, teamspaceId, provider, type, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CredentialsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCredentialByName
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param credentialUpdateRequest credential update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCredentialByNameCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nonnull CredentialUpdateRequest credentialUpdateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credentialUpdateRequest;

        // create path and map variables
        String localVarPath = "/credentials/{workspace}/{name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCredentialByNameValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nonnull CredentialUpdateRequest credentialUpdateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling patchCredentialByName(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling patchCredentialByName(Async)");
        }

        // verify the required parameter 'credentialUpdateRequest' is set
        if (credentialUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'credentialUpdateRequest' when calling patchCredentialByName(Async)");
        }

        return patchCredentialByNameCall(workspace, name, credentialUpdateRequest, teamspaceId, _callback);

    }

    /**
     * Update user credential
     * update user credential given by the user
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param credentialUpdateRequest credential update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void patchCredentialByName(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nonnull CredentialUpdateRequest credentialUpdateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        patchCredentialByNameWithHttpInfo(workspace, name, credentialUpdateRequest, teamspaceId);
    }

    /**
     * Update user credential
     * update user credential given by the user
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param credentialUpdateRequest credential update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchCredentialByNameWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nonnull CredentialUpdateRequest credentialUpdateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = patchCredentialByNameValidateBeforeCall(workspace, name, credentialUpdateRequest, teamspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update user credential (asynchronously)
     * update user credential given by the user
     * @param workspace The workspace name or id (required)
     * @param name The name of the credentials to run CRUD operations against (required)
     * @param credentialUpdateRequest credential update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCredentialByNameAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String name, @javax.annotation.Nonnull CredentialUpdateRequest credentialUpdateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCredentialByNameValidateBeforeCall(workspace, name, credentialUpdateRequest, teamspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyCredential
     * @param workspace The workspace name or id (required)
     * @param credentialsVerifyRequest credential to verify (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyCredentialCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialsVerifyRequest credentialsVerifyRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = credentialsVerifyRequest;

        // create path and map variables
        String localVarPath = "/credentials/{workspace}/verify"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyCredentialValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialsVerifyRequest credentialsVerifyRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling verifyCredential(Async)");
        }

        // verify the required parameter 'credentialsVerifyRequest' is set
        if (credentialsVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'credentialsVerifyRequest' when calling verifyCredential(Async)");
        }

        return verifyCredentialCall(workspace, credentialsVerifyRequest, teamspaceId, _callback);

    }

    /**
     * Verify a given credential
     * verify the credentials connection for a namespace
     * @param workspace The workspace name or id (required)
     * @param credentialsVerifyRequest credential to verify (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void verifyCredential(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialsVerifyRequest credentialsVerifyRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        verifyCredentialWithHttpInfo(workspace, credentialsVerifyRequest, teamspaceId);
    }

    /**
     * Verify a given credential
     * verify the credentials connection for a namespace
     * @param workspace The workspace name or id (required)
     * @param credentialsVerifyRequest credential to verify (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> verifyCredentialWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialsVerifyRequest credentialsVerifyRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = verifyCredentialValidateBeforeCall(workspace, credentialsVerifyRequest, teamspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verify a given credential (asynchronously)
     * verify the credentials connection for a namespace
     * @param workspace The workspace name or id (required)
     * @param credentialsVerifyRequest credential to verify (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful connection </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyCredentialAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull CredentialsVerifyRequest credentialsVerifyRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyCredentialValidateBeforeCall(workspace, credentialsVerifyRequest, teamspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
