/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.TeamspaceGetResponse;
import io.tiledb.cloud.v4.model.TeamspaceUpdateRequest;
import io.tiledb.cloud.v4.model.TeamspaceUserGetResponse;
import io.tiledb.cloud.v4.model.TeamspaceUserUpdateRequest;
import io.tiledb.cloud.v4.model.TeamspaceUsersBulkUpdateRequestInner;
import io.tiledb.cloud.v4.model.TeamspaceUsersCreateRequestInner;
import io.tiledb.cloud.v4.model.TeamspaceUsersCreateResponse;
import io.tiledb.cloud.v4.model.TeamspaceUsersJoinResponse;
import io.tiledb.cloud.v4.model.TeamspaceUsersListResponse;
import io.tiledb.cloud.v4.model.TeamspacesCreateRequest;
import io.tiledb.cloud.v4.model.TeamspacesCreateResponse;
import io.tiledb.cloud.v4.model.TeamspacesListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamspacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamspacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamspacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTeamspaceUsers
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersCreateRequestInner The request body containing the teamspace users to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace users created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersCreateRequestInner> teamspaceUsersCreateRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamspaceUsersCreateRequestInner;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}/users"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersCreateRequestInner> teamspaceUsersCreateRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createTeamspaceUsers(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling createTeamspaceUsers(Async)");
        }

        // verify the required parameter 'teamspaceUsersCreateRequestInner' is set
        if (teamspaceUsersCreateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'teamspaceUsersCreateRequestInner' when calling createTeamspaceUsers(Async)");
        }

        return createTeamspaceUsersCall(workspace, teamspace, teamspaceUsersCreateRequestInner, _callback);

    }

    /**
     * Create one or more teamspace users in a teamspace
     * Create one or more teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersCreateRequestInner The request body containing the teamspace users to create (required)
     * @return TeamspaceUsersCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace users created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public TeamspaceUsersCreateResponse createTeamspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersCreateRequestInner> teamspaceUsersCreateRequestInner) throws ApiException {
        ApiResponse<TeamspaceUsersCreateResponse> localVarResp = createTeamspaceUsersWithHttpInfo(workspace, teamspace, teamspaceUsersCreateRequestInner);
        return localVarResp.getData();
    }

    /**
     * Create one or more teamspace users in a teamspace
     * Create one or more teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersCreateRequestInner The request body containing the teamspace users to create (required)
     * @return ApiResponse&lt;TeamspaceUsersCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace users created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamspaceUsersCreateResponse> createTeamspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersCreateRequestInner> teamspaceUsersCreateRequestInner) throws ApiException {
        okhttp3.Call localVarCall = createTeamspaceUsersValidateBeforeCall(workspace, teamspace, teamspaceUsersCreateRequestInner, null);
        Type localVarReturnType = new TypeToken<TeamspaceUsersCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create one or more teamspace users in a teamspace (asynchronously)
     * Create one or more teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersCreateRequestInner The request body containing the teamspace users to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace users created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersCreateRequestInner> teamspaceUsersCreateRequestInner, final ApiCallback<TeamspaceUsersCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamspaceUsersValidateBeforeCall(workspace, teamspace, teamspaceUsersCreateRequestInner, _callback);
        Type localVarReturnType = new TypeToken<TeamspaceUsersCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTeamspaces
     * @param workspace The workspace name or id (required)
     * @param teamspacesCreateRequest The request body containing the teamspace to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspaces created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamspacesCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull TeamspacesCreateRequest teamspacesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamspacesCreateRequest;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamspacesValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull TeamspacesCreateRequest teamspacesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createTeamspaces(Async)");
        }

        // verify the required parameter 'teamspacesCreateRequest' is set
        if (teamspacesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'teamspacesCreateRequest' when calling createTeamspaces(Async)");
        }

        return createTeamspacesCall(workspace, teamspacesCreateRequest, _callback);

    }

    /**
     * Create a teamspace
     * Create a teamspace. The user creating the teamspace will be the teamspace owner. 
     * @param workspace The workspace name or id (required)
     * @param teamspacesCreateRequest The request body containing the teamspace to create (required)
     * @return TeamspacesCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspaces created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public TeamspacesCreateResponse createTeamspaces(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull TeamspacesCreateRequest teamspacesCreateRequest) throws ApiException {
        ApiResponse<TeamspacesCreateResponse> localVarResp = createTeamspacesWithHttpInfo(workspace, teamspacesCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a teamspace
     * Create a teamspace. The user creating the teamspace will be the teamspace owner. 
     * @param workspace The workspace name or id (required)
     * @param teamspacesCreateRequest The request body containing the teamspace to create (required)
     * @return ApiResponse&lt;TeamspacesCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspaces created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamspacesCreateResponse> createTeamspacesWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull TeamspacesCreateRequest teamspacesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTeamspacesValidateBeforeCall(workspace, teamspacesCreateRequest, null);
        Type localVarReturnType = new TypeToken<TeamspacesCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a teamspace (asynchronously)
     * Create a teamspace. The user creating the teamspace will be the teamspace owner. 
     * @param workspace The workspace name or id (required)
     * @param teamspacesCreateRequest The request body containing the teamspace to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspaces created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamspacesAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull TeamspacesCreateRequest teamspacesCreateRequest, final ApiCallback<TeamspacesCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamspacesValidateBeforeCall(workspace, teamspacesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamspacesCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTeamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteTeamspace(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling deleteTeamspace(Async)");
        }

        return deleteTeamspaceCall(workspace, teamspace, _callback);

    }

    /**
     * Delete a teamspace
     * Delete the given teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTeamspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        deleteTeamspaceWithHttpInfo(workspace, teamspace);
    }

    /**
     * Delete a teamspace
     * Delete the given teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTeamspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamspaceValidateBeforeCall(workspace, teamspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a teamspace (asynchronously)
     * Delete the given teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamspaceValidateBeforeCall(workspace, teamspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTeamspaceUser
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspaceUserCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}/users/{user_id}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamspaceUserValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteTeamspaceUser(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling deleteTeamspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteTeamspaceUser(Async)");
        }

        return deleteTeamspaceUserCall(workspace, teamspace, userId, _callback);

    }

    /**
     * Delete a teamspace user
     * Delete the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTeamspaceUser(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId) throws ApiException {
        deleteTeamspaceUserWithHttpInfo(workspace, teamspace, userId);
    }

    /**
     * Delete a teamspace user
     * Delete the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTeamspaceUserWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamspaceUserValidateBeforeCall(workspace, teamspace, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a teamspace user (asynchronously)
     * Delete the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspaceUserAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamspaceUserValidateBeforeCall(workspace, teamspace, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTeamspaceUsers
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param requestBody The request body containing the teamspace users to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given teamspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/actions/teamspaces/{workspace}/{teamspace}/users/bulk_delete"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteTeamspaceUsers(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling deleteTeamspaceUsers(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling deleteTeamspaceUsers(Async)");
        }

        return deleteTeamspaceUsersCall(workspace, teamspace, requestBody, _callback);

    }

    /**
     * Delete the given teamspace users in a teamspace
     * Delete the given teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param requestBody The request body containing the teamspace users to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given teamspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTeamspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<String> requestBody) throws ApiException {
        deleteTeamspaceUsersWithHttpInfo(workspace, teamspace, requestBody);
    }

    /**
     * Delete the given teamspace users in a teamspace
     * Delete the given teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param requestBody The request body containing the teamspace users to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given teamspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTeamspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamspaceUsersValidateBeforeCall(workspace, teamspace, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the given teamspace users in a teamspace (asynchronously)
     * Delete the given teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param requestBody The request body containing the teamspace users to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given teamspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamspaceUsersValidateBeforeCall(workspace, teamspace, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTeamspaces
     * @param workspace The workspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspaces deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspacesCall(@javax.annotation.Nonnull String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamspacesValidateBeforeCall(@javax.annotation.Nonnull String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteTeamspaces(Async)");
        }

        return deleteTeamspacesCall(workspace, _callback);

    }

    /**
     * Delete all teamspaces in the workspace
     * Delete all teamspaces in the workspace
     * @param workspace The workspace name or id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspaces deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTeamspaces(@javax.annotation.Nonnull String workspace) throws ApiException {
        deleteTeamspacesWithHttpInfo(workspace);
    }

    /**
     * Delete all teamspaces in the workspace
     * Delete all teamspaces in the workspace
     * @param workspace The workspace name or id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspaces deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTeamspacesWithHttpInfo(@javax.annotation.Nonnull String workspace) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamspacesValidateBeforeCall(workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all teamspaces in the workspace (asynchronously)
     * Delete all teamspaces in the workspace
     * @param workspace The workspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspaces deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamspacesAsync(@javax.annotation.Nonnull String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamspacesValidateBeforeCall(workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getTeamspace(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling getTeamspace(Async)");
        }

        return getTeamspaceCall(workspace, teamspace, _callback);

    }

    /**
     * Retrieve a teamspace
     * Retrieve the given teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return TeamspaceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public TeamspaceGetResponse getTeamspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        ApiResponse<TeamspaceGetResponse> localVarResp = getTeamspaceWithHttpInfo(workspace, teamspace);
        return localVarResp.getData();
    }

    /**
     * Retrieve a teamspace
     * Retrieve the given teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return ApiResponse&lt;TeamspaceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamspaceGetResponse> getTeamspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        okhttp3.Call localVarCall = getTeamspaceValidateBeforeCall(workspace, teamspace, null);
        Type localVarReturnType = new TypeToken<TeamspaceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a teamspace (asynchronously)
     * Retrieve the given teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback<TeamspaceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamspaceValidateBeforeCall(workspace, teamspace, _callback);
        Type localVarReturnType = new TypeToken<TeamspaceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamspaceUser
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamspaceUserCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}/users/{user_id}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamspaceUserValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getTeamspaceUser(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling getTeamspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getTeamspaceUser(Async)");
        }

        return getTeamspaceUserCall(workspace, teamspace, userId, _callback);

    }

    /**
     * Retrieve a teamspace user
     * Retrieve the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return TeamspaceUserGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public TeamspaceUserGetResponse getTeamspaceUser(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId) throws ApiException {
        ApiResponse<TeamspaceUserGetResponse> localVarResp = getTeamspaceUserWithHttpInfo(workspace, teamspace, userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a teamspace user
     * Retrieve the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return ApiResponse&lt;TeamspaceUserGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamspaceUserGetResponse> getTeamspaceUserWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = getTeamspaceUserValidateBeforeCall(workspace, teamspace, userId, null);
        Type localVarReturnType = new TypeToken<TeamspaceUserGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a teamspace user (asynchronously)
     * Retrieve the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamspaceUserAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, final ApiCallback<TeamspaceUserGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamspaceUserValidateBeforeCall(workspace, teamspace, userId, _callback);
        Type localVarReturnType = new TypeToken<TeamspaceUserGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for joinTeamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace joined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinTeamspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/teamspaces/{workspace}/{teamspace}/users/join"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinTeamspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling joinTeamspace(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling joinTeamspace(Async)");
        }

        return joinTeamspaceCall(workspace, teamspace, _callback);

    }

    /**
     * Join the given public teamspace
     * Allows users to join a public teamspace if they are a member of the corresponding workspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return TeamspaceUsersJoinResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace joined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public TeamspaceUsersJoinResponse joinTeamspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        ApiResponse<TeamspaceUsersJoinResponse> localVarResp = joinTeamspaceWithHttpInfo(workspace, teamspace);
        return localVarResp.getData();
    }

    /**
     * Join the given public teamspace
     * Allows users to join a public teamspace if they are a member of the corresponding workspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return ApiResponse&lt;TeamspaceUsersJoinResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace joined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamspaceUsersJoinResponse> joinTeamspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        okhttp3.Call localVarCall = joinTeamspaceValidateBeforeCall(workspace, teamspace, null);
        Type localVarReturnType = new TypeToken<TeamspaceUsersJoinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Join the given public teamspace (asynchronously)
     * Allows users to join a public teamspace if they are a member of the corresponding workspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Teamspace joined </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinTeamspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback<TeamspaceUsersJoinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinTeamspaceValidateBeforeCall(workspace, teamspace, _callback);
        Type localVarReturnType = new TypeToken<TeamspaceUsersJoinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveTeamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace left </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveTeamspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/teamspaces/{workspace}/{teamspace}/users/leave"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveTeamspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling leaveTeamspace(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling leaveTeamspace(Async)");
        }

        return leaveTeamspaceCall(workspace, teamspace, _callback);

    }

    /**
     * Leave the given teamspace
     * Allows teamspace members to leave a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace left </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void leaveTeamspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        leaveTeamspaceWithHttpInfo(workspace, teamspace);
    }

    /**
     * Leave the given teamspace
     * Allows teamspace members to leave a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace left </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaveTeamspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        okhttp3.Call localVarCall = leaveTeamspaceValidateBeforeCall(workspace, teamspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Leave the given teamspace (asynchronously)
     * Allows teamspace members to leave a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace left </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveTeamspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveTeamspaceValidateBeforeCall(workspace, teamspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTeamspaceUsers
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace users list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}/users"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listTeamspaceUsers(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling listTeamspaceUsers(Async)");
        }

        return listTeamspaceUsersCall(workspace, teamspace, _callback);

    }

    /**
     * Retrieve all teamspace users in a teamspace
     * Retrieve a list of all teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return TeamspaceUsersListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace users list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public TeamspaceUsersListResponse listTeamspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        ApiResponse<TeamspaceUsersListResponse> localVarResp = listTeamspaceUsersWithHttpInfo(workspace, teamspace);
        return localVarResp.getData();
    }

    /**
     * Retrieve all teamspace users in a teamspace
     * Retrieve a list of all teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @return ApiResponse&lt;TeamspaceUsersListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace users list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamspaceUsersListResponse> listTeamspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace) throws ApiException {
        okhttp3.Call localVarCall = listTeamspaceUsersValidateBeforeCall(workspace, teamspace, null);
        Type localVarReturnType = new TypeToken<TeamspaceUsersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all teamspace users in a teamspace (asynchronously)
     * Retrieve a list of all teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspace users list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, final ApiCallback<TeamspaceUsersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamspaceUsersValidateBeforeCall(workspace, teamspace, _callback);
        Type localVarReturnType = new TypeToken<TeamspaceUsersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTeamspaces
     * @param workspace The workspace name or id (required)
     * @param orderBy The field to order the results by. Defaults to &#x60;created_at&#x60;. Can be one of the following: - name - created_at - updated_at  (optional)
     * @param order Specifies the sorting direction for the results returned by the query. Defaults to &#x60;desc&#x60;. Can be one of the following: - asc - desc  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspaces retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamspacesCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamspacesValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listTeamspaces(Async)");
        }

        return listTeamspacesCall(workspace, orderBy, order, _callback);

    }

    /**
     * Retrieve all teamspaces in the workspace
     * Retrieve all teamspaces in the workspace
     * @param workspace The workspace name or id (required)
     * @param orderBy The field to order the results by. Defaults to &#x60;created_at&#x60;. Can be one of the following: - name - created_at - updated_at  (optional)
     * @param order Specifies the sorting direction for the results returned by the query. Defaults to &#x60;desc&#x60;. Can be one of the following: - asc - desc  (optional)
     * @return TeamspacesListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspaces retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public TeamspacesListResponse listTeamspaces(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String order) throws ApiException {
        ApiResponse<TeamspacesListResponse> localVarResp = listTeamspacesWithHttpInfo(workspace, orderBy, order);
        return localVarResp.getData();
    }

    /**
     * Retrieve all teamspaces in the workspace
     * Retrieve all teamspaces in the workspace
     * @param workspace The workspace name or id (required)
     * @param orderBy The field to order the results by. Defaults to &#x60;created_at&#x60;. Can be one of the following: - name - created_at - updated_at  (optional)
     * @param order Specifies the sorting direction for the results returned by the query. Defaults to &#x60;desc&#x60;. Can be one of the following: - asc - desc  (optional)
     * @return ApiResponse&lt;TeamspacesListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspaces retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamspacesListResponse> listTeamspacesWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String order) throws ApiException {
        okhttp3.Call localVarCall = listTeamspacesValidateBeforeCall(workspace, orderBy, order, null);
        Type localVarReturnType = new TypeToken<TeamspacesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all teamspaces in the workspace (asynchronously)
     * Retrieve all teamspaces in the workspace
     * @param workspace The workspace name or id (required)
     * @param orderBy The field to order the results by. Defaults to &#x60;created_at&#x60;. Can be one of the following: - name - created_at - updated_at  (optional)
     * @param order Specifies the sorting direction for the results returned by the query. Defaults to &#x60;desc&#x60;. Can be one of the following: - asc - desc  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teamspaces retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamspacesAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String order, final ApiCallback<TeamspacesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamspacesValidateBeforeCall(workspace, orderBy, order, _callback);
        Type localVarReturnType = new TypeToken<TeamspacesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUpdateRequest The request body containing the teamspace to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull TeamspaceUpdateRequest teamspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamspaceUpdateRequest;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull TeamspaceUpdateRequest teamspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateTeamspace(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling updateTeamspace(Async)");
        }

        // verify the required parameter 'teamspaceUpdateRequest' is set
        if (teamspaceUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'teamspaceUpdateRequest' when calling updateTeamspace(Async)");
        }

        return updateTeamspaceCall(workspace, teamspace, teamspaceUpdateRequest, _callback);

    }

    /**
     * Update the given teamspace
     * Update a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUpdateRequest The request body containing the teamspace to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateTeamspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull TeamspaceUpdateRequest teamspaceUpdateRequest) throws ApiException {
        updateTeamspaceWithHttpInfo(workspace, teamspace, teamspaceUpdateRequest);
    }

    /**
     * Update the given teamspace
     * Update a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUpdateRequest The request body containing the teamspace to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTeamspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull TeamspaceUpdateRequest teamspaceUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTeamspaceValidateBeforeCall(workspace, teamspace, teamspaceUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the given teamspace (asynchronously)
     * Update a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUpdateRequest The request body containing the teamspace to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull TeamspaceUpdateRequest teamspaceUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamspaceValidateBeforeCall(workspace, teamspace, teamspaceUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeamspaceUser
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param teamspaceUserUpdateRequest The request body containing the teamspace user to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamspaceUserCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull TeamspaceUserUpdateRequest teamspaceUserUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamspaceUserUpdateRequest;

        // create path and map variables
        String localVarPath = "/teamspaces/{workspace}/{teamspace}/users/{user_id}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamspaceUserValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull TeamspaceUserUpdateRequest teamspaceUserUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateTeamspaceUser(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling updateTeamspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateTeamspaceUser(Async)");
        }

        // verify the required parameter 'teamspaceUserUpdateRequest' is set
        if (teamspaceUserUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'teamspaceUserUpdateRequest' when calling updateTeamspaceUser(Async)");
        }

        return updateTeamspaceUserCall(workspace, teamspace, userId, teamspaceUserUpdateRequest, _callback);

    }

    /**
     * Update a teamspace user
     * Update the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param teamspaceUserUpdateRequest The request body containing the teamspace user to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateTeamspaceUser(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull TeamspaceUserUpdateRequest teamspaceUserUpdateRequest) throws ApiException {
        updateTeamspaceUserWithHttpInfo(workspace, teamspace, userId, teamspaceUserUpdateRequest);
    }

    /**
     * Update a teamspace user
     * Update the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param teamspaceUserUpdateRequest The request body containing the teamspace user to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTeamspaceUserWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull TeamspaceUserUpdateRequest teamspaceUserUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTeamspaceUserValidateBeforeCall(workspace, teamspace, userId, teamspaceUserUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a teamspace user (asynchronously)
     * Update the given teamspace user
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param userId The user ID in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param teamspaceUserUpdateRequest The request body containing the teamspace user to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamspaceUserAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull TeamspaceUserUpdateRequest teamspaceUserUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamspaceUserValidateBeforeCall(workspace, teamspace, userId, teamspaceUserUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeamspaceUsers
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersBulkUpdateRequestInner The request body containing the teamspace users to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersBulkUpdateRequestInner> teamspaceUsersBulkUpdateRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamspaceUsersBulkUpdateRequestInner;

        // create path and map variables
        String localVarPath = "/actions/teamspaces/{workspace}/{teamspace}/users/bulk_update"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersBulkUpdateRequestInner> teamspaceUsersBulkUpdateRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateTeamspaceUsers(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling updateTeamspaceUsers(Async)");
        }

        // verify the required parameter 'teamspaceUsersBulkUpdateRequestInner' is set
        if (teamspaceUsersBulkUpdateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'teamspaceUsersBulkUpdateRequestInner' when calling updateTeamspaceUsers(Async)");
        }

        return updateTeamspaceUsersCall(workspace, teamspace, teamspaceUsersBulkUpdateRequestInner, _callback);

    }

    /**
     * Update multiple teamspace users in a teamspace
     * Update multiple teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersBulkUpdateRequestInner The request body containing the teamspace users to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateTeamspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersBulkUpdateRequestInner> teamspaceUsersBulkUpdateRequestInner) throws ApiException {
        updateTeamspaceUsersWithHttpInfo(workspace, teamspace, teamspaceUsersBulkUpdateRequestInner);
    }

    /**
     * Update multiple teamspace users in a teamspace
     * Update multiple teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersBulkUpdateRequestInner The request body containing the teamspace users to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTeamspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersBulkUpdateRequestInner> teamspaceUsersBulkUpdateRequestInner) throws ApiException {
        okhttp3.Call localVarCall = updateTeamspaceUsersValidateBeforeCall(workspace, teamspace, teamspaceUsersBulkUpdateRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update multiple teamspace users in a teamspace (asynchronously)
     * Update multiple teamspace users in a teamspace
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param teamspaceUsersBulkUpdateRequestInner The request body containing the teamspace users to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Teamspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull List<TeamspaceUsersBulkUpdateRequestInner> teamspaceUsersBulkUpdateRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamspaceUsersValidateBeforeCall(workspace, teamspace, teamspaceUsersBulkUpdateRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
