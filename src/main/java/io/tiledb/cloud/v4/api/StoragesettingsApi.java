/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.StorageSettingGetResponse;
import io.tiledb.cloud.v4.model.StorageSettingUpdateRequest;
import io.tiledb.cloud.v4.model.StorageSettingsCreateRequest;
import io.tiledb.cloud.v4.model.StorageSettingsCreateResponse;
import io.tiledb.cloud.v4.model.StorageSettingsListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoragesettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StoragesettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoragesettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createStorageSetting
     * @param workspace The workspace name or id (required)
     * @param storageSettingsCreateRequest The request body containing the storage setting to create (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Storage settings created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStorageSettingCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingsCreateRequest storageSettingsCreateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storageSettingsCreateRequest;

        // create path and map variables
        String localVarPath = "/storagesettings/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStorageSettingValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingsCreateRequest storageSettingsCreateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createStorageSetting(Async)");
        }

        // verify the required parameter 'storageSettingsCreateRequest' is set
        if (storageSettingsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'storageSettingsCreateRequest' when calling createStorageSetting(Async)");
        }

        return createStorageSettingCall(workspace, storageSettingsCreateRequest, teamspaceId, _callback);

    }

    /**
     * Create a new storage setting
     * create a storage setting
     * @param workspace The workspace name or id (required)
     * @param storageSettingsCreateRequest The request body containing the storage setting to create (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return StorageSettingsCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Storage settings created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public StorageSettingsCreateResponse createStorageSetting(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingsCreateRequest storageSettingsCreateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        ApiResponse<StorageSettingsCreateResponse> localVarResp = createStorageSettingWithHttpInfo(workspace, storageSettingsCreateRequest, teamspaceId);
        return localVarResp.getData();
    }

    /**
     * Create a new storage setting
     * create a storage setting
     * @param workspace The workspace name or id (required)
     * @param storageSettingsCreateRequest The request body containing the storage setting to create (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;StorageSettingsCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Storage settings created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageSettingsCreateResponse> createStorageSettingWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingsCreateRequest storageSettingsCreateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = createStorageSettingValidateBeforeCall(workspace, storageSettingsCreateRequest, teamspaceId, null);
        Type localVarReturnType = new TypeToken<StorageSettingsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new storage setting (asynchronously)
     * create a storage setting
     * @param workspace The workspace name or id (required)
     * @param storageSettingsCreateRequest The request body containing the storage setting to create (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Storage settings created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createStorageSettingAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingsCreateRequest storageSettingsCreateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback<StorageSettingsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStorageSettingValidateBeforeCall(workspace, storageSettingsCreateRequest, teamspaceId, _callback);
        Type localVarReturnType = new TypeToken<StorageSettingsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStorageSettingByID
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> storage setting deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStorageSettingByIDCall(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storagesettings/{workspace}/{stset_id}"
            .replace("{" + "stset_id" + "}", localVarApiClient.escapeString(stsetId.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStorageSettingByIDValidateBeforeCall(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stsetId' is set
        if (stsetId == null) {
            throw new ApiException("Missing the required parameter 'stsetId' when calling deleteStorageSettingByID(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteStorageSettingByID(Async)");
        }

        return deleteStorageSettingByIDCall(stsetId, workspace, teamspaceId, _callback);

    }

    /**
     * Delete storage setting
     * Delete the storage setting.
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> storage setting deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStorageSettingByID(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        deleteStorageSettingByIDWithHttpInfo(stsetId, workspace, teamspaceId);
    }

    /**
     * Delete storage setting
     * Delete the storage setting.
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> storage setting deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStorageSettingByIDWithHttpInfo(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = deleteStorageSettingByIDValidateBeforeCall(stsetId, workspace, teamspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete storage setting (asynchronously)
     * Delete the storage setting.
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> storage setting deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStorageSettingByIDAsync(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStorageSettingByIDValidateBeforeCall(stsetId, workspace, teamspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStorageSettingByID
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage setting response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStorageSettingByIDCall(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storagesettings/{workspace}/{stset_id}"
            .replace("{" + "stset_id" + "}", localVarApiClient.escapeString(stsetId.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStorageSettingByIDValidateBeforeCall(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stsetId' is set
        if (stsetId == null) {
            throw new ApiException("Missing the required parameter 'stsetId' when calling getStorageSettingByID(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getStorageSettingByID(Async)");
        }

        return getStorageSettingByIDCall(stsetId, workspace, teamspaceId, _callback);

    }

    /**
     * Get storage setting
     * get information about storage setting by ID
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return StorageSettingGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage setting response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public StorageSettingGetResponse getStorageSettingByID(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        ApiResponse<StorageSettingGetResponse> localVarResp = getStorageSettingByIDWithHttpInfo(stsetId, workspace, teamspaceId);
        return localVarResp.getData();
    }

    /**
     * Get storage setting
     * get information about storage setting by ID
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;StorageSettingGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage setting response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageSettingGetResponse> getStorageSettingByIDWithHttpInfo(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = getStorageSettingByIDValidateBeforeCall(stsetId, workspace, teamspaceId, null);
        Type localVarReturnType = new TypeToken<StorageSettingGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get storage setting (asynchronously)
     * get information about storage setting by ID
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage setting response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStorageSettingByIDAsync(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, final ApiCallback<StorageSettingGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStorageSettingByIDValidateBeforeCall(stsetId, workspace, teamspaceId, _callback);
        Type localVarReturnType = new TypeToken<StorageSettingGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listStorageSettings
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage settings list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStorageSettingsCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storagesettings/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStorageSettingsValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listStorageSettings(Async)");
        }

        return listStorageSettingsCall(workspace, teamspaceId, page, perPage, _callback);

    }

    /**
     * Get storage settings
     * list the storage settings available for the user
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return StorageSettingsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage settings list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public StorageSettingsListResponse listStorageSettings(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        ApiResponse<StorageSettingsListResponse> localVarResp = listStorageSettingsWithHttpInfo(workspace, teamspaceId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get storage settings
     * list the storage settings available for the user
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return ApiResponse&lt;StorageSettingsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage settings list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageSettingsListResponse> listStorageSettingsWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listStorageSettingsValidateBeforeCall(workspace, teamspaceId, page, perPage, null);
        Type localVarReturnType = new TypeToken<StorageSettingsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get storage settings (asynchronously)
     * list the storage settings available for the user
     * @param workspace The workspace name or id (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful storage settings list response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listStorageSettingsAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable String teamspaceId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback<StorageSettingsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStorageSettingsValidateBeforeCall(workspace, teamspaceId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<StorageSettingsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchStorageSettingByID
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param storageSettingUpdateRequest storage setting update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The storage setting was updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchStorageSettingByIDCall(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingUpdateRequest storageSettingUpdateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storageSettingUpdateRequest;

        // create path and map variables
        String localVarPath = "/storagesettings/{workspace}/{stset_id}"
            .replace("{" + "stset_id" + "}", localVarApiClient.escapeString(stsetId.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamspaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamspace_id", teamspaceId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchStorageSettingByIDValidateBeforeCall(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingUpdateRequest storageSettingUpdateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stsetId' is set
        if (stsetId == null) {
            throw new ApiException("Missing the required parameter 'stsetId' when calling patchStorageSettingByID(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling patchStorageSettingByID(Async)");
        }

        // verify the required parameter 'storageSettingUpdateRequest' is set
        if (storageSettingUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'storageSettingUpdateRequest' when calling patchStorageSettingByID(Async)");
        }

        return patchStorageSettingByIDCall(stsetId, workspace, storageSettingUpdateRequest, teamspaceId, _callback);

    }

    /**
     * Update storage setting
     * update storage setting given by the user
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param storageSettingUpdateRequest storage setting update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The storage setting was updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void patchStorageSettingByID(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingUpdateRequest storageSettingUpdateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        patchStorageSettingByIDWithHttpInfo(stsetId, workspace, storageSettingUpdateRequest, teamspaceId);
    }

    /**
     * Update storage setting
     * update storage setting given by the user
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param storageSettingUpdateRequest storage setting update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The storage setting was updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchStorageSettingByIDWithHttpInfo(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingUpdateRequest storageSettingUpdateRequest, @javax.annotation.Nullable String teamspaceId) throws ApiException {
        okhttp3.Call localVarCall = patchStorageSettingByIDValidateBeforeCall(stsetId, workspace, storageSettingUpdateRequest, teamspaceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update storage setting (asynchronously)
     * update storage setting given by the user
     * @param stsetId The storage setting id in the form stset_9m4e2mr0ui3e8a215n4g (required)
     * @param workspace The workspace name or id (required)
     * @param storageSettingUpdateRequest storage setting update details (required)
     * @param teamspaceId Teamspace id should be empty, if the request is about an action on workspace level (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The storage setting was updated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Storage setting does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchStorageSettingByIDAsync(@javax.annotation.Nonnull String stsetId, @javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull StorageSettingUpdateRequest storageSettingUpdateRequest, @javax.annotation.Nullable String teamspaceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchStorageSettingByIDValidateBeforeCall(stsetId, workspace, storageSettingUpdateRequest, teamspaceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
