/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.AssetGetResponse;
import io.tiledb.cloud.v4.model.AssetListResponse;
import io.tiledb.cloud.v4.model.AssetMetadataCreateRequestInner;
import io.tiledb.cloud.v4.model.AssetMetadataCreateResponse;
import io.tiledb.cloud.v4.model.AssetMetadataDeleteRequestInner;
import io.tiledb.cloud.v4.model.AssetMetadataListResponse;
import io.tiledb.cloud.v4.model.AssetMetadataUpdateRequest;
import io.tiledb.cloud.v4.model.AssetPathResponse;
import io.tiledb.cloud.v4.model.AssetType;
import io.tiledb.cloud.v4.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAssetMetadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataCreateRequestInner asset metadata pairs to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful asset metadata create response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetMetadataCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull List<AssetMetadataCreateRequestInner> assetMetadataCreateRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetMetadataCreateRequestInner;

        // create path and map variables
        String localVarPath = "/assets/item/{workspace}/{teamspace}/{asset}/metadata"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "asset" + "}", localVarApiClient.escapeString(asset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetMetadataValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull List<AssetMetadataCreateRequestInner> assetMetadataCreateRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createAssetMetadata(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling createAssetMetadata(Async)");
        }

        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling createAssetMetadata(Async)");
        }

        // verify the required parameter 'assetMetadataCreateRequestInner' is set
        if (assetMetadataCreateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'assetMetadataCreateRequestInner' when calling createAssetMetadata(Async)");
        }

        return createAssetMetadataCall(workspace, teamspace, asset, assetMetadataCreateRequestInner, _callback);

    }

    /**
     * Create asset&#39;s pair metadata
     * Create asset&#39;s pair metadata (key, value and type should be provided)
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataCreateRequestInner asset metadata pairs to create (required)
     * @return AssetMetadataCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful asset metadata create response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public AssetMetadataCreateResponse createAssetMetadata(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull List<AssetMetadataCreateRequestInner> assetMetadataCreateRequestInner) throws ApiException {
        ApiResponse<AssetMetadataCreateResponse> localVarResp = createAssetMetadataWithHttpInfo(workspace, teamspace, asset, assetMetadataCreateRequestInner);
        return localVarResp.getData();
    }

    /**
     * Create asset&#39;s pair metadata
     * Create asset&#39;s pair metadata (key, value and type should be provided)
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataCreateRequestInner asset metadata pairs to create (required)
     * @return ApiResponse&lt;AssetMetadataCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful asset metadata create response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetMetadataCreateResponse> createAssetMetadataWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull List<AssetMetadataCreateRequestInner> assetMetadataCreateRequestInner) throws ApiException {
        okhttp3.Call localVarCall = createAssetMetadataValidateBeforeCall(workspace, teamspace, asset, assetMetadataCreateRequestInner, null);
        Type localVarReturnType = new TypeToken<AssetMetadataCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create asset&#39;s pair metadata (asynchronously)
     * Create asset&#39;s pair metadata (key, value and type should be provided)
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataCreateRequestInner asset metadata pairs to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful asset metadata create response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAssetMetadataAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull List<AssetMetadataCreateRequestInner> assetMetadataCreateRequestInner, final ApiCallback<AssetMetadataCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetMetadataValidateBeforeCall(workspace, teamspace, asset, assetMetadataCreateRequestInner, _callback);
        Type localVarReturnType = new TypeToken<AssetMetadataCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAssetMetadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param assetId The asset id in the form ast_9m4e2mr0ui3e8a215n4g (required)
     * @param assetMetadataDeleteRequestInner asset metadata pairs to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetMetadataCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String assetId, @javax.annotation.Nonnull List<AssetMetadataDeleteRequestInner> assetMetadataDeleteRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetMetadataDeleteRequestInner;

        // create path and map variables
        String localVarPath = "/actions/assets/{workspace}/{teamspace}/{asset_id}/metadata/bulk_delete"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetMetadataValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String assetId, @javax.annotation.Nonnull List<AssetMetadataDeleteRequestInner> assetMetadataDeleteRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteAssetMetadata(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling deleteAssetMetadata(Async)");
        }

        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling deleteAssetMetadata(Async)");
        }

        // verify the required parameter 'assetMetadataDeleteRequestInner' is set
        if (assetMetadataDeleteRequestInner == null) {
            throw new ApiException("Missing the required parameter 'assetMetadataDeleteRequestInner' when calling deleteAssetMetadata(Async)");
        }

        return deleteAssetMetadataCall(workspace, teamspace, assetId, assetMetadataDeleteRequestInner, _callback);

    }

    /**
     * Delete the given asset&#39;s metadata pairs
     * Delete asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param assetId The asset id in the form ast_9m4e2mr0ui3e8a215n4g (required)
     * @param assetMetadataDeleteRequestInner asset metadata pairs to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAssetMetadata(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String assetId, @javax.annotation.Nonnull List<AssetMetadataDeleteRequestInner> assetMetadataDeleteRequestInner) throws ApiException {
        deleteAssetMetadataWithHttpInfo(workspace, teamspace, assetId, assetMetadataDeleteRequestInner);
    }

    /**
     * Delete the given asset&#39;s metadata pairs
     * Delete asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param assetId The asset id in the form ast_9m4e2mr0ui3e8a215n4g (required)
     * @param assetMetadataDeleteRequestInner asset metadata pairs to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAssetMetadataWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String assetId, @javax.annotation.Nonnull List<AssetMetadataDeleteRequestInner> assetMetadataDeleteRequestInner) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetMetadataValidateBeforeCall(workspace, teamspace, assetId, assetMetadataDeleteRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the given asset&#39;s metadata pairs (asynchronously)
     * Delete asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param assetId The asset id in the form ast_9m4e2mr0ui3e8a215n4g (required)
     * @param assetMetadataDeleteRequestInner asset metadata pairs to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAssetMetadataAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String assetId, @javax.annotation.Nonnull List<AssetMetadataDeleteRequestInner> assetMetadataDeleteRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetMetadataValidateBeforeCall(workspace, teamspace, assetId, assetMetadataDeleteRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAsset
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID or path does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assets/item/{workspace}/{teamspace}/{asset}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "asset" + "}", localVarApiClient.escapeString(asset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getAsset(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling getAsset(Async)");
        }

        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling getAsset(Async)");
        }

        return getAssetCall(workspace, teamspace, asset, _callback);

    }

    /**
     * Retrieve asset
     * Retrieve the asset by the given asset_id or path
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @return AssetGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID or path does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public AssetGetResponse getAsset(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset) throws ApiException {
        ApiResponse<AssetGetResponse> localVarResp = getAssetWithHttpInfo(workspace, teamspace, asset);
        return localVarResp.getData();
    }

    /**
     * Retrieve asset
     * Retrieve the asset by the given asset_id or path
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @return ApiResponse&lt;AssetGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID or path does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetGetResponse> getAssetWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset) throws ApiException {
        okhttp3.Call localVarCall = getAssetValidateBeforeCall(workspace, teamspace, asset, null);
        Type localVarReturnType = new TypeToken<AssetGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve asset (asynchronously)
     * Retrieve the asset by the given asset_id or path
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID or path does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, final ApiCallback<AssetGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetValidateBeforeCall(workspace, teamspace, asset, _callback);
        Type localVarReturnType = new TypeToken<AssetGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetMetadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset metadata retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetMetadataCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assets/item/{workspace}/{teamspace}/{asset}/metadata"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "asset" + "}", localVarApiClient.escapeString(asset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetMetadataValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getAssetMetadata(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling getAssetMetadata(Async)");
        }

        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling getAssetMetadata(Async)");
        }

        return getAssetMetadataCall(workspace, teamspace, asset, _callback);

    }

    /**
     * Retrieve asset&#39;s metadata
     * Retrieve the given asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @return AssetMetadataListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset metadata retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public AssetMetadataListResponse getAssetMetadata(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset) throws ApiException {
        ApiResponse<AssetMetadataListResponse> localVarResp = getAssetMetadataWithHttpInfo(workspace, teamspace, asset);
        return localVarResp.getData();
    }

    /**
     * Retrieve asset&#39;s metadata
     * Retrieve the given asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @return ApiResponse&lt;AssetMetadataListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset metadata retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetMetadataListResponse> getAssetMetadataWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset) throws ApiException {
        okhttp3.Call localVarCall = getAssetMetadataValidateBeforeCall(workspace, teamspace, asset, null);
        Type localVarReturnType = new TypeToken<AssetMetadataListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve asset&#39;s metadata (asynchronously)
     * Retrieve the given asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Asset metadata retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Asset ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetMetadataAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, final ApiCallback<AssetMetadataListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetMetadataValidateBeforeCall(workspace, teamspace, asset, _callback);
        Type localVarReturnType = new TypeToken<AssetMetadataListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssetsInPath
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets in path retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given path components do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsInPathCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assets/path/{workspace}/{teamspace}/{path}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetsInPathValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getAssetsInPath(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling getAssetsInPath(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getAssetsInPath(Async)");
        }

        return getAssetsInPathCall(workspace, teamspace, path, _callback);

    }

    /**
     * Retrieve all assets in a given path
     * Retrieve all assets in a given path, e.g., a request for &#x60;/a/b/c&#x60; will return the assets &#x60;a&#x60;, &#x60;b&#x60;, and &#x60;c&#x60;. 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @return AssetPathResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets in path retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given path components do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public AssetPathResponse getAssetsInPath(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path) throws ApiException {
        ApiResponse<AssetPathResponse> localVarResp = getAssetsInPathWithHttpInfo(workspace, teamspace, path);
        return localVarResp.getData();
    }

    /**
     * Retrieve all assets in a given path
     * Retrieve all assets in a given path, e.g., a request for &#x60;/a/b/c&#x60; will return the assets &#x60;a&#x60;, &#x60;b&#x60;, and &#x60;c&#x60;. 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @return ApiResponse&lt;AssetPathResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets in path retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given path components do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetPathResponse> getAssetsInPathWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path) throws ApiException {
        okhttp3.Call localVarCall = getAssetsInPathValidateBeforeCall(workspace, teamspace, path, null);
        Type localVarReturnType = new TypeToken<AssetPathResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all assets in a given path (asynchronously)
     * Retrieve all assets in a given path, e.g., a request for &#x60;/a/b/c&#x60; will return the assets &#x60;a&#x60;, &#x60;b&#x60;, and &#x60;c&#x60;. 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assets in path retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given path components do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetsInPathAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, final ApiCallback<AssetPathResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetsInPathValidateBeforeCall(workspace, teamspace, path, _callback);
        Type localVarReturnType = new TypeToken<AssetPathResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAssets
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param assetType asset type to filter to (optional)
     * @param createdBy users that created the asset to filter to (optional)
     * @param orderBy order by string (optional)
     * @param expand expand api response with supplemental information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful asset listing response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssetsCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable AssetType assetType, @javax.annotation.Nullable String createdBy, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assets/list/{workspace}/{teamspace}/{path}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (assetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_type", assetType));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by", createdBy));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssetsValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable AssetType assetType, @javax.annotation.Nullable String createdBy, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listAssets(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling listAssets(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling listAssets(Async)");
        }

        return listAssetsCall(workspace, teamspace, path, page, perPage, assetType, createdBy, orderBy, expand, _callback);

    }

    /**
     * Retrieves asset listing for the given teamspace
     * End point to retrieve assets for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param assetType asset type to filter to (optional)
     * @param createdBy users that created the asset to filter to (optional)
     * @param orderBy order by string (optional)
     * @param expand expand api response with supplemental information (optional)
     * @return AssetListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful asset listing response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public AssetListResponse listAssets(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable AssetType assetType, @javax.annotation.Nullable String createdBy, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String expand) throws ApiException {
        ApiResponse<AssetListResponse> localVarResp = listAssetsWithHttpInfo(workspace, teamspace, path, page, perPage, assetType, createdBy, orderBy, expand);
        return localVarResp.getData();
    }

    /**
     * Retrieves asset listing for the given teamspace
     * End point to retrieve assets for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param assetType asset type to filter to (optional)
     * @param createdBy users that created the asset to filter to (optional)
     * @param orderBy order by string (optional)
     * @param expand expand api response with supplemental information (optional)
     * @return ApiResponse&lt;AssetListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful asset listing response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetListResponse> listAssetsWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable AssetType assetType, @javax.annotation.Nullable String createdBy, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String expand) throws ApiException {
        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(workspace, teamspace, path, page, perPage, assetType, createdBy, orderBy, expand, null);
        Type localVarReturnType = new TypeToken<AssetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves asset listing for the given teamspace (asynchronously)
     * End point to retrieve assets for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path for which to retrieve assets (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param assetType asset type to filter to (optional)
     * @param createdBy users that created the asset to filter to (optional)
     * @param orderBy order by string (optional)
     * @param expand expand api response with supplemental information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful asset listing response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAssetsAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable AssetType assetType, @javax.annotation.Nullable String createdBy, @javax.annotation.Nullable String orderBy, @javax.annotation.Nullable String expand, final ApiCallback<AssetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(workspace, teamspace, path, page, perPage, assetType, createdBy, orderBy, expand, _callback);
        Type localVarReturnType = new TypeToken<AssetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAssetMetadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataUpdateRequest asset metadata pairs to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetMetadataCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull AssetMetadataUpdateRequest assetMetadataUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetMetadataUpdateRequest;

        // create path and map variables
        String localVarPath = "/assets/item/{workspace}/{teamspace}/{asset}/metadata"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "asset" + "}", localVarApiClient.escapeString(asset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetMetadataValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull AssetMetadataUpdateRequest assetMetadataUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateAssetMetadata(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling updateAssetMetadata(Async)");
        }

        // verify the required parameter 'asset' is set
        if (asset == null) {
            throw new ApiException("Missing the required parameter 'asset' when calling updateAssetMetadata(Async)");
        }

        // verify the required parameter 'assetMetadataUpdateRequest' is set
        if (assetMetadataUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetMetadataUpdateRequest' when calling updateAssetMetadata(Async)");
        }

        return updateAssetMetadataCall(workspace, teamspace, asset, assetMetadataUpdateRequest, _callback);

    }

    /**
     * Update the given asset&#39;s metadata pair
     * Update asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataUpdateRequest asset metadata pairs to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateAssetMetadata(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull AssetMetadataUpdateRequest assetMetadataUpdateRequest) throws ApiException {
        updateAssetMetadataWithHttpInfo(workspace, teamspace, asset, assetMetadataUpdateRequest);
    }

    /**
     * Update the given asset&#39;s metadata pair
     * Update asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataUpdateRequest asset metadata pairs to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateAssetMetadataWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull AssetMetadataUpdateRequest assetMetadataUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAssetMetadataValidateBeforeCall(workspace, teamspace, asset, assetMetadataUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the given asset&#39;s metadata pair (asynchronously)
     * Update asset&#39;s metadata
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param asset The asset id or path for which to retrieve assets (required)
     * @param assetMetadataUpdateRequest asset metadata pairs to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Asset metadata updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssetMetadataAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String asset, @javax.annotation.Nonnull AssetMetadataUpdateRequest assetMetadataUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetMetadataValidateBeforeCall(workspace, teamspace, asset, assetMetadataUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
