/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.ErrorXML;
import java.io.File;
import io.tiledb.cloud.v4.model.FileListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fileGet
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param range The range of bytes to fetch. Supports only single ranges. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable String range, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{workspace}/{teamspace}/{path}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (range != null) {
            localVarHeaderParams.put("Range", localVarApiClient.parameterToString(range));
        }


        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileGetValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable String range, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling fileGet(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling fileGet(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling fileGet(Async)");
        }

        return fileGetCall(workspace, teamspace, path, range, _callback);

    }

    /**
     * Download the file at the given path
     * End point to download the file at the given path 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param range The range of bytes to fetch. Supports only single ranges. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void fileGet(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable String range) throws ApiException {
        fileGetWithHttpInfo(workspace, teamspace, path, range);
    }

    /**
     * Download the file at the given path
     * End point to download the file at the given path 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param range The range of bytes to fetch. Supports only single ranges. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileGetWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable String range) throws ApiException {
        okhttp3.Call localVarCall = fileGetValidateBeforeCall(workspace, teamspace, path, range, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download the file at the given path (asynchronously)
     * End point to download the file at the given path 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param range The range of bytes to fetch. Supports only single ranges. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nullable String range, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileGetValidateBeforeCall(workspace, teamspace, path, range, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileHead
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileHeadCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{workspace}/{teamspace}/{path}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileHeadValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling fileHead(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling fileHead(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling fileHead(Async)");
        }

        return fileHeadCall(workspace, teamspace, path, _callback);

    }

    /**
     * Get information about the file at the given path
     * End point to get information about the file at the given path 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public void fileHead(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path) throws ApiException {
        fileHeadWithHttpInfo(workspace, teamspace, path);
    }

    /**
     * Get information about the file at the given path
     * End point to get information about the file at the given path 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileHeadWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path) throws ApiException {
        okhttp3.Call localVarCall = fileHeadValidateBeforeCall(workspace, teamspace, path, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get information about the file at the given path (asynchronously)
     * End point to get information about the file at the given path 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful file get response </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Successful file ranged get response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace or file does not exist </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range not satisfiable </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileHeadAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileHeadValidateBeforeCall(workspace, teamspace, path, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for folderList
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param listType Required for S3 API compatibility, must be set to 2. (required)
     * @param delimiter The string that delimits the path segments. Only forward slash is supported (required)
     * @param prefix The directory of files to list. (optional)
     * @param maxKeys The maximum number of items to return. (optional)
     * @param continuationToken Used to resume an incomplete list operation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folder list response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call folderListCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull Integer listType, @javax.annotation.Nonnull String delimiter, @javax.annotation.Nullable String prefix, @javax.annotation.Nullable Integer maxKeys, @javax.annotation.Nullable String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files/{workspace}/{teamspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (listType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list-type", listType));
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        if (maxKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-keys", maxKeys));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuation-token", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call folderListValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull Integer listType, @javax.annotation.Nonnull String delimiter, @javax.annotation.Nullable String prefix, @javax.annotation.Nullable Integer maxKeys, @javax.annotation.Nullable String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling folderList(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling folderList(Async)");
        }

        // verify the required parameter 'listType' is set
        if (listType == null) {
            throw new ApiException("Missing the required parameter 'listType' when calling folderList(Async)");
        }

        // verify the required parameter 'delimiter' is set
        if (delimiter == null) {
            throw new ApiException("Missing the required parameter 'delimiter' when calling folderList(Async)");
        }

        return folderListCall(workspace, teamspace, listType, delimiter, prefix, maxKeys, continuationToken, _callback);

    }

    /**
     * List folders and files contained in a folder
     * End point to list files and folders for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param listType Required for S3 API compatibility, must be set to 2. (required)
     * @param delimiter The string that delimits the path segments. Only forward slash is supported (required)
     * @param prefix The directory of files to list. (optional)
     * @param maxKeys The maximum number of items to return. (optional)
     * @param continuationToken Used to resume an incomplete list operation (optional)
     * @return FileListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folder list response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public FileListResponse folderList(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull Integer listType, @javax.annotation.Nonnull String delimiter, @javax.annotation.Nullable String prefix, @javax.annotation.Nullable Integer maxKeys, @javax.annotation.Nullable String continuationToken) throws ApiException {
        ApiResponse<FileListResponse> localVarResp = folderListWithHttpInfo(workspace, teamspace, listType, delimiter, prefix, maxKeys, continuationToken);
        return localVarResp.getData();
    }

    /**
     * List folders and files contained in a folder
     * End point to list files and folders for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param listType Required for S3 API compatibility, must be set to 2. (required)
     * @param delimiter The string that delimits the path segments. Only forward slash is supported (required)
     * @param prefix The directory of files to list. (optional)
     * @param maxKeys The maximum number of items to return. (optional)
     * @param continuationToken Used to resume an incomplete list operation (optional)
     * @return ApiResponse&lt;FileListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folder list response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileListResponse> folderListWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull Integer listType, @javax.annotation.Nonnull String delimiter, @javax.annotation.Nullable String prefix, @javax.annotation.Nullable Integer maxKeys, @javax.annotation.Nullable String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = folderListValidateBeforeCall(workspace, teamspace, listType, delimiter, prefix, maxKeys, continuationToken, null);
        Type localVarReturnType = new TypeToken<FileListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List folders and files contained in a folder (asynchronously)
     * End point to list files and folders for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param listType Required for S3 API compatibility, must be set to 2. (required)
     * @param delimiter The string that delimits the path segments. Only forward slash is supported (required)
     * @param prefix The directory of files to list. (optional)
     * @param maxKeys The maximum number of items to return. (optional)
     * @param continuationToken Used to resume an incomplete list operation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folder list response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Teamspace does not exist </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call folderListAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull Integer listType, @javax.annotation.Nonnull String delimiter, @javax.annotation.Nullable String prefix, @javax.annotation.Nullable Integer maxKeys, @javax.annotation.Nullable String continuationToken, final ApiCallback<FileListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = folderListValidateBeforeCall(workspace, teamspace, listType, delimiter, prefix, maxKeys, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<FileListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadPart
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully uploaded the part. </td><td>  * ETag - ETag of the uploaded part. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadPartCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/files/{workspace}/{teamspace}/{path}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadPartValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nonnull File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling uploadPart(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling uploadPart(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling uploadPart(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadPart(Async)");
        }

        return uploadPartCall(workspace, teamspace, path, body, _callback);

    }

    /**
     * Upload Part
     * Uploads a part in a multipart upload session.
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully uploaded the part. </td><td>  * ETag - ETag of the uploaded part. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void uploadPart(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nonnull File body) throws ApiException {
        uploadPartWithHttpInfo(workspace, teamspace, path, body);
    }

    /**
     * Upload Part
     * Uploads a part in a multipart upload session.
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully uploaded the part. </td><td>  * ETag - ETag of the uploaded part. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadPartWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nonnull File body) throws ApiException {
        okhttp3.Call localVarCall = uploadPartValidateBeforeCall(workspace, teamspace, path, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload Part (asynchronously)
     * Uploads a part in a multipart upload session.
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param path The path to the file (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully uploaded the part. </td><td>  * ETag - ETag of the uploaded part. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadPartAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String path, @javax.annotation.Nonnull File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadPartValidateBeforeCall(workspace, teamspace, path, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
