/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.WorkspaceCreateRequest;
import io.tiledb.cloud.v4.model.WorkspaceCreateResponse;
import io.tiledb.cloud.v4.model.WorkspaceGetResponse;
import io.tiledb.cloud.v4.model.WorkspaceUpdateRequest;
import io.tiledb.cloud.v4.model.WorkspaceUserGetResponse;
import io.tiledb.cloud.v4.model.WorkspaceUserUpdateRequest;
import io.tiledb.cloud.v4.model.WorkspaceUsersBulkUpdateRequestInner;
import io.tiledb.cloud.v4.model.WorkspaceUsersCreateRequestInner;
import io.tiledb.cloud.v4.model.WorkspaceUsersCreateResponse;
import io.tiledb.cloud.v4.model.WorkspaceUsersListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkspacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkspacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkspacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWorkspace
     * @param workspaceCreateRequest workspace to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceCall(@javax.annotation.Nonnull WorkspaceCreateRequest workspaceCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceCreateRequest;

        // create path and map variables
        String localVarPath = "/workspaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkspaceValidateBeforeCall(@javax.annotation.Nonnull WorkspaceCreateRequest workspaceCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceCreateRequest' is set
        if (workspaceCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'workspaceCreateRequest' when calling createWorkspace(Async)");
        }

        return createWorkspaceCall(workspaceCreateRequest, _callback);

    }

    /**
     * Create a workspace
     * create a workspace, the user creating will be listed as owner
     * @param workspaceCreateRequest workspace to create (required)
     * @return WorkspaceCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkspaceCreateResponse createWorkspace(@javax.annotation.Nonnull WorkspaceCreateRequest workspaceCreateRequest) throws ApiException {
        ApiResponse<WorkspaceCreateResponse> localVarResp = createWorkspaceWithHttpInfo(workspaceCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a workspace
     * create a workspace, the user creating will be listed as owner
     * @param workspaceCreateRequest workspace to create (required)
     * @return ApiResponse&lt;WorkspaceCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkspaceCreateResponse> createWorkspaceWithHttpInfo(@javax.annotation.Nonnull WorkspaceCreateRequest workspaceCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(workspaceCreateRequest, null);
        Type localVarReturnType = new TypeToken<WorkspaceCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a workspace (asynchronously)
     * create a workspace, the user creating will be listed as owner
     * @param workspaceCreateRequest workspace to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceAsync(@javax.annotation.Nonnull WorkspaceCreateRequest workspaceCreateRequest, final ApiCallback<WorkspaceCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkspaceValidateBeforeCall(workspaceCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWorkspaceUsers
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersCreateRequestInner The request body containing the workspace users to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Workspace user(s) created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersCreateRequestInner> workspaceUsersCreateRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUsersCreateRequestInner;

        // create path and map variables
        String localVarPath = "/workspaceusers/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersCreateRequestInner> workspaceUsersCreateRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createWorkspaceUsers(Async)");
        }

        // verify the required parameter 'workspaceUsersCreateRequestInner' is set
        if (workspaceUsersCreateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'workspaceUsersCreateRequestInner' when calling createWorkspaceUsers(Async)");
        }

        return createWorkspaceUsersCall(workspace, workspaceUsersCreateRequestInner, _callback);

    }

    /**
     * Create one or more workspace users
     * Create one or more workspace users
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersCreateRequestInner The request body containing the workspace users to create (required)
     * @return WorkspaceUsersCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Workspace user(s) created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public WorkspaceUsersCreateResponse createWorkspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersCreateRequestInner> workspaceUsersCreateRequestInner) throws ApiException {
        ApiResponse<WorkspaceUsersCreateResponse> localVarResp = createWorkspaceUsersWithHttpInfo(workspace, workspaceUsersCreateRequestInner);
        return localVarResp.getData();
    }

    /**
     * Create one or more workspace users
     * Create one or more workspace users
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersCreateRequestInner The request body containing the workspace users to create (required)
     * @return ApiResponse&lt;WorkspaceUsersCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Workspace user(s) created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkspaceUsersCreateResponse> createWorkspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersCreateRequestInner> workspaceUsersCreateRequestInner) throws ApiException {
        okhttp3.Call localVarCall = createWorkspaceUsersValidateBeforeCall(workspace, workspaceUsersCreateRequestInner, null);
        Type localVarReturnType = new TypeToken<WorkspaceUsersCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create one or more workspace users (asynchronously)
     * Create one or more workspace users
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersCreateRequestInner The request body containing the workspace users to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Workspace user(s) created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWorkspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersCreateRequestInner> workspaceUsersCreateRequestInner, final ApiCallback<WorkspaceUsersCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkspaceUsersValidateBeforeCall(workspace, workspaceUsersCreateRequestInner, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceUsersCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkspace
     * @param workspace The workspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceCall(@javax.annotation.Nonnull String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteWorkspace(Async)");
        }

        return deleteWorkspaceCall(workspace, _callback);

    }

    /**
     * Delete a workspace
     * delete a workspace
     * @param workspace The workspace name or id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorkspace(@javax.annotation.Nonnull String workspace) throws ApiException {
        deleteWorkspaceWithHttpInfo(workspace);
    }

    /**
     * Delete a workspace
     * delete a workspace
     * @param workspace The workspace name or id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorkspaceWithHttpInfo(@javax.annotation.Nonnull String workspace) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(workspace, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a workspace (asynchronously)
     * delete a workspace
     * @param workspace The workspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceAsync(@javax.annotation.Nonnull String workspace, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceValidateBeforeCall(workspace, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkspaceUser
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceUserCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaceusers/{workspace}/{user_id}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspaceUserValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteWorkspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteWorkspaceUser(Async)");
        }

        return deleteWorkspaceUserCall(workspace, userId, _callback);

    }

    /**
     * Delete a workspace user
     * Delete the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorkspaceUser(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId) throws ApiException {
        deleteWorkspaceUserWithHttpInfo(workspace, userId);
    }

    /**
     * Delete a workspace user
     * Delete the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorkspaceUserWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceUserValidateBeforeCall(workspace, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a workspace user (asynchronously)
     * Delete the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceUserAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceUserValidateBeforeCall(workspace, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWorkspaceUsers
     * @param workspace The workspace name or id (required)
     * @param requestBody The request body containing the workspace users to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given workspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/actions/workspaces/{workspace}/users/bulk_delete"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteWorkspaceUsers(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling deleteWorkspaceUsers(Async)");
        }

        return deleteWorkspaceUsersCall(workspace, requestBody, _callback);

    }

    /**
     * Delete the given workspace users in a workspace
     * Delete the given workspace users in a workspace
     * @param workspace The workspace name or id (required)
     * @param requestBody The request body containing the workspace users to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given workspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWorkspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<String> requestBody) throws ApiException {
        deleteWorkspaceUsersWithHttpInfo(workspace, requestBody);
    }

    /**
     * Delete the given workspace users in a workspace
     * Delete the given workspace users in a workspace
     * @param workspace The workspace name or id (required)
     * @param requestBody The request body containing the workspace users to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given workspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWorkspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkspaceUsersValidateBeforeCall(workspace, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the given workspace users in a workspace (asynchronously)
     * Delete the given workspace users in a workspace
     * @param workspace The workspace name or id (required)
     * @param requestBody The request body containing the workspace users to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> One or more of the given workspace users do not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWorkspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkspaceUsersValidateBeforeCall(workspace, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkspace
     * @param workspace The workspace name or id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceCall(@javax.annotation.Nonnull String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getWorkspace(Async)");
        }

        return getWorkspaceCall(workspace, _callback);

    }

    /**
     * Retrieves metadata for the given workspace
     * End point to retrieve metadata for the passed workspace 
     * @param workspace The workspace name or id (required)
     * @return WorkspaceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public WorkspaceGetResponse getWorkspace(@javax.annotation.Nonnull String workspace) throws ApiException {
        ApiResponse<WorkspaceGetResponse> localVarResp = getWorkspaceWithHttpInfo(workspace);
        return localVarResp.getData();
    }

    /**
     * Retrieves metadata for the given workspace
     * End point to retrieve metadata for the passed workspace 
     * @param workspace The workspace name or id (required)
     * @return ApiResponse&lt;WorkspaceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkspaceGetResponse> getWorkspaceWithHttpInfo(@javax.annotation.Nonnull String workspace) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceValidateBeforeCall(workspace, null);
        Type localVarReturnType = new TypeToken<WorkspaceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves metadata for the given workspace (asynchronously)
     * End point to retrieve metadata for the passed workspace 
     * @param workspace The workspace name or id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful workspace response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceAsync(@javax.annotation.Nonnull String workspace, final ApiCallback<WorkspaceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceValidateBeforeCall(workspace, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkspaceUser
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceUserCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaceusers/{workspace}/{user_id}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceUserValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getWorkspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getWorkspaceUser(Async)");
        }

        return getWorkspaceUserCall(workspace, userId, _callback);

    }

    /**
     * Retrieve a workspace user
     * Retrieve the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return WorkspaceUserGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public WorkspaceUserGetResponse getWorkspaceUser(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId) throws ApiException {
        ApiResponse<WorkspaceUserGetResponse> localVarResp = getWorkspaceUserWithHttpInfo(workspace, userId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a workspace user
     * Retrieve the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @return ApiResponse&lt;WorkspaceUserGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkspaceUserGetResponse> getWorkspaceUserWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceUserValidateBeforeCall(workspace, userId, null);
        Type localVarReturnType = new TypeToken<WorkspaceUserGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a workspace user (asynchronously)
     * Retrieve the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkspaceUserAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, final ApiCallback<WorkspaceUserGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceUserValidateBeforeCall(workspace, userId, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceUserGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWorkspaceUsers
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user(s) list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaceusers/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listWorkspaceUsers(Async)");
        }

        return listWorkspaceUsersCall(workspace, page, perPage, _callback);

    }

    /**
     * Retrieve multiple workspace users
     * Retrieve a list of workspace users
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return WorkspaceUsersListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user(s) list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public WorkspaceUsersListResponse listWorkspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        ApiResponse<WorkspaceUsersListResponse> localVarResp = listWorkspaceUsersWithHttpInfo(workspace, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Retrieve multiple workspace users
     * Retrieve a list of workspace users
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return ApiResponse&lt;WorkspaceUsersListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user(s) list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkspaceUsersListResponse> listWorkspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(workspace, page, perPage, null);
        Type localVarReturnType = new TypeToken<WorkspaceUsersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve multiple workspace users (asynchronously)
     * Retrieve a list of workspace users
     * @param workspace The workspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workspace user(s) list retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWorkspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback<WorkspaceUsersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(workspace, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<WorkspaceUsersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkspace
     * @param workspace The workspace name or id (required)
     * @param workspaceUpdateRequest workspaceUpdateDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUpdateRequest;

        // create path and map variables
        String localVarPath = "/workspaces/{workspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateWorkspace(Async)");
        }

        // verify the required parameter 'workspaceUpdateRequest' is set
        if (workspaceUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'workspaceUpdateRequest' when calling updateWorkspace(Async)");
        }

        return updateWorkspaceCall(workspace, workspaceUpdateRequest, _callback);

    }

    /**
     * Update a workspace
     * update a workspace
     * @param workspace The workspace name or id (required)
     * @param workspaceUpdateRequest workspaceUpdateDetails (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void updateWorkspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull WorkspaceUpdateRequest workspaceUpdateRequest) throws ApiException {
        updateWorkspaceWithHttpInfo(workspace, workspaceUpdateRequest);
    }

    /**
     * Update a workspace
     * update a workspace
     * @param workspace The workspace name or id (required)
     * @param workspaceUpdateRequest workspaceUpdateDetails (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateWorkspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull WorkspaceUpdateRequest workspaceUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(workspace, workspaceUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a workspace (asynchronously)
     * update a workspace
     * @param workspace The workspace name or id (required)
     * @param workspaceUpdateRequest workspaceUpdateDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> workspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull WorkspaceUpdateRequest workspaceUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceValidateBeforeCall(workspace, workspaceUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkspaceUser
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param workspaceUserUpdateRequest The request body containing the workspace user to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceUserCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull WorkspaceUserUpdateRequest workspaceUserUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUserUpdateRequest;

        // create path and map variables
        String localVarPath = "/workspaceusers/{workspace}/{user_id}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkspaceUserValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull WorkspaceUserUpdateRequest workspaceUserUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateWorkspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateWorkspaceUser(Async)");
        }

        // verify the required parameter 'workspaceUserUpdateRequest' is set
        if (workspaceUserUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'workspaceUserUpdateRequest' when calling updateWorkspaceUser(Async)");
        }

        return updateWorkspaceUserCall(workspace, userId, workspaceUserUpdateRequest, _callback);

    }

    /**
     * Update a workspace user
     * Update the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param workspaceUserUpdateRequest The request body containing the workspace user to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateWorkspaceUser(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull WorkspaceUserUpdateRequest workspaceUserUpdateRequest) throws ApiException {
        updateWorkspaceUserWithHttpInfo(workspace, userId, workspaceUserUpdateRequest);
    }

    /**
     * Update a workspace user
     * Update the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param workspaceUserUpdateRequest The request body containing the workspace user to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateWorkspaceUserWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull WorkspaceUserUpdateRequest workspaceUserUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceUserValidateBeforeCall(workspace, userId, workspaceUserUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a workspace user (asynchronously)
     * Update the given workspace user
     * @param workspace The workspace name or id (required)
     * @param userId The user id in the form usr_9m4e2mr0ui3e8a215n4g (required)
     * @param workspaceUserUpdateRequest The request body containing the workspace user to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace user updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Workspace user ID does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceUserAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userId, @javax.annotation.Nonnull WorkspaceUserUpdateRequest workspaceUserUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceUserValidateBeforeCall(workspace, userId, workspaceUserUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWorkspaceUsers
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersBulkUpdateRequestInner The request body containing the workspace users to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceUsersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersBulkUpdateRequestInner> workspaceUsersBulkUpdateRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workspaceUsersBulkUpdateRequestInner;

        // create path and map variables
        String localVarPath = "/actions/workspaces/{workspace}/users/bulk_update"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkspaceUsersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersBulkUpdateRequestInner> workspaceUsersBulkUpdateRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateWorkspaceUsers(Async)");
        }

        // verify the required parameter 'workspaceUsersBulkUpdateRequestInner' is set
        if (workspaceUsersBulkUpdateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'workspaceUsersBulkUpdateRequestInner' when calling updateWorkspaceUsers(Async)");
        }

        return updateWorkspaceUsersCall(workspace, workspaceUsersBulkUpdateRequestInner, _callback);

    }

    /**
     * Update multiple workspace users in a workspace
     * Update multiple workspace users in a workspace
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersBulkUpdateRequestInner The request body containing the workspace users to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateWorkspaceUsers(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersBulkUpdateRequestInner> workspaceUsersBulkUpdateRequestInner) throws ApiException {
        updateWorkspaceUsersWithHttpInfo(workspace, workspaceUsersBulkUpdateRequestInner);
    }

    /**
     * Update multiple workspace users in a workspace
     * Update multiple workspace users in a workspace
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersBulkUpdateRequestInner The request body containing the workspace users to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateWorkspaceUsersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersBulkUpdateRequestInner> workspaceUsersBulkUpdateRequestInner) throws ApiException {
        okhttp3.Call localVarCall = updateWorkspaceUsersValidateBeforeCall(workspace, workspaceUsersBulkUpdateRequestInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update multiple workspace users in a workspace (asynchronously)
     * Update multiple workspace users in a workspace
     * @param workspace The workspace name or id (required)
     * @param workspaceUsersBulkUpdateRequestInner The request body containing the workspace users to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Workspace users updated successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWorkspaceUsersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull List<WorkspaceUsersBulkUpdateRequestInner> workspaceUsersBulkUpdateRequestInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkspaceUsersValidateBeforeCall(workspace, workspaceUsersBulkUpdateRequestInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
