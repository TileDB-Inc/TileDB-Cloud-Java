/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.FolderContentsResponse;
import io.tiledb.cloud.v4.model.FolderCreateRequestInner;
import io.tiledb.cloud.v4.model.FolderCreateResponse;
import io.tiledb.cloud.v4.model.FolderGetResponse;
import io.tiledb.cloud.v4.model.FolderListResponse;
import io.tiledb.cloud.v4.model.FolderUpdateRequest;
import io.tiledb.cloud.v4.model.FoldersContentsModifyInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FoldersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFolder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderCreateRequestInner folder to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful folder response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderCreateRequestInner folderCreateRequestInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folderCreateRequestInner;

        // create path and map variables
        String localVarPath = "/folders/{workspace}/{teamspace}/{folder}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderCreateRequestInner folderCreateRequestInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling createFolder(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling createFolder(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling createFolder(Async)");
        }

        // verify the required parameter 'folderCreateRequestInner' is set
        if (folderCreateRequestInner == null) {
            throw new ApiException("Missing the required parameter 'folderCreateRequestInner' when calling createFolder(Async)");
        }

        return createFolderCall(workspace, teamspace, folder, folderCreateRequestInner, _callback);

    }

    /**
     * Create a folder in the given teamspace
     * Create a new folder in the given teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderCreateRequestInner folder to create (required)
     * @return FolderCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful folder response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public FolderCreateResponse createFolder(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderCreateRequestInner folderCreateRequestInner) throws ApiException {
        ApiResponse<FolderCreateResponse> localVarResp = createFolderWithHttpInfo(workspace, teamspace, folder, folderCreateRequestInner);
        return localVarResp.getData();
    }

    /**
     * Create a folder in the given teamspace
     * Create a new folder in the given teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderCreateRequestInner folder to create (required)
     * @return ApiResponse&lt;FolderCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful folder response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderCreateResponse> createFolderWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderCreateRequestInner folderCreateRequestInner) throws ApiException {
        okhttp3.Call localVarCall = createFolderValidateBeforeCall(workspace, teamspace, folder, folderCreateRequestInner, null);
        Type localVarReturnType = new TypeToken<FolderCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a folder in the given teamspace (asynchronously)
     * Create a new folder in the given teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderCreateRequestInner folder to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful folder response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFolderAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderCreateRequestInner folderCreateRequestInner, final ApiCallback<FolderCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderValidateBeforeCall(workspace, teamspace, folder, folderCreateRequestInner, _callback);
        Type localVarReturnType = new TypeToken<FolderCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFolder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> folder deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{workspace}/{teamspace}/{folder}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteFolder(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling deleteFolder(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling deleteFolder(Async)");
        }

        return deleteFolderCall(workspace, teamspace, folder, _callback);

    }

    /**
     * Delete a folder
     * delete a folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> folder deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFolder(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder) throws ApiException {
        deleteFolderWithHttpInfo(workspace, teamspace, folder);
    }

    /**
     * Delete a folder
     * delete a folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> folder deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFolderWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(workspace, teamspace, folder, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a folder (asynchronously)
     * delete a folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> folder deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFolderAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(workspace, teamspace, folder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{workspace}/{teamspace}/{folder}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getFolder(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling getFolder(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling getFolder(Async)");
        }

        return getFolderCall(workspace, teamspace, folder, _callback);

    }

    /**
     * Retrieve a folder&#39;s content
     * Retrieve the given folder&#39;s content
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @return FolderGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public FolderGetResponse getFolder(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder) throws ApiException {
        ApiResponse<FolderGetResponse> localVarResp = getFolderWithHttpInfo(workspace, teamspace, folder);
        return localVarResp.getData();
    }

    /**
     * Retrieve a folder&#39;s content
     * Retrieve the given folder&#39;s content
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @return ApiResponse&lt;FolderGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderGetResponse> getFolderWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder) throws ApiException {
        okhttp3.Call localVarCall = getFolderValidateBeforeCall(workspace, teamspace, folder, null);
        Type localVarReturnType = new TypeToken<FolderGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a folder&#39;s content (asynchronously)
     * Retrieve the given folder&#39;s content
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback<FolderGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderValidateBeforeCall(workspace, teamspace, folder, _callback);
        Type localVarReturnType = new TypeToken<FolderGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFolderContents
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder contents retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderContentsCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{workspace}/{teamspace}/{folder}/contents"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderContentsValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getFolderContents(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling getFolderContents(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling getFolderContents(Async)");
        }

        return getFolderContentsCall(workspace, teamspace, folder, _callback);

    }

    /**
     * Retrieve a folder
     * Retrieve the given folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @return FolderContentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder contents retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public FolderContentsResponse getFolderContents(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder) throws ApiException {
        ApiResponse<FolderContentsResponse> localVarResp = getFolderContentsWithHttpInfo(workspace, teamspace, folder);
        return localVarResp.getData();
    }

    /**
     * Retrieve a folder
     * Retrieve the given folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @return ApiResponse&lt;FolderContentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder contents retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderContentsResponse> getFolderContentsWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder) throws ApiException {
        okhttp3.Call localVarCall = getFolderContentsValidateBeforeCall(workspace, teamspace, folder, null);
        Type localVarReturnType = new TypeToken<FolderContentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a folder (asynchronously)
     * Retrieve the given folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Folder contents retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Folder does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFolderContentsAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, final ApiCallback<FolderContentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderContentsValidateBeforeCall(workspace, teamspace, folder, _callback);
        Type localVarReturnType = new TypeToken<FolderContentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFolders
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folders listing response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFoldersCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{workspace}/{teamspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFoldersValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling listFolders(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling listFolders(Async)");
        }

        return listFoldersCall(workspace, teamspace, page, perPage, _callback);

    }

    /**
     * Retrieves folder listing for the given teamspace
     * End point to retrieve folders for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return FolderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folders listing response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public FolderListResponse listFolders(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        ApiResponse<FolderListResponse> localVarResp = listFoldersWithHttpInfo(workspace, teamspace, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Retrieves folder listing for the given teamspace
     * End point to retrieve folders for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return ApiResponse&lt;FolderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folders listing response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderListResponse> listFoldersWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(workspace, teamspace, page, perPage, null);
        Type localVarReturnType = new TypeToken<FolderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves folder listing for the given teamspace (asynchronously)
     * End point to retrieve folders for the passed teamspace 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful folders listing response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFoldersAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, final ApiCallback<FolderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(workspace, teamspace, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<FolderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyFolderContents
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param foldersContentsModifyInner assets to add or remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder contents modified successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyFolderContentsCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FoldersContentsModifyInner foldersContentsModifyInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = foldersContentsModifyInner;

        // create path and map variables
        String localVarPath = "/folders/{workspace}/{teamspace}/{folder}/contents"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyFolderContentsValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FoldersContentsModifyInner foldersContentsModifyInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling modifyFolderContents(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling modifyFolderContents(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling modifyFolderContents(Async)");
        }

        // verify the required parameter 'foldersContentsModifyInner' is set
        if (foldersContentsModifyInner == null) {
            throw new ApiException("Missing the required parameter 'foldersContentsModifyInner' when calling modifyFolderContents(Async)");
        }

        return modifyFolderContentsCall(workspace, teamspace, folder, foldersContentsModifyInner, _callback);

    }

    /**
     * Add or remove assets under a folder
     * Add or remove assets under a folder 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param foldersContentsModifyInner assets to add or remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder contents modified successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void modifyFolderContents(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FoldersContentsModifyInner foldersContentsModifyInner) throws ApiException {
        modifyFolderContentsWithHttpInfo(workspace, teamspace, folder, foldersContentsModifyInner);
    }

    /**
     * Add or remove assets under a folder
     * Add or remove assets under a folder 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param foldersContentsModifyInner assets to add or remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder contents modified successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> modifyFolderContentsWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FoldersContentsModifyInner foldersContentsModifyInner) throws ApiException {
        okhttp3.Call localVarCall = modifyFolderContentsValidateBeforeCall(workspace, teamspace, folder, foldersContentsModifyInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add or remove assets under a folder (asynchronously)
     * Add or remove assets under a folder 
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param foldersContentsModifyInner assets to add or remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder contents modified successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyFolderContentsAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FoldersContentsModifyInner foldersContentsModifyInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyFolderContentsValidateBeforeCall(workspace, teamspace, folder, foldersContentsModifyInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFolder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderUpdateRequest The request body containing the folder to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFolderCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderUpdateRequest folderUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folderUpdateRequest;

        // create path and map variables
        String localVarPath = "/folders/{workspace}/{teamspace}/{folder}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "teamspace" + "}", localVarApiClient.escapeString(teamspace.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFolderValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderUpdateRequest folderUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateFolder(Async)");
        }

        // verify the required parameter 'teamspace' is set
        if (teamspace == null) {
            throw new ApiException("Missing the required parameter 'teamspace' when calling updateFolder(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling updateFolder(Async)");
        }

        // verify the required parameter 'folderUpdateRequest' is set
        if (folderUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'folderUpdateRequest' when calling updateFolder(Async)");
        }

        return updateFolderCall(workspace, teamspace, folder, folderUpdateRequest, _callback);

    }

    /**
     * Update the given folder
     * Update a folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderUpdateRequest The request body containing the folder to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateFolder(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderUpdateRequest folderUpdateRequest) throws ApiException {
        updateFolderWithHttpInfo(workspace, teamspace, folder, folderUpdateRequest);
    }

    /**
     * Update the given folder
     * Update a folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderUpdateRequest The request body containing the folder to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateFolderWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderUpdateRequest folderUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(workspace, teamspace, folder, folderUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the given folder (asynchronously)
     * Update a folder
     * @param workspace The workspace name or id (required)
     * @param teamspace The teamspace name or id (required)
     * @param folder The path to the folder or the folder&#39;s assetID (required)
     * @param folderUpdateRequest The request body containing the folder to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Folder updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFolderAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String teamspace, @javax.annotation.Nonnull String folder, @javax.annotation.Nonnull FolderUpdateRequest folderUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(workspace, teamspace, folder, folderUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
