/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.UserspaceGetResponse;
import io.tiledb.cloud.v4.model.UserspaceUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserspacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserspacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserspacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getUserspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Userspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Userspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/userspaces/{workspace}/{userspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "userspace" + "}", localVarApiClient.escapeString(userspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getUserspace(Async)");
        }

        // verify the required parameter 'userspace' is set
        if (userspace == null) {
            throw new ApiException("Missing the required parameter 'userspace' when calling getUserspace(Async)");
        }

        return getUserspaceCall(workspace, userspace, _callback);

    }

    /**
     * Retrieve a userspace
     * Retrieve the given userspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @return UserspaceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Userspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Userspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public UserspaceGetResponse getUserspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace) throws ApiException {
        ApiResponse<UserspaceGetResponse> localVarResp = getUserspaceWithHttpInfo(workspace, userspace);
        return localVarResp.getData();
    }

    /**
     * Retrieve a userspace
     * Retrieve the given userspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @return ApiResponse&lt;UserspaceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Userspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Userspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserspaceGetResponse> getUserspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace) throws ApiException {
        okhttp3.Call localVarCall = getUserspaceValidateBeforeCall(workspace, userspace, null);
        Type localVarReturnType = new TypeToken<UserspaceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a userspace (asynchronously)
     * Retrieve the given userspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Userspace retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Userspace does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, final ApiCallback<UserspaceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserspaceValidateBeforeCall(workspace, userspace, _callback);
        Type localVarReturnType = new TypeToken<UserspaceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @param userspaceUpdateRequest The request body containing the userspace to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Userspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserspaceCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, @javax.annotation.Nonnull UserspaceUpdateRequest userspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userspaceUpdateRequest;

        // create path and map variables
        String localVarPath = "/userspaces/{workspace}/{userspace}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "userspace" + "}", localVarApiClient.escapeString(userspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserspaceValidateBeforeCall(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, @javax.annotation.Nonnull UserspaceUpdateRequest userspaceUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateUserspace(Async)");
        }

        // verify the required parameter 'userspace' is set
        if (userspace == null) {
            throw new ApiException("Missing the required parameter 'userspace' when calling updateUserspace(Async)");
        }

        // verify the required parameter 'userspaceUpdateRequest' is set
        if (userspaceUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'userspaceUpdateRequest' when calling updateUserspace(Async)");
        }

        return updateUserspaceCall(workspace, userspace, userspaceUpdateRequest, _callback);

    }

    /**
     * Update the given userspace
     * Update a userspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @param userspaceUpdateRequest The request body containing the userspace to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Userspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void updateUserspace(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, @javax.annotation.Nonnull UserspaceUpdateRequest userspaceUpdateRequest) throws ApiException {
        updateUserspaceWithHttpInfo(workspace, userspace, userspaceUpdateRequest);
    }

    /**
     * Update the given userspace
     * Update a userspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @param userspaceUpdateRequest The request body containing the userspace to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Userspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateUserspaceWithHttpInfo(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, @javax.annotation.Nonnull UserspaceUpdateRequest userspaceUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserspaceValidateBeforeCall(workspace, userspace, userspaceUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the given userspace (asynchronously)
     * Update a userspace
     * @param workspace The workspace name or id (required)
     * @param userspace The userspace id or the user&#39;s username (required)
     * @param userspaceUpdateRequest The request body containing the userspace to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Userspace updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserspaceAsync(@javax.annotation.Nonnull String workspace, @javax.annotation.Nonnull String userspace, @javax.annotation.Nonnull UserspaceUpdateRequest userspaceUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserspaceValidateBeforeCall(workspace, userspace, userspaceUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
