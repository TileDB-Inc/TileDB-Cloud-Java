/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiCallback;
import io.tiledb.cloud.v4.ApiClient;
import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.ApiResponse;
import io.tiledb.cloud.v4.Configuration;
import io.tiledb.cloud.v4.Pair;
import io.tiledb.cloud.v4.ProgressRequestBody;
import io.tiledb.cloud.v4.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.tiledb.cloud.v4.model.AcademyLesson;
import io.tiledb.cloud.v4.model.AcademyLessonsListResponse;
import io.tiledb.cloud.v4.model.AcademyQuestionnaireListResponse;
import io.tiledb.cloud.v4.model.AcademyQuestionnairePutRequest;
import io.tiledb.cloud.v4.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AcademyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AcademyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AcademyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAcademyLessons
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Academy lessons </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAcademyLessonsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/academy/lessons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAcademyLessonsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAcademyLessonsCall(_callback);

    }

    /**
     * Get information about user lessons
     * Get a list of user lessons with details about each of them
     * @return AcademyLessonsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Academy lessons </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public AcademyLessonsListResponse getAcademyLessons() throws ApiException {
        ApiResponse<AcademyLessonsListResponse> localVarResp = getAcademyLessonsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get information about user lessons
     * Get a list of user lessons with details about each of them
     * @return ApiResponse&lt;AcademyLessonsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Academy lessons </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AcademyLessonsListResponse> getAcademyLessonsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAcademyLessonsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AcademyLessonsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about user lessons (asynchronously)
     * Get a list of user lessons with details about each of them
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Academy lessons </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAcademyLessonsAsync(final ApiCallback<AcademyLessonsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAcademyLessonsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AcademyLessonsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAcademyQuestionnaire
     * @param questionnaireId questionnaire&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful academy questionnaire response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> answers not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAcademyQuestionnaireCall(@javax.annotation.Nonnull String questionnaireId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/academy/questionnaires/{questionnaire_id}"
            .replace("{" + "questionnaire_id" + "}", localVarApiClient.escapeString(questionnaireId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAcademyQuestionnaireValidateBeforeCall(@javax.annotation.Nonnull String questionnaireId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'questionnaireId' is set
        if (questionnaireId == null) {
            throw new ApiException("Missing the required parameter 'questionnaireId' when calling getAcademyQuestionnaire(Async)");
        }

        return getAcademyQuestionnaireCall(questionnaireId, _callback);

    }

    /**
     * Get academy questionnaire information for user
     * Get academy questionnaire information for user. For example, questionnaire version, completion status and user answers
     * @param questionnaireId questionnaire&#39;s id (required)
     * @return AcademyQuestionnaireListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful academy questionnaire response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> answers not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public AcademyQuestionnaireListResponse getAcademyQuestionnaire(@javax.annotation.Nonnull String questionnaireId) throws ApiException {
        ApiResponse<AcademyQuestionnaireListResponse> localVarResp = getAcademyQuestionnaireWithHttpInfo(questionnaireId);
        return localVarResp.getData();
    }

    /**
     * Get academy questionnaire information for user
     * Get academy questionnaire information for user. For example, questionnaire version, completion status and user answers
     * @param questionnaireId questionnaire&#39;s id (required)
     * @return ApiResponse&lt;AcademyQuestionnaireListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful academy questionnaire response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> answers not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AcademyQuestionnaireListResponse> getAcademyQuestionnaireWithHttpInfo(@javax.annotation.Nonnull String questionnaireId) throws ApiException {
        okhttp3.Call localVarCall = getAcademyQuestionnaireValidateBeforeCall(questionnaireId, null);
        Type localVarReturnType = new TypeToken<AcademyQuestionnaireListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get academy questionnaire information for user (asynchronously)
     * Get academy questionnaire information for user. For example, questionnaire version, completion status and user answers
     * @param questionnaireId questionnaire&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful academy questionnaire response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> answers not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAcademyQuestionnaireAsync(@javax.annotation.Nonnull String questionnaireId, final ApiCallback<AcademyQuestionnaireListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAcademyQuestionnaireValidateBeforeCall(questionnaireId, _callback);
        Type localVarReturnType = new TypeToken<AcademyQuestionnaireListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAcademyLessons
     * @param academyLesson Academy lesson to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAcademyLessonsCall(@javax.annotation.Nonnull List<AcademyLesson> academyLesson, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = academyLesson;

        // create path and map variables
        String localVarPath = "/academy/lessons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAcademyLessonsValidateBeforeCall(@javax.annotation.Nonnull List<AcademyLesson> academyLesson, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'academyLesson' is set
        if (academyLesson == null) {
            throw new ApiException("Missing the required parameter 'academyLesson' when calling putAcademyLessons(Async)");
        }

        return putAcademyLessonsCall(academyLesson, _callback);

    }

    /**
     * Academy lessons to create
     * Create one or more user lessons
     * @param academyLesson Academy lesson to create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void putAcademyLessons(@javax.annotation.Nonnull List<AcademyLesson> academyLesson) throws ApiException {
        putAcademyLessonsWithHttpInfo(academyLesson);
    }

    /**
     * Academy lessons to create
     * Create one or more user lessons
     * @param academyLesson Academy lesson to create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putAcademyLessonsWithHttpInfo(@javax.annotation.Nonnull List<AcademyLesson> academyLesson) throws ApiException {
        okhttp3.Call localVarCall = putAcademyLessonsValidateBeforeCall(academyLesson, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Academy lessons to create (asynchronously)
     * Create one or more user lessons
     * @param academyLesson Academy lesson to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAcademyLessonsAsync(@javax.annotation.Nonnull List<AcademyLesson> academyLesson, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAcademyLessonsValidateBeforeCall(academyLesson, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAcademyQuestionnaire
     * @param questionnaireId questionnaire&#39;s id (required)
     * @param academyQuestionnairePutRequest academy lesson to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAcademyQuestionnaireCall(@javax.annotation.Nonnull String questionnaireId, @javax.annotation.Nonnull AcademyQuestionnairePutRequest academyQuestionnairePutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = academyQuestionnairePutRequest;

        // create path and map variables
        String localVarPath = "/academy/questionnaires/{questionnaire_id}"
            .replace("{" + "questionnaire_id" + "}", localVarApiClient.escapeString(questionnaireId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAcademyQuestionnaireValidateBeforeCall(@javax.annotation.Nonnull String questionnaireId, @javax.annotation.Nonnull AcademyQuestionnairePutRequest academyQuestionnairePutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'questionnaireId' is set
        if (questionnaireId == null) {
            throw new ApiException("Missing the required parameter 'questionnaireId' when calling putAcademyQuestionnaire(Async)");
        }

        // verify the required parameter 'academyQuestionnairePutRequest' is set
        if (academyQuestionnairePutRequest == null) {
            throw new ApiException("Missing the required parameter 'academyQuestionnairePutRequest' when calling putAcademyQuestionnaire(Async)");
        }

        return putAcademyQuestionnaireCall(questionnaireId, academyQuestionnairePutRequest, _callback);

    }

    /**
     * Create or update academy questionnaire
     * Create a new questionnaire or update an existing one
     * @param questionnaireId questionnaire&#39;s id (required)
     * @param academyQuestionnairePutRequest academy lesson to create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void putAcademyQuestionnaire(@javax.annotation.Nonnull String questionnaireId, @javax.annotation.Nonnull AcademyQuestionnairePutRequest academyQuestionnairePutRequest) throws ApiException {
        putAcademyQuestionnaireWithHttpInfo(questionnaireId, academyQuestionnairePutRequest);
    }

    /**
     * Create or update academy questionnaire
     * Create a new questionnaire or update an existing one
     * @param questionnaireId questionnaire&#39;s id (required)
     * @param academyQuestionnairePutRequest academy lesson to create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putAcademyQuestionnaireWithHttpInfo(@javax.annotation.Nonnull String questionnaireId, @javax.annotation.Nonnull AcademyQuestionnairePutRequest academyQuestionnairePutRequest) throws ApiException {
        okhttp3.Call localVarCall = putAcademyQuestionnaireValidateBeforeCall(questionnaireId, academyQuestionnairePutRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update academy questionnaire (asynchronously)
     * Create a new questionnaire or update an existing one
     * @param questionnaireId questionnaire&#39;s id (required)
     * @param academyQuestionnairePutRequest academy lesson to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create or update success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAcademyQuestionnaireAsync(@javax.annotation.Nonnull String questionnaireId, @javax.annotation.Nonnull AcademyQuestionnairePutRequest academyQuestionnairePutRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAcademyQuestionnaireValidateBeforeCall(questionnaireId, academyQuestionnairePutRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
