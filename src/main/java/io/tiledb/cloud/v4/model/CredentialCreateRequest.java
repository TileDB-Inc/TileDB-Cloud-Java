/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.v4.model.AccessCredentialRole;
import io.tiledb.cloud.v4.model.CloudProvider;
import io.tiledb.cloud.v4.model.Credential;
import io.tiledb.cloud.v4.model.Token;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * object metadata for a credential that will be created
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CredentialCreateRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  @javax.annotation.Nonnull
  private CloudProvider provider;

  public static final String SERIALIZED_NAME_PROVIDER_DEFAULT = "provider_default";
  @SerializedName(SERIALIZED_NAME_PROVIDER_DEFAULT)
  @javax.annotation.Nullable
  private Boolean providerDefault;

  public static final String SERIALIZED_NAME_ALLOWED_IN_TASKS = "allowed_in_tasks";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IN_TASKS)
  @javax.annotation.Nullable
  private Boolean allowedInTasks;

  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  @javax.annotation.Nullable
  private Credential credential;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private AccessCredentialRole role;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private Token token;

  public CredentialCreateRequest() {
  }

  public CredentialCreateRequest name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * credential name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CredentialCreateRequest provider(@javax.annotation.Nonnull CloudProvider provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nonnull
  public CloudProvider getProvider() {
    return provider;
  }

  public void setProvider(@javax.annotation.Nonnull CloudProvider provider) {
    this.provider = provider;
  }


  public CredentialCreateRequest providerDefault(@javax.annotation.Nullable Boolean providerDefault) {
    this.providerDefault = providerDefault;
    return this;
  }

  /**
   * True if this is the namespace&#39;s default credential to be used when connecting to the given cloud provider. There can be at most one default for each unique provider
   * @return providerDefault
   */
  @javax.annotation.Nullable
  public Boolean getProviderDefault() {
    return providerDefault;
  }

  public void setProviderDefault(@javax.annotation.Nullable Boolean providerDefault) {
    this.providerDefault = providerDefault;
  }


  public CredentialCreateRequest allowedInTasks(@javax.annotation.Nullable Boolean allowedInTasks) {
    this.allowedInTasks = allowedInTasks;
    return this;
  }

  /**
   * Is this credential allowed to be used in tasks
   * @return allowedInTasks
   */
  @javax.annotation.Nullable
  public Boolean getAllowedInTasks() {
    return allowedInTasks;
  }

  public void setAllowedInTasks(@javax.annotation.Nullable Boolean allowedInTasks) {
    this.allowedInTasks = allowedInTasks;
  }


  public CredentialCreateRequest credential(@javax.annotation.Nullable Credential credential) {
    this.credential = credential;
    return this;
  }

  /**
   * Get credential
   * @return credential
   */
  @javax.annotation.Nullable
  public Credential getCredential() {
    return credential;
  }

  public void setCredential(@javax.annotation.Nullable Credential credential) {
    this.credential = credential;
  }


  public CredentialCreateRequest role(@javax.annotation.Nullable AccessCredentialRole role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public AccessCredentialRole getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable AccessCredentialRole role) {
    this.role = role;
  }


  public CredentialCreateRequest token(@javax.annotation.Nullable Token token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public Token getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable Token token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialCreateRequest credentialCreateRequest = (CredentialCreateRequest) o;
    return Objects.equals(this.name, credentialCreateRequest.name) &&
        Objects.equals(this.provider, credentialCreateRequest.provider) &&
        Objects.equals(this.providerDefault, credentialCreateRequest.providerDefault) &&
        Objects.equals(this.allowedInTasks, credentialCreateRequest.allowedInTasks) &&
        Objects.equals(this.credential, credentialCreateRequest.credential) &&
        Objects.equals(this.role, credentialCreateRequest.role) &&
        Objects.equals(this.token, credentialCreateRequest.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, provider, providerDefault, allowedInTasks, credential, role, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialCreateRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    providerDefault: ").append(toIndentedString(providerDefault)).append("\n");
    sb.append("    allowedInTasks: ").append(toIndentedString(allowedInTasks)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("provider");
    openapiFields.add("provider_default");
    openapiFields.add("allowed_in_tasks");
    openapiFields.add("credential");
    openapiFields.add("role");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("provider");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CredentialCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CredentialCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CredentialCreateRequest is not found in the empty JSON string", CredentialCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CredentialCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CredentialCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CredentialCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `provider`
      CloudProvider.validateJsonElement(jsonObj.get("provider"));
      // validate the optional field `credential`
      if (jsonObj.get("credential") != null && !jsonObj.get("credential").isJsonNull()) {
        Credential.validateJsonElement(jsonObj.get("credential"));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        AccessCredentialRole.validateJsonElement(jsonObj.get("role"));
      }
      // validate the optional field `token`
      if (jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) {
        Token.validateJsonElement(jsonObj.get("token"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CredentialCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CredentialCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CredentialCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CredentialCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CredentialCreateRequest>() {
           @Override
           public void write(JsonWriter out, CredentialCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CredentialCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CredentialCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CredentialCreateRequest
   * @throws IOException if the JSON string is invalid with respect to CredentialCreateRequest
   */
  public static CredentialCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CredentialCreateRequest.class);
  }

  /**
   * Convert an instance of CredentialCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

