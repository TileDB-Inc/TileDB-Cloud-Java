/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.v4.model.TeamspaceType;
import io.tiledb.cloud.v4.model.TeamspaceUser;
import io.tiledb.cloud.v4.model.TeamspaceVisibility;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * The teamspace object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Teamspace {
  public static final String SERIALIZED_NAME_TEAMSPACE_ID = "teamspace_id";
  @SerializedName(SERIALIZED_NAME_TEAMSPACE_ID)
  @javax.annotation.Nonnull
  private String teamspaceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_SPACE_TYPE = "space_type";
  @SerializedName(SERIALIZED_NAME_SPACE_TYPE)
  @javax.annotation.Nonnull
  private TeamspaceType spaceType;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  @javax.annotation.Nullable
  private String icon;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  @javax.annotation.Nonnull
  private TeamspaceUser createdBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private TeamspaceUser self;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  @javax.annotation.Nonnull
  private TeamspaceVisibility visibility;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public Teamspace() {
  }

  public Teamspace teamspaceId(@javax.annotation.Nonnull String teamspaceId) {
    this.teamspaceId = teamspaceId;
    return this;
  }

  /**
   * The teamspace&#39;s ID
   * @return teamspaceId
   */
  @javax.annotation.Nonnull
  public String getTeamspaceId() {
    return teamspaceId;
  }

  public void setTeamspaceId(@javax.annotation.Nonnull String teamspaceId) {
    this.teamspaceId = teamspaceId;
  }


  public Teamspace name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The teamspace name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public Teamspace spaceType(@javax.annotation.Nonnull TeamspaceType spaceType) {
    this.spaceType = spaceType;
    return this;
  }

  /**
   * Get spaceType
   * @return spaceType
   */
  @javax.annotation.Nonnull
  public TeamspaceType getSpaceType() {
    return spaceType;
  }

  public void setSpaceType(@javax.annotation.Nonnull TeamspaceType spaceType) {
    this.spaceType = spaceType;
  }


  public Teamspace icon(@javax.annotation.Nullable String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * The teamspace icon as a UTF8-encoded Unicode symbol, e.g. ðŸš€
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(@javax.annotation.Nullable String icon) {
    this.icon = icon;
  }


  public Teamspace createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The datetime the teamspace was created (in UTC)
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Teamspace createdBy(@javax.annotation.Nonnull TeamspaceUser createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public TeamspaceUser getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(@javax.annotation.Nonnull TeamspaceUser createdBy) {
    this.createdBy = createdBy;
  }


  public Teamspace description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The teamspace description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public Teamspace self(@javax.annotation.Nullable TeamspaceUser self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public TeamspaceUser getSelf() {
    return self;
  }

  public void setSelf(@javax.annotation.Nullable TeamspaceUser self) {
    this.self = self;
  }


  public Teamspace visibility(@javax.annotation.Nonnull TeamspaceVisibility visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nonnull
  public TeamspaceVisibility getVisibility() {
    return visibility;
  }

  public void setVisibility(@javax.annotation.Nonnull TeamspaceVisibility visibility) {
    this.visibility = visibility;
  }


  public Teamspace updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The datetime the teamspace was updated (in UTC)
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Teamspace teamspace = (Teamspace) o;
    return Objects.equals(this.teamspaceId, teamspace.teamspaceId) &&
        Objects.equals(this.name, teamspace.name) &&
        Objects.equals(this.spaceType, teamspace.spaceType) &&
        Objects.equals(this.icon, teamspace.icon) &&
        Objects.equals(this.createdAt, teamspace.createdAt) &&
        Objects.equals(this.createdBy, teamspace.createdBy) &&
        Objects.equals(this.description, teamspace.description) &&
        Objects.equals(this.self, teamspace.self) &&
        Objects.equals(this.visibility, teamspace.visibility) &&
        Objects.equals(this.updatedAt, teamspace.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamspaceId, name, spaceType, icon, createdAt, createdBy, description, self, visibility, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Teamspace {\n");
    sb.append("    teamspaceId: ").append(toIndentedString(teamspaceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    spaceType: ").append(toIndentedString(spaceType)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("teamspace_id");
    openapiFields.add("name");
    openapiFields.add("space_type");
    openapiFields.add("icon");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("description");
    openapiFields.add("self");
    openapiFields.add("visibility");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("teamspace_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("space_type");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("created_by");
    openapiRequiredFields.add("visibility");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Teamspace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Teamspace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Teamspace is not found in the empty JSON string", Teamspace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Teamspace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Teamspace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Teamspace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("teamspace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamspace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamspace_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `space_type`
      TeamspaceType.validateJsonElement(jsonObj.get("space_type"));
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      // validate the required field `created_by`
      TeamspaceUser.validateJsonElement(jsonObj.get("created_by"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        TeamspaceUser.validateJsonElement(jsonObj.get("self"));
      }
      // validate the required field `visibility`
      TeamspaceVisibility.validateJsonElement(jsonObj.get("visibility"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Teamspace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Teamspace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Teamspace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Teamspace.class));

       return (TypeAdapter<T>) new TypeAdapter<Teamspace>() {
           @Override
           public void write(JsonWriter out, Teamspace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Teamspace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Teamspace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Teamspace
   * @throws IOException if the JSON string is invalid with respect to Teamspace
   */
  public static Teamspace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Teamspace.class);
  }

  /**
   * Convert an instance of Teamspace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

