/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * The academy lesson object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AcademyLesson {
  public static final String SERIALIZED_NAME_LESSON_ID = "lesson_id";
  @SerializedName(SERIALIZED_NAME_LESSON_ID)
  @javax.annotation.Nonnull
  private String lessonId;

  public static final String SERIALIZED_NAME_LESSON_VERSION = "lesson_version";
  @SerializedName(SERIALIZED_NAME_LESSON_VERSION)
  @javax.annotation.Nonnull
  private String lessonVersion;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  @javax.annotation.Nullable
  private Boolean completed;

  public static final String SERIALIZED_NAME_PINNED = "pinned";
  @SerializedName(SERIALIZED_NAME_PINNED)
  @javax.annotation.Nullable
  private Boolean pinned;

  public AcademyLesson() {
  }

  public AcademyLesson lessonId(@javax.annotation.Nonnull String lessonId) {
    this.lessonId = lessonId;
    return this;
  }

  /**
   * Unique ID of the lesson
   * @return lessonId
   */
  @javax.annotation.Nonnull
  public String getLessonId() {
    return lessonId;
  }

  public void setLessonId(@javax.annotation.Nonnull String lessonId) {
    this.lessonId = lessonId;
  }


  public AcademyLesson lessonVersion(@javax.annotation.Nonnull String lessonVersion) {
    this.lessonVersion = lessonVersion;
    return this;
  }

  /**
   * Version of the lesson
   * @return lessonVersion
   */
  @javax.annotation.Nonnull
  public String getLessonVersion() {
    return lessonVersion;
  }

  public void setLessonVersion(@javax.annotation.Nonnull String lessonVersion) {
    this.lessonVersion = lessonVersion;
  }


  public AcademyLesson completed(@javax.annotation.Nullable Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Indicates if lesson is completed
   * @return completed
   */
  @javax.annotation.Nullable
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(@javax.annotation.Nullable Boolean completed) {
    this.completed = completed;
  }


  public AcademyLesson pinned(@javax.annotation.Nullable Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Indicates if lesson is pinned
   * @return pinned
   */
  @javax.annotation.Nullable
  public Boolean getPinned() {
    return pinned;
  }

  public void setPinned(@javax.annotation.Nullable Boolean pinned) {
    this.pinned = pinned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AcademyLesson academyLesson = (AcademyLesson) o;
    return Objects.equals(this.lessonId, academyLesson.lessonId) &&
        Objects.equals(this.lessonVersion, academyLesson.lessonVersion) &&
        Objects.equals(this.completed, academyLesson.completed) &&
        Objects.equals(this.pinned, academyLesson.pinned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lessonId, lessonVersion, completed, pinned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AcademyLesson {\n");
    sb.append("    lessonId: ").append(toIndentedString(lessonId)).append("\n");
    sb.append("    lessonVersion: ").append(toIndentedString(lessonVersion)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lesson_id");
    openapiFields.add("lesson_version");
    openapiFields.add("completed");
    openapiFields.add("pinned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lesson_id");
    openapiRequiredFields.add("lesson_version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AcademyLesson
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AcademyLesson.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AcademyLesson is not found in the empty JSON string", AcademyLesson.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AcademyLesson.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AcademyLesson` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AcademyLesson.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lesson_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lesson_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lesson_id").toString()));
      }
      if (!jsonObj.get("lesson_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lesson_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lesson_version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AcademyLesson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AcademyLesson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AcademyLesson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AcademyLesson.class));

       return (TypeAdapter<T>) new TypeAdapter<AcademyLesson>() {
           @Override
           public void write(JsonWriter out, AcademyLesson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AcademyLesson read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AcademyLesson given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AcademyLesson
   * @throws IOException if the JSON string is invalid with respect to AcademyLesson
   */
  public static AcademyLesson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AcademyLesson.class);
  }

  /**
   * Convert an instance of AcademyLesson to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

