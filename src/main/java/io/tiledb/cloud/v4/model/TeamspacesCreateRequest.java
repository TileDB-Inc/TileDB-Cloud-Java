/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.v4.model.StorageSettingsForTeamspaceCreateRequest;
import io.tiledb.cloud.v4.model.TeamspaceDefaultCredential;
import io.tiledb.cloud.v4.model.TeamspaceVisibility;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * The request object for creating a teamspace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class TeamspacesCreateRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  @javax.annotation.Nullable
  private String icon;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  @javax.annotation.Nonnull
  private TeamspaceVisibility visibility;

  public static final String SERIALIZED_NAME_DEFAULT_CREDENTIAL = "default_credential";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CREDENTIAL)
  @javax.annotation.Nullable
  private TeamspaceDefaultCredential defaultCredential;

  public static final String SERIALIZED_NAME_DEFAULT_STORAGE_SETTING = "default_storage_setting";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STORAGE_SETTING)
  @javax.annotation.Nullable
  private StorageSettingsForTeamspaceCreateRequest defaultStorageSetting;

  public TeamspacesCreateRequest() {
  }

  public TeamspacesCreateRequest name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The teamspace name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public TeamspacesCreateRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The teamspace description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public TeamspacesCreateRequest icon(@javax.annotation.Nullable String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * The teamspace icon as a UTF8-encoded Unicode symbol, e.g. ðŸš€
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(@javax.annotation.Nullable String icon) {
    this.icon = icon;
  }


  public TeamspacesCreateRequest visibility(@javax.annotation.Nonnull TeamspaceVisibility visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nonnull
  public TeamspaceVisibility getVisibility() {
    return visibility;
  }

  public void setVisibility(@javax.annotation.Nonnull TeamspaceVisibility visibility) {
    this.visibility = visibility;
  }


  public TeamspacesCreateRequest defaultCredential(@javax.annotation.Nullable TeamspaceDefaultCredential defaultCredential) {
    this.defaultCredential = defaultCredential;
    return this;
  }

  /**
   * Get defaultCredential
   * @return defaultCredential
   */
  @javax.annotation.Nullable
  public TeamspaceDefaultCredential getDefaultCredential() {
    return defaultCredential;
  }

  public void setDefaultCredential(@javax.annotation.Nullable TeamspaceDefaultCredential defaultCredential) {
    this.defaultCredential = defaultCredential;
  }


  public TeamspacesCreateRequest defaultStorageSetting(@javax.annotation.Nullable StorageSettingsForTeamspaceCreateRequest defaultStorageSetting) {
    this.defaultStorageSetting = defaultStorageSetting;
    return this;
  }

  /**
   * Get defaultStorageSetting
   * @return defaultStorageSetting
   */
  @javax.annotation.Nullable
  public StorageSettingsForTeamspaceCreateRequest getDefaultStorageSetting() {
    return defaultStorageSetting;
  }

  public void setDefaultStorageSetting(@javax.annotation.Nullable StorageSettingsForTeamspaceCreateRequest defaultStorageSetting) {
    this.defaultStorageSetting = defaultStorageSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamspacesCreateRequest teamspacesCreateRequest = (TeamspacesCreateRequest) o;
    return Objects.equals(this.name, teamspacesCreateRequest.name) &&
        Objects.equals(this.description, teamspacesCreateRequest.description) &&
        Objects.equals(this.icon, teamspacesCreateRequest.icon) &&
        Objects.equals(this.visibility, teamspacesCreateRequest.visibility) &&
        Objects.equals(this.defaultCredential, teamspacesCreateRequest.defaultCredential) &&
        Objects.equals(this.defaultStorageSetting, teamspacesCreateRequest.defaultStorageSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, icon, visibility, defaultCredential, defaultStorageSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamspacesCreateRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    defaultCredential: ").append(toIndentedString(defaultCredential)).append("\n");
    sb.append("    defaultStorageSetting: ").append(toIndentedString(defaultStorageSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("icon");
    openapiFields.add("visibility");
    openapiFields.add("default_credential");
    openapiFields.add("default_storage_setting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("visibility");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamspacesCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamspacesCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamspacesCreateRequest is not found in the empty JSON string", TeamspacesCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamspacesCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamspacesCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamspacesCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      // validate the required field `visibility`
      TeamspaceVisibility.validateJsonElement(jsonObj.get("visibility"));
      // validate the optional field `default_credential`
      if (jsonObj.get("default_credential") != null && !jsonObj.get("default_credential").isJsonNull()) {
        TeamspaceDefaultCredential.validateJsonElement(jsonObj.get("default_credential"));
      }
      // validate the optional field `default_storage_setting`
      if (jsonObj.get("default_storage_setting") != null && !jsonObj.get("default_storage_setting").isJsonNull()) {
        StorageSettingsForTeamspaceCreateRequest.validateJsonElement(jsonObj.get("default_storage_setting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamspacesCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamspacesCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamspacesCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamspacesCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamspacesCreateRequest>() {
           @Override
           public void write(JsonWriter out, TeamspacesCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamspacesCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamspacesCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamspacesCreateRequest
   * @throws IOException if the JSON string is invalid with respect to TeamspacesCreateRequest
   */
  public static TeamspacesCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamspacesCreateRequest.class);
  }

  /**
   * Convert an instance of TeamspacesCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

