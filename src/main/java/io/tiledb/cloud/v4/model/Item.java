/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * List of values that Item can take.
 */
@JsonAdapter(Item.Adapter.class)
public enum Item {
  
  THEME_SELECTION("theme_selection"),
  
  PROFILE_INFO("profile_info"),
  
  CLAIM_CREDITS("claim_credits"),
  
  CLOUD_STORAGE("cloud_storage"),
  
  ROOT_PATH("root_path"),
  
  INTRO("intro"),
  
  BASIC_TOUR("basic_tour"),
  
  SKIP_USER_ONBOARDING("skip_user_onboarding"),
  
  ADD_ASSET("add_asset"),
  
  LAUNCH_NOTEBOOK("launch_notebook"),
  
  INDICATE_FINISH_USER_ONBOARDING("indicate_finish_user_onboarding"),
  
  ORGANIZATION_BASIC_TOUR("organization_basic_tour"),
  
  INDICATE_FINISH_ORG_ONBOARDING("indicate_finish_org_onboarding"),
  
  SKIP_ORGANIZATION_ONBOARDING("skip_organization_onboarding");

  private String value;

  Item(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Item fromValue(String value) {
    for (Item b : Item.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Item> {
    @Override
    public void write(final JsonWriter jsonWriter, final Item enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Item read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Item.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Item.fromValue(value);
  }
}

