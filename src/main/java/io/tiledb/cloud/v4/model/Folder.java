/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.v4.model.WorkspaceUser;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * Folder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Folder {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspace_id";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  @javax.annotation.Nonnull
  private String workspaceId;

  public static final String SERIALIZED_NAME_TEAMSPACE_ID = "teamspace_id";
  @SerializedName(SERIALIZED_NAME_TEAMSPACE_ID)
  @javax.annotation.Nonnull
  private String teamspaceId;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  @javax.annotation.Nullable
  private String groupId;

  public static final String SERIALIZED_NAME_ASSET_ID = "asset_id";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  @javax.annotation.Nonnull
  private String assetId;

  public static final String SERIALIZED_NAME_PARENT_FOLDER_ID = "parent_folder_id";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER_ID)
  @javax.annotation.Nullable
  private String parentFolderId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  @javax.annotation.Nonnull
  private WorkspaceUser createdBy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public Folder() {
  }

  public Folder id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The folder&#39;s ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Folder workspaceId(@javax.annotation.Nonnull String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * The workspace&#39;s ID
   * @return workspaceId
   */
  @javax.annotation.Nonnull
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(@javax.annotation.Nonnull String workspaceId) {
    this.workspaceId = workspaceId;
  }


  public Folder teamspaceId(@javax.annotation.Nonnull String teamspaceId) {
    this.teamspaceId = teamspaceId;
    return this;
  }

  /**
   * The teamspace&#39;s ID
   * @return teamspaceId
   */
  @javax.annotation.Nonnull
  public String getTeamspaceId() {
    return teamspaceId;
  }

  public void setTeamspaceId(@javax.annotation.Nonnull String teamspaceId) {
    this.teamspaceId = teamspaceId;
  }


  public Folder groupId(@javax.annotation.Nullable String groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * The group&#39;s ID
   * @return groupId
   */
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(@javax.annotation.Nullable String groupId) {
    this.groupId = groupId;
  }


  public Folder assetId(@javax.annotation.Nonnull String assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * The asset&#39;s ID
   * @return assetId
   */
  @javax.annotation.Nonnull
  public String getAssetId() {
    return assetId;
  }

  public void setAssetId(@javax.annotation.Nonnull String assetId) {
    this.assetId = assetId;
  }


  public Folder parentFolderId(@javax.annotation.Nullable String parentFolderId) {
    this.parentFolderId = parentFolderId;
    return this;
  }

  /**
   * The folder&#39;s ID
   * @return parentFolderId
   */
  @javax.annotation.Nullable
  public String getParentFolderId() {
    return parentFolderId;
  }

  public void setParentFolderId(@javax.annotation.Nullable String parentFolderId) {
    this.parentFolderId = parentFolderId;
  }


  public Folder name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the folder.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public Folder createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime asset was created in UTC
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Folder updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime asset was updated in UTC
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Folder createdBy(@javax.annotation.Nonnull WorkspaceUser createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public WorkspaceUser getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(@javax.annotation.Nonnull WorkspaceUser createdBy) {
    this.createdBy = createdBy;
  }


  public Folder description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the folder.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Folder folder = (Folder) o;
    return Objects.equals(this.id, folder.id) &&
        Objects.equals(this.workspaceId, folder.workspaceId) &&
        Objects.equals(this.teamspaceId, folder.teamspaceId) &&
        Objects.equals(this.groupId, folder.groupId) &&
        Objects.equals(this.assetId, folder.assetId) &&
        Objects.equals(this.parentFolderId, folder.parentFolderId) &&
        Objects.equals(this.name, folder.name) &&
        Objects.equals(this.createdAt, folder.createdAt) &&
        Objects.equals(this.updatedAt, folder.updatedAt) &&
        Objects.equals(this.createdBy, folder.createdBy) &&
        Objects.equals(this.description, folder.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, workspaceId, teamspaceId, groupId, assetId, parentFolderId, name, createdAt, updatedAt, createdBy, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Folder {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    teamspaceId: ").append(toIndentedString(teamspaceId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("workspace_id");
    openapiFields.add("teamspace_id");
    openapiFields.add("group_id");
    openapiFields.add("asset_id");
    openapiFields.add("parent_folder_id");
    openapiFields.add("name");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("created_by");
    openapiFields.add("description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("workspace_id");
    openapiRequiredFields.add("teamspace_id");
    openapiRequiredFields.add("asset_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("created_by");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Folder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Folder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Folder is not found in the empty JSON string", Folder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Folder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Folder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Folder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("workspace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_id").toString()));
      }
      if (!jsonObj.get("teamspace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamspace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamspace_id").toString()));
      }
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
      if (!jsonObj.get("asset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id").toString()));
      }
      if ((jsonObj.get("parent_folder_id") != null && !jsonObj.get("parent_folder_id").isJsonNull()) && !jsonObj.get("parent_folder_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_folder_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_folder_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `created_by`
      WorkspaceUser.validateJsonElement(jsonObj.get("created_by"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Folder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Folder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Folder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Folder.class));

       return (TypeAdapter<T>) new TypeAdapter<Folder>() {
           @Override
           public void write(JsonWriter out, Folder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Folder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Folder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Folder
   * @throws IOException if the JSON string is invalid with respect to Folder
   */
  public static Folder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Folder.class);
  }

  /**
   * Convert an instance of Folder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

