/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.v4.model.AssetBackingType;
import io.tiledb.cloud.v4.model.AssetMemberType;
import io.tiledb.cloud.v4.model.AssetMetadata;
import io.tiledb.cloud.v4.model.AssetType;
import io.tiledb.cloud.v4.model.WorkspaceUser;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * Asset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class Asset {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspace_id";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  @javax.annotation.Nonnull
  private String workspaceId;

  public static final String SERIALIZED_NAME_TEAMSPACE_ID = "teamspace_id";
  @SerializedName(SERIALIZED_NAME_TEAMSPACE_ID)
  @javax.annotation.Nonnull
  private String teamspaceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_MEMBER_TYPE = "member_type";
  @SerializedName(SERIALIZED_NAME_MEMBER_TYPE)
  @javax.annotation.Nullable
  private AssetMemberType memberType;

  public static final String SERIALIZED_NAME_MIME = "mime";
  @SerializedName(SERIALIZED_NAME_MIME)
  @javax.annotation.Nullable
  private String mime;

  public static final String SERIALIZED_NAME_BACKING_TYPE = "backing_type";
  @SerializedName(SERIALIZED_NAME_BACKING_TYPE)
  @javax.annotation.Nonnull
  private AssetBackingType backingType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private AssetType type;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nonnull
  private String path;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  @javax.annotation.Nonnull
  private WorkspaceUser createdBy;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private List<AssetMetadata> metadata = new ArrayList<>();

  public Asset() {
  }

  public Asset id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The asset&#39;s ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Asset workspaceId(@javax.annotation.Nonnull String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * The workspace&#39;s ID
   * @return workspaceId
   */
  @javax.annotation.Nonnull
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(@javax.annotation.Nonnull String workspaceId) {
    this.workspaceId = workspaceId;
  }


  public Asset teamspaceId(@javax.annotation.Nonnull String teamspaceId) {
    this.teamspaceId = teamspaceId;
    return this;
  }

  /**
   * The teamspace&#39;s ID
   * @return teamspaceId
   */
  @javax.annotation.Nonnull
  public String getTeamspaceId() {
    return teamspaceId;
  }

  public void setTeamspaceId(@javax.annotation.Nonnull String teamspaceId) {
    this.teamspaceId = teamspaceId;
  }


  public Asset name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the asset.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public Asset description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the asset.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public Asset memberType(@javax.annotation.Nullable AssetMemberType memberType) {
    this.memberType = memberType;
    return this;
  }

  /**
   * Get memberType
   * @return memberType
   */
  @javax.annotation.Nullable
  public AssetMemberType getMemberType() {
    return memberType;
  }

  public void setMemberType(@javax.annotation.Nullable AssetMemberType memberType) {
    this.memberType = memberType;
  }


  public Asset mime(@javax.annotation.Nullable String mime) {
    this.mime = mime;
    return this;
  }

  /**
   * The MIME type of the asset.
   * @return mime
   */
  @javax.annotation.Nullable
  public String getMime() {
    return mime;
  }

  public void setMime(@javax.annotation.Nullable String mime) {
    this.mime = mime;
  }


  public Asset backingType(@javax.annotation.Nonnull AssetBackingType backingType) {
    this.backingType = backingType;
    return this;
  }

  /**
   * Get backingType
   * @return backingType
   */
  @javax.annotation.Nonnull
  public AssetBackingType getBackingType() {
    return backingType;
  }

  public void setBackingType(@javax.annotation.Nonnull AssetBackingType backingType) {
    this.backingType = backingType;
  }


  public Asset type(@javax.annotation.Nonnull AssetType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public AssetType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull AssetType type) {
    this.type = type;
  }


  public Asset path(@javax.annotation.Nonnull String path) {
    this.path = path;
    return this;
  }

  /**
   * The path of the asset.
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nonnull String path) {
    this.path = path;
  }


  public Asset createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime asset was created in UTC
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Asset updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime asset was updated in UTC
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Asset createdBy(@javax.annotation.Nonnull WorkspaceUser createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public WorkspaceUser getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(@javax.annotation.Nonnull WorkspaceUser createdBy) {
    this.createdBy = createdBy;
  }


  public Asset metadata(@javax.annotation.Nullable List<AssetMetadata> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Asset addMetadataItem(AssetMetadata metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<AssetMetadata> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable List<AssetMetadata> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asset asset = (Asset) o;
    return Objects.equals(this.id, asset.id) &&
        Objects.equals(this.workspaceId, asset.workspaceId) &&
        Objects.equals(this.teamspaceId, asset.teamspaceId) &&
        Objects.equals(this.name, asset.name) &&
        Objects.equals(this.description, asset.description) &&
        Objects.equals(this.memberType, asset.memberType) &&
        Objects.equals(this.mime, asset.mime) &&
        Objects.equals(this.backingType, asset.backingType) &&
        Objects.equals(this.type, asset.type) &&
        Objects.equals(this.path, asset.path) &&
        Objects.equals(this.createdAt, asset.createdAt) &&
        Objects.equals(this.updatedAt, asset.updatedAt) &&
        Objects.equals(this.createdBy, asset.createdBy) &&
        Objects.equals(this.metadata, asset.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, workspaceId, teamspaceId, name, description, memberType, mime, backingType, type, path, createdAt, updatedAt, createdBy, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asset {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    teamspaceId: ").append(toIndentedString(teamspaceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    memberType: ").append(toIndentedString(memberType)).append("\n");
    sb.append("    mime: ").append(toIndentedString(mime)).append("\n");
    sb.append("    backingType: ").append(toIndentedString(backingType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("workspace_id");
    openapiFields.add("teamspace_id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("member_type");
    openapiFields.add("mime");
    openapiFields.add("backing_type");
    openapiFields.add("type");
    openapiFields.add("path");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("created_by");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("workspace_id");
    openapiRequiredFields.add("teamspace_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("backing_type");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("created_by");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Asset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Asset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Asset is not found in the empty JSON string", Asset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Asset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Asset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Asset.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("workspace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_id").toString()));
      }
      if (!jsonObj.get("teamspace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamspace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamspace_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `member_type`
      if (jsonObj.get("member_type") != null && !jsonObj.get("member_type").isJsonNull()) {
        AssetMemberType.validateJsonElement(jsonObj.get("member_type"));
      }
      if ((jsonObj.get("mime") != null && !jsonObj.get("mime").isJsonNull()) && !jsonObj.get("mime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime").toString()));
      }
      // validate the required field `backing_type`
      AssetBackingType.validateJsonElement(jsonObj.get("backing_type"));
      // validate the required field `type`
      AssetType.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the required field `created_by`
      WorkspaceUser.validateJsonElement(jsonObj.get("created_by"));
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            AssetMetadata.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Asset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Asset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Asset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Asset.class));

       return (TypeAdapter<T>) new TypeAdapter<Asset>() {
           @Override
           public void write(JsonWriter out, Asset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Asset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Asset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Asset
   * @throws IOException if the JSON string is invalid with respect to Asset
   */
  public static Asset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Asset.class);
  }

  /**
   * Convert an instance of Asset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

