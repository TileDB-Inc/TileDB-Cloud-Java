/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.v4.model.TileDBVersion;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * Model representing REST capabilities
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class RestCapabilities {
  public static final String SERIALIZED_NAME_DEPLOYED_TILE_D_B_VERSION = "deployedTileDBVersion";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_TILE_D_B_VERSION)
  @javax.annotation.Nonnull
  private TileDBVersion deployedTileDBVersion;

  public static final String SERIALIZED_NAME_MINIMUM_SUPPORTED_TILE_D_B_CLIENT_VERSION = "minimumSupportedTileDBClientVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SUPPORTED_TILE_D_B_CLIENT_VERSION)
  @javax.annotation.Nonnull
  private TileDBVersion minimumSupportedTileDBClientVersion;

  public RestCapabilities() {
  }

  public RestCapabilities deployedTileDBVersion(@javax.annotation.Nonnull TileDBVersion deployedTileDBVersion) {
    this.deployedTileDBVersion = deployedTileDBVersion;
    return this;
  }

  /**
   * Get deployedTileDBVersion
   * @return deployedTileDBVersion
   */
  @javax.annotation.Nonnull
  public TileDBVersion getDeployedTileDBVersion() {
    return deployedTileDBVersion;
  }

  public void setDeployedTileDBVersion(@javax.annotation.Nonnull TileDBVersion deployedTileDBVersion) {
    this.deployedTileDBVersion = deployedTileDBVersion;
  }


  public RestCapabilities minimumSupportedTileDBClientVersion(@javax.annotation.Nonnull TileDBVersion minimumSupportedTileDBClientVersion) {
    this.minimumSupportedTileDBClientVersion = minimumSupportedTileDBClientVersion;
    return this;
  }

  /**
   * Get minimumSupportedTileDBClientVersion
   * @return minimumSupportedTileDBClientVersion
   */
  @javax.annotation.Nonnull
  public TileDBVersion getMinimumSupportedTileDBClientVersion() {
    return minimumSupportedTileDBClientVersion;
  }

  public void setMinimumSupportedTileDBClientVersion(@javax.annotation.Nonnull TileDBVersion minimumSupportedTileDBClientVersion) {
    this.minimumSupportedTileDBClientVersion = minimumSupportedTileDBClientVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestCapabilities restCapabilities = (RestCapabilities) o;
    return Objects.equals(this.deployedTileDBVersion, restCapabilities.deployedTileDBVersion) &&
        Objects.equals(this.minimumSupportedTileDBClientVersion, restCapabilities.minimumSupportedTileDBClientVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deployedTileDBVersion, minimumSupportedTileDBClientVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestCapabilities {\n");
    sb.append("    deployedTileDBVersion: ").append(toIndentedString(deployedTileDBVersion)).append("\n");
    sb.append("    minimumSupportedTileDBClientVersion: ").append(toIndentedString(minimumSupportedTileDBClientVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deployedTileDBVersion");
    openapiFields.add("minimumSupportedTileDBClientVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deployedTileDBVersion");
    openapiRequiredFields.add("minimumSupportedTileDBClientVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestCapabilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestCapabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestCapabilities is not found in the empty JSON string", RestCapabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestCapabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestCapabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RestCapabilities.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `deployedTileDBVersion`
      TileDBVersion.validateJsonElement(jsonObj.get("deployedTileDBVersion"));
      // validate the required field `minimumSupportedTileDBClientVersion`
      TileDBVersion.validateJsonElement(jsonObj.get("minimumSupportedTileDBClientVersion"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestCapabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestCapabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestCapabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestCapabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<RestCapabilities>() {
           @Override
           public void write(JsonWriter out, RestCapabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestCapabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestCapabilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestCapabilities
   * @throws IOException if the JSON string is invalid with respect to RestCapabilities
   */
  public static RestCapabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestCapabilities.class);
  }

  /**
   * Convert an instance of RestCapabilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

