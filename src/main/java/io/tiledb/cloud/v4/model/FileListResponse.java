/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.v4.model.CommonPrefix;
import io.tiledb.cloud.v4.model.ModelObject;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * The result of a list files operation. Compatible with S3&#39;s ListObjectResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class FileListResponse {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PREFIX = "Prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  @javax.annotation.Nullable
  private String prefix;

  public static final String SERIALIZED_NAME_DELIMITER = "Delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  @javax.annotation.Nullable
  private String delimiter;

  public static final String SERIALIZED_NAME_MAX_KEYS = "MaxKeys";
  @SerializedName(SERIALIZED_NAME_MAX_KEYS)
  @javax.annotation.Nullable
  private Integer maxKeys;

  public static final String SERIALIZED_NAME_CONTINUATION_TOKEN = "ContinuationToken";
  @SerializedName(SERIALIZED_NAME_CONTINUATION_TOKEN)
  @javax.annotation.Nullable
  private String continuationToken;

  public static final String SERIALIZED_NAME_NEXT_CONTINUATION_TOKEN = "NextContinuationToken";
  @SerializedName(SERIALIZED_NAME_NEXT_CONTINUATION_TOKEN)
  @javax.annotation.Nullable
  private String nextContinuationToken;

  public static final String SERIALIZED_NAME_IS_TRUNCATED = "IsTruncated";
  @SerializedName(SERIALIZED_NAME_IS_TRUNCATED)
  @javax.annotation.Nullable
  private Boolean isTruncated;

  public static final String SERIALIZED_NAME_COMMON_PREFIXES = "CommonPrefixes";
  @SerializedName(SERIALIZED_NAME_COMMON_PREFIXES)
  @javax.annotation.Nullable
  private List<CommonPrefix> commonPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECTS = "Objects";
  @SerializedName(SERIALIZED_NAME_OBJECTS)
  @javax.annotation.Nullable
  private List<ModelObject> objects = new ArrayList<>();

  public FileListResponse() {
  }

  public FileListResponse name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the bucket (teamspace) with the objects
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public FileListResponse prefix(@javax.annotation.Nullable String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * The prefix under which objects are listed
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(@javax.annotation.Nullable String prefix) {
    this.prefix = prefix;
  }


  public FileListResponse delimiter(@javax.annotation.Nullable String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * The string that delimits the path segments. Only forward slash is supported
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(@javax.annotation.Nullable String delimiter) {
    this.delimiter = delimiter;
  }


  public FileListResponse maxKeys(@javax.annotation.Nullable Integer maxKeys) {
    this.maxKeys = maxKeys;
    return this;
  }

  /**
   * The maximum amount of objects to return
   * @return maxKeys
   */
  @javax.annotation.Nullable
  public Integer getMaxKeys() {
    return maxKeys;
  }

  public void setMaxKeys(@javax.annotation.Nullable Integer maxKeys) {
    this.maxKeys = maxKeys;
  }


  public FileListResponse continuationToken(@javax.annotation.Nullable String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  /**
   * The continuation token that was passed to the operation
   * @return continuationToken
   */
  @javax.annotation.Nullable
  public String getContinuationToken() {
    return continuationToken;
  }

  public void setContinuationToken(@javax.annotation.Nullable String continuationToken) {
    this.continuationToken = continuationToken;
  }


  public FileListResponse nextContinuationToken(@javax.annotation.Nullable String nextContinuationToken) {
    this.nextContinuationToken = nextContinuationToken;
    return this;
  }

  /**
   * The continuation token to pass to list the next items
   * @return nextContinuationToken
   */
  @javax.annotation.Nullable
  public String getNextContinuationToken() {
    return nextContinuationToken;
  }

  public void setNextContinuationToken(@javax.annotation.Nullable String nextContinuationToken) {
    this.nextContinuationToken = nextContinuationToken;
  }


  public FileListResponse isTruncated(@javax.annotation.Nullable Boolean isTruncated) {
    this.isTruncated = isTruncated;
    return this;
  }

  /**
   * Whether there are no more files to list
   * @return isTruncated
   */
  @javax.annotation.Nullable
  public Boolean getIsTruncated() {
    return isTruncated;
  }

  public void setIsTruncated(@javax.annotation.Nullable Boolean isTruncated) {
    this.isTruncated = isTruncated;
  }


  public FileListResponse commonPrefixes(@javax.annotation.Nullable List<CommonPrefix> commonPrefixes) {
    this.commonPrefixes = commonPrefixes;
    return this;
  }

  public FileListResponse addCommonPrefixesItem(CommonPrefix commonPrefixesItem) {
    if (this.commonPrefixes == null) {
      this.commonPrefixes = new ArrayList<>();
    }
    this.commonPrefixes.add(commonPrefixesItem);
    return this;
  }

  /**
   * The common prefixes (folders) contained under prefix.
   * @return commonPrefixes
   */
  @javax.annotation.Nullable
  public List<CommonPrefix> getCommonPrefixes() {
    return commonPrefixes;
  }

  public void setCommonPrefixes(@javax.annotation.Nullable List<CommonPrefix> commonPrefixes) {
    this.commonPrefixes = commonPrefixes;
  }


  public FileListResponse objects(@javax.annotation.Nullable List<ModelObject> objects) {
    this.objects = objects;
    return this;
  }

  public FileListResponse addObjectsItem(ModelObject objectsItem) {
    if (this.objects == null) {
      this.objects = new ArrayList<>();
    }
    this.objects.add(objectsItem);
    return this;
  }

  /**
   * The objects (files) contained under prefix.
   * @return objects
   */
  @javax.annotation.Nullable
  public List<ModelObject> getObjects() {
    return objects;
  }

  public void setObjects(@javax.annotation.Nullable List<ModelObject> objects) {
    this.objects = objects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileListResponse fileListResponse = (FileListResponse) o;
    return Objects.equals(this.name, fileListResponse.name) &&
        Objects.equals(this.prefix, fileListResponse.prefix) &&
        Objects.equals(this.delimiter, fileListResponse.delimiter) &&
        Objects.equals(this.maxKeys, fileListResponse.maxKeys) &&
        Objects.equals(this.continuationToken, fileListResponse.continuationToken) &&
        Objects.equals(this.nextContinuationToken, fileListResponse.nextContinuationToken) &&
        Objects.equals(this.isTruncated, fileListResponse.isTruncated) &&
        Objects.equals(this.commonPrefixes, fileListResponse.commonPrefixes) &&
        Objects.equals(this.objects, fileListResponse.objects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, prefix, delimiter, maxKeys, continuationToken, nextContinuationToken, isTruncated, commonPrefixes, objects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileListResponse {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    maxKeys: ").append(toIndentedString(maxKeys)).append("\n");
    sb.append("    continuationToken: ").append(toIndentedString(continuationToken)).append("\n");
    sb.append("    nextContinuationToken: ").append(toIndentedString(nextContinuationToken)).append("\n");
    sb.append("    isTruncated: ").append(toIndentedString(isTruncated)).append("\n");
    sb.append("    commonPrefixes: ").append(toIndentedString(commonPrefixes)).append("\n");
    sb.append("    objects: ").append(toIndentedString(objects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Prefix");
    openapiFields.add("Delimiter");
    openapiFields.add("MaxKeys");
    openapiFields.add("ContinuationToken");
    openapiFields.add("NextContinuationToken");
    openapiFields.add("IsTruncated");
    openapiFields.add("CommonPrefixes");
    openapiFields.add("Objects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileListResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileListResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileListResponse is not found in the empty JSON string", FileListResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileListResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileListResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Prefix") != null && !jsonObj.get("Prefix").isJsonNull()) && !jsonObj.get("Prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Prefix").toString()));
      }
      if ((jsonObj.get("Delimiter") != null && !jsonObj.get("Delimiter").isJsonNull()) && !jsonObj.get("Delimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Delimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Delimiter").toString()));
      }
      if ((jsonObj.get("ContinuationToken") != null && !jsonObj.get("ContinuationToken").isJsonNull()) && !jsonObj.get("ContinuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContinuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContinuationToken").toString()));
      }
      if ((jsonObj.get("NextContinuationToken") != null && !jsonObj.get("NextContinuationToken").isJsonNull()) && !jsonObj.get("NextContinuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextContinuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextContinuationToken").toString()));
      }
      if (jsonObj.get("CommonPrefixes") != null && !jsonObj.get("CommonPrefixes").isJsonNull()) {
        JsonArray jsonArraycommonPrefixes = jsonObj.getAsJsonArray("CommonPrefixes");
        if (jsonArraycommonPrefixes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CommonPrefixes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CommonPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("CommonPrefixes").toString()));
          }

          // validate the optional field `CommonPrefixes` (array)
          for (int i = 0; i < jsonArraycommonPrefixes.size(); i++) {
            CommonPrefix.validateJsonElement(jsonArraycommonPrefixes.get(i));
          };
        }
      }
      if (jsonObj.get("Objects") != null && !jsonObj.get("Objects").isJsonNull()) {
        JsonArray jsonArrayobjects = jsonObj.getAsJsonArray("Objects");
        if (jsonArrayobjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Objects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Objects` to be an array in the JSON string but got `%s`", jsonObj.get("Objects").toString()));
          }

          // validate the optional field `Objects` (array)
          for (int i = 0; i < jsonArrayobjects.size(); i++) {
            ModelObject.validateJsonElement(jsonArrayobjects.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileListResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileListResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileListResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileListResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FileListResponse>() {
           @Override
           public void write(JsonWriter out, FileListResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileListResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileListResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileListResponse
   * @throws IOException if the JSON string is invalid with respect to FileListResponse
   */
  public static FileListResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileListResponse.class);
  }

  /**
   * Convert an instance of FileListResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

