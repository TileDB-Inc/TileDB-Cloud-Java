/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.v4.JSON;

/**
 * The path at which a given asset will be stored, and the credentials used to access that asset. Storage setting contains a pair of storage path  and storage credentials 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class StorageSettingUpdateRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "is_default";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  @javax.annotation.Nullable
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_CREDENTIALS_NAME = "credentials_name";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_NAME)
  @javax.annotation.Nullable
  private String credentialsName;

  public StorageSettingUpdateRequest() {
  }

  public StorageSettingUpdateRequest name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * storage location name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public StorageSettingUpdateRequest isDefault(@javax.annotation.Nullable Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * True if this is the workspace&#39;s or teamspace&#39;s default storage setting
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(@javax.annotation.Nullable Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public StorageSettingUpdateRequest path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * The path to store an asset.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public StorageSettingUpdateRequest credentialsName(@javax.annotation.Nullable String credentialsName) {
    this.credentialsName = credentialsName;
    return this;
  }

  /**
   * The name of the credentials used to access this storage path
   * @return credentialsName
   */
  @javax.annotation.Nullable
  public String getCredentialsName() {
    return credentialsName;
  }

  public void setCredentialsName(@javax.annotation.Nullable String credentialsName) {
    this.credentialsName = credentialsName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageSettingUpdateRequest storageSettingUpdateRequest = (StorageSettingUpdateRequest) o;
    return Objects.equals(this.name, storageSettingUpdateRequest.name) &&
        Objects.equals(this.isDefault, storageSettingUpdateRequest.isDefault) &&
        Objects.equals(this.path, storageSettingUpdateRequest.path) &&
        Objects.equals(this.credentialsName, storageSettingUpdateRequest.credentialsName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, isDefault, path, credentialsName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageSettingUpdateRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    credentialsName: ").append(toIndentedString(credentialsName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("is_default");
    openapiFields.add("path");
    openapiFields.add("credentials_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageSettingUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageSettingUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageSettingUpdateRequest is not found in the empty JSON string", StorageSettingUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageSettingUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageSettingUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("credentials_name") != null && !jsonObj.get("credentials_name").isJsonNull()) && !jsonObj.get("credentials_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentials_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentials_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageSettingUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageSettingUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageSettingUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageSettingUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageSettingUpdateRequest>() {
           @Override
           public void write(JsonWriter out, StorageSettingUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageSettingUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageSettingUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageSettingUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to StorageSettingUpdateRequest
   */
  public static StorageSettingUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageSettingUpdateRequest.class);
  }

  /**
   * Convert an instance of StorageSettingUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

