/*
 * Tiledb Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.v2.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import io.tiledb.cloud.rest_api.v2.JSON;

/**
 * Array directory (for reads)
 */
@ApiModel(description = "Array directory (for reads)")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-02T18:54:48.746612+03:00[Europe/Athens]")
public class GenericTileOffsets {
  public static final String SERIALIZED_NAME_RTREE = "rtree";
  @SerializedName(SERIALIZED_NAME_RTREE)
  private BigDecimal rtree;

  public static final String SERIALIZED_NAME_TILE_OFFSETS = "tileOffsets";
  @SerializedName(SERIALIZED_NAME_TILE_OFFSETS)
  private List<BigDecimal> tileOffsets = null;

  public static final String SERIALIZED_NAME_TILE_VAR_OFFSETS = "tileVarOffsets";
  @SerializedName(SERIALIZED_NAME_TILE_VAR_OFFSETS)
  private List<BigDecimal> tileVarOffsets = null;

  public static final String SERIALIZED_NAME_TILE_VAR_SIZES = "tileVarSizes";
  @SerializedName(SERIALIZED_NAME_TILE_VAR_SIZES)
  private List<BigDecimal> tileVarSizes = null;

  public static final String SERIALIZED_NAME_TILE_VALIDITY_OFFSETS = "tileValidityOffsets";
  @SerializedName(SERIALIZED_NAME_TILE_VALIDITY_OFFSETS)
  private List<BigDecimal> tileValidityOffsets = null;

  public static final String SERIALIZED_NAME_TILE_MIN_OFFSETS = "tileMinOffsets";
  @SerializedName(SERIALIZED_NAME_TILE_MIN_OFFSETS)
  private List<BigDecimal> tileMinOffsets = null;

  public static final String SERIALIZED_NAME_TILE_MAX_OFFSETS = "tileMaxOffsets";
  @SerializedName(SERIALIZED_NAME_TILE_MAX_OFFSETS)
  private List<BigDecimal> tileMaxOffsets = null;

  public static final String SERIALIZED_NAME_TILE_SUM_OFFSETS = "tileSumOffsets";
  @SerializedName(SERIALIZED_NAME_TILE_SUM_OFFSETS)
  private List<BigDecimal> tileSumOffsets = null;

  public static final String SERIALIZED_NAME_TILE_NULL_COUNT_OFFSETS = "tileNullCountOffsets";
  @SerializedName(SERIALIZED_NAME_TILE_NULL_COUNT_OFFSETS)
  private List<BigDecimal> tileNullCountOffsets = null;

  public static final String SERIALIZED_NAME_FRAGMENT_MIN_MAX_SUM_NULL_COUNT_OFFSET = "fragmentMinMaxSumNullCountOffset";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_MIN_MAX_SUM_NULL_COUNT_OFFSET)
  private BigDecimal fragmentMinMaxSumNullCountOffset;

  public static final String SERIALIZED_NAME_PROCESSED_CONDITIONS_OFFSETS = "processedConditionsOffsets";
  @SerializedName(SERIALIZED_NAME_PROCESSED_CONDITIONS_OFFSETS)
  private BigDecimal processedConditionsOffsets;

  public GenericTileOffsets() { 
  }

  public GenericTileOffsets rtree(BigDecimal rtree) {
    
    this.rtree = rtree;
    return this;
  }

   /**
   * RTree serialized as a blob
   * @return rtree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "RTree serialized as a blob")

  public BigDecimal getRtree() {
    return rtree;
  }


  public void setRtree(BigDecimal rtree) {
    this.rtree = rtree;
  }


  public GenericTileOffsets tileOffsets(List<BigDecimal> tileOffsets) {
    
    this.tileOffsets = tileOffsets;
    return this;
  }

  public GenericTileOffsets addTileOffsetsItem(BigDecimal tileOffsetsItem) {
    if (this.tileOffsets == null) {
      this.tileOffsets = new ArrayList<>();
    }
    this.tileOffsets.add(tileOffsetsItem);
    return this;
  }

   /**
   * tile offsets
   * @return tileOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tile offsets")

  public List<BigDecimal> getTileOffsets() {
    return tileOffsets;
  }


  public void setTileOffsets(List<BigDecimal> tileOffsets) {
    this.tileOffsets = tileOffsets;
  }


  public GenericTileOffsets tileVarOffsets(List<BigDecimal> tileVarOffsets) {
    
    this.tileVarOffsets = tileVarOffsets;
    return this;
  }

  public GenericTileOffsets addTileVarOffsetsItem(BigDecimal tileVarOffsetsItem) {
    if (this.tileVarOffsets == null) {
      this.tileVarOffsets = new ArrayList<>();
    }
    this.tileVarOffsets.add(tileVarOffsetsItem);
    return this;
  }

   /**
   * variable tile offsets
   * @return tileVarOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "variable tile offsets")

  public List<BigDecimal> getTileVarOffsets() {
    return tileVarOffsets;
  }


  public void setTileVarOffsets(List<BigDecimal> tileVarOffsets) {
    this.tileVarOffsets = tileVarOffsets;
  }


  public GenericTileOffsets tileVarSizes(List<BigDecimal> tileVarSizes) {
    
    this.tileVarSizes = tileVarSizes;
    return this;
  }

  public GenericTileOffsets addTileVarSizesItem(BigDecimal tileVarSizesItem) {
    if (this.tileVarSizes == null) {
      this.tileVarSizes = new ArrayList<>();
    }
    this.tileVarSizes.add(tileVarSizesItem);
    return this;
  }

   /**
   * sizes of the uncompressed variable tiles offsets
   * @return tileVarSizes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sizes of the uncompressed variable tiles offsets")

  public List<BigDecimal> getTileVarSizes() {
    return tileVarSizes;
  }


  public void setTileVarSizes(List<BigDecimal> tileVarSizes) {
    this.tileVarSizes = tileVarSizes;
  }


  public GenericTileOffsets tileValidityOffsets(List<BigDecimal> tileValidityOffsets) {
    
    this.tileValidityOffsets = tileValidityOffsets;
    return this;
  }

  public GenericTileOffsets addTileValidityOffsetsItem(BigDecimal tileValidityOffsetsItem) {
    if (this.tileValidityOffsets == null) {
      this.tileValidityOffsets = new ArrayList<>();
    }
    this.tileValidityOffsets.add(tileValidityOffsetsItem);
    return this;
  }

   /**
   * tile validity offsets
   * @return tileValidityOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tile validity offsets")

  public List<BigDecimal> getTileValidityOffsets() {
    return tileValidityOffsets;
  }


  public void setTileValidityOffsets(List<BigDecimal> tileValidityOffsets) {
    this.tileValidityOffsets = tileValidityOffsets;
  }


  public GenericTileOffsets tileMinOffsets(List<BigDecimal> tileMinOffsets) {
    
    this.tileMinOffsets = tileMinOffsets;
    return this;
  }

  public GenericTileOffsets addTileMinOffsetsItem(BigDecimal tileMinOffsetsItem) {
    if (this.tileMinOffsets == null) {
      this.tileMinOffsets = new ArrayList<>();
    }
    this.tileMinOffsets.add(tileMinOffsetsItem);
    return this;
  }

   /**
   * min tile offsets
   * @return tileMinOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "min tile offsets")

  public List<BigDecimal> getTileMinOffsets() {
    return tileMinOffsets;
  }


  public void setTileMinOffsets(List<BigDecimal> tileMinOffsets) {
    this.tileMinOffsets = tileMinOffsets;
  }


  public GenericTileOffsets tileMaxOffsets(List<BigDecimal> tileMaxOffsets) {
    
    this.tileMaxOffsets = tileMaxOffsets;
    return this;
  }

  public GenericTileOffsets addTileMaxOffsetsItem(BigDecimal tileMaxOffsetsItem) {
    if (this.tileMaxOffsets == null) {
      this.tileMaxOffsets = new ArrayList<>();
    }
    this.tileMaxOffsets.add(tileMaxOffsetsItem);
    return this;
  }

   /**
   * max tile offsets
   * @return tileMaxOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "max tile offsets")

  public List<BigDecimal> getTileMaxOffsets() {
    return tileMaxOffsets;
  }


  public void setTileMaxOffsets(List<BigDecimal> tileMaxOffsets) {
    this.tileMaxOffsets = tileMaxOffsets;
  }


  public GenericTileOffsets tileSumOffsets(List<BigDecimal> tileSumOffsets) {
    
    this.tileSumOffsets = tileSumOffsets;
    return this;
  }

  public GenericTileOffsets addTileSumOffsetsItem(BigDecimal tileSumOffsetsItem) {
    if (this.tileSumOffsets == null) {
      this.tileSumOffsets = new ArrayList<>();
    }
    this.tileSumOffsets.add(tileSumOffsetsItem);
    return this;
  }

   /**
   * tile sum offsets
   * @return tileSumOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tile sum offsets")

  public List<BigDecimal> getTileSumOffsets() {
    return tileSumOffsets;
  }


  public void setTileSumOffsets(List<BigDecimal> tileSumOffsets) {
    this.tileSumOffsets = tileSumOffsets;
  }


  public GenericTileOffsets tileNullCountOffsets(List<BigDecimal> tileNullCountOffsets) {
    
    this.tileNullCountOffsets = tileNullCountOffsets;
    return this;
  }

  public GenericTileOffsets addTileNullCountOffsetsItem(BigDecimal tileNullCountOffsetsItem) {
    if (this.tileNullCountOffsets == null) {
      this.tileNullCountOffsets = new ArrayList<>();
    }
    this.tileNullCountOffsets.add(tileNullCountOffsetsItem);
    return this;
  }

   /**
   * null count offsets
   * @return tileNullCountOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "null count offsets")

  public List<BigDecimal> getTileNullCountOffsets() {
    return tileNullCountOffsets;
  }


  public void setTileNullCountOffsets(List<BigDecimal> tileNullCountOffsets) {
    this.tileNullCountOffsets = tileNullCountOffsets;
  }


  public GenericTileOffsets fragmentMinMaxSumNullCountOffset(BigDecimal fragmentMinMaxSumNullCountOffset) {
    
    this.fragmentMinMaxSumNullCountOffset = fragmentMinMaxSumNullCountOffset;
    return this;
  }

   /**
   * fragment min/max/sum/nullcount offsets
   * @return fragmentMinMaxSumNullCountOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "fragment min/max/sum/nullcount offsets")

  public BigDecimal getFragmentMinMaxSumNullCountOffset() {
    return fragmentMinMaxSumNullCountOffset;
  }


  public void setFragmentMinMaxSumNullCountOffset(BigDecimal fragmentMinMaxSumNullCountOffset) {
    this.fragmentMinMaxSumNullCountOffset = fragmentMinMaxSumNullCountOffset;
  }


  public GenericTileOffsets processedConditionsOffsets(BigDecimal processedConditionsOffsets) {
    
    this.processedConditionsOffsets = processedConditionsOffsets;
    return this;
  }

   /**
   * processed conditions offsets
   * @return processedConditionsOffsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "processed conditions offsets")

  public BigDecimal getProcessedConditionsOffsets() {
    return processedConditionsOffsets;
  }


  public void setProcessedConditionsOffsets(BigDecimal processedConditionsOffsets) {
    this.processedConditionsOffsets = processedConditionsOffsets;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public GenericTileOffsets putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericTileOffsets genericTileOffsets = (GenericTileOffsets) o;
    return Objects.equals(this.rtree, genericTileOffsets.rtree) &&
        Objects.equals(this.tileOffsets, genericTileOffsets.tileOffsets) &&
        Objects.equals(this.tileVarOffsets, genericTileOffsets.tileVarOffsets) &&
        Objects.equals(this.tileVarSizes, genericTileOffsets.tileVarSizes) &&
        Objects.equals(this.tileValidityOffsets, genericTileOffsets.tileValidityOffsets) &&
        Objects.equals(this.tileMinOffsets, genericTileOffsets.tileMinOffsets) &&
        Objects.equals(this.tileMaxOffsets, genericTileOffsets.tileMaxOffsets) &&
        Objects.equals(this.tileSumOffsets, genericTileOffsets.tileSumOffsets) &&
        Objects.equals(this.tileNullCountOffsets, genericTileOffsets.tileNullCountOffsets) &&
        Objects.equals(this.fragmentMinMaxSumNullCountOffset, genericTileOffsets.fragmentMinMaxSumNullCountOffset) &&
        Objects.equals(this.processedConditionsOffsets, genericTileOffsets.processedConditionsOffsets)&&
        Objects.equals(this.additionalProperties, genericTileOffsets.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rtree, tileOffsets, tileVarOffsets, tileVarSizes, tileValidityOffsets, tileMinOffsets, tileMaxOffsets, tileSumOffsets, tileNullCountOffsets, fragmentMinMaxSumNullCountOffset, processedConditionsOffsets, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericTileOffsets {\n");
    sb.append("    rtree: ").append(toIndentedString(rtree)).append("\n");
    sb.append("    tileOffsets: ").append(toIndentedString(tileOffsets)).append("\n");
    sb.append("    tileVarOffsets: ").append(toIndentedString(tileVarOffsets)).append("\n");
    sb.append("    tileVarSizes: ").append(toIndentedString(tileVarSizes)).append("\n");
    sb.append("    tileValidityOffsets: ").append(toIndentedString(tileValidityOffsets)).append("\n");
    sb.append("    tileMinOffsets: ").append(toIndentedString(tileMinOffsets)).append("\n");
    sb.append("    tileMaxOffsets: ").append(toIndentedString(tileMaxOffsets)).append("\n");
    sb.append("    tileSumOffsets: ").append(toIndentedString(tileSumOffsets)).append("\n");
    sb.append("    tileNullCountOffsets: ").append(toIndentedString(tileNullCountOffsets)).append("\n");
    sb.append("    fragmentMinMaxSumNullCountOffset: ").append(toIndentedString(fragmentMinMaxSumNullCountOffset)).append("\n");
    sb.append("    processedConditionsOffsets: ").append(toIndentedString(processedConditionsOffsets)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rtree");
    openapiFields.add("tileOffsets");
    openapiFields.add("tileVarOffsets");
    openapiFields.add("tileVarSizes");
    openapiFields.add("tileValidityOffsets");
    openapiFields.add("tileMinOffsets");
    openapiFields.add("tileMaxOffsets");
    openapiFields.add("tileSumOffsets");
    openapiFields.add("tileNullCountOffsets");
    openapiFields.add("fragmentMinMaxSumNullCountOffset");
    openapiFields.add("processedConditionsOffsets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenericTileOffsets
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GenericTileOffsets.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericTileOffsets is not found in the empty JSON string", GenericTileOffsets.openapiRequiredFields.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("tileOffsets") != null && !jsonObj.get("tileOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("tileOffsets").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tileVarOffsets") != null && !jsonObj.get("tileVarOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileVarOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("tileVarOffsets").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tileVarSizes") != null && !jsonObj.get("tileVarSizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileVarSizes` to be an array in the JSON string but got `%s`", jsonObj.get("tileVarSizes").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tileValidityOffsets") != null && !jsonObj.get("tileValidityOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileValidityOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("tileValidityOffsets").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tileMinOffsets") != null && !jsonObj.get("tileMinOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileMinOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("tileMinOffsets").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tileMaxOffsets") != null && !jsonObj.get("tileMaxOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileMaxOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("tileMaxOffsets").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tileSumOffsets") != null && !jsonObj.get("tileSumOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileSumOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("tileSumOffsets").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("tileNullCountOffsets") != null && !jsonObj.get("tileNullCountOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tileNullCountOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("tileNullCountOffsets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericTileOffsets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericTileOffsets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericTileOffsets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericTileOffsets.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericTileOffsets>() {
           @Override
           public void write(JsonWriter out, GenericTileOffsets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericTileOffsets read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GenericTileOffsets instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenericTileOffsets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenericTileOffsets
  * @throws IOException if the JSON string is invalid with respect to GenericTileOffsets
  */
  public static GenericTileOffsets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericTileOffsets.class);
  }

 /**
  * Convert an instance of GenericTileOffsets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

