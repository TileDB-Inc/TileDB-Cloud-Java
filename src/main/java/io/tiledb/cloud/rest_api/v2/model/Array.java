/*
 * Tiledb Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.v2.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import io.tiledb.cloud.rest_api.v2.JSON;

/**
 * Represents an open array
 */
@ApiModel(description = "Represents an open array")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-02T18:54:48.746612+03:00[Europe/Athens]")
public class Array {
  public static final String SERIALIZED_NAME_QUERY_TYPE = "queryType";
  @SerializedName(SERIALIZED_NAME_QUERY_TYPE)
  private Querytype queryType;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_END_TIMESTAMP = "endTimestamp";
  @SerializedName(SERIALIZED_NAME_END_TIMESTAMP)
  private BigDecimal endTimestamp;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "startTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private BigDecimal startTimestamp;

  public static final String SERIALIZED_NAME_ARRAY_SCHEMA_LATEST = "arraySchemaLatest";
  @SerializedName(SERIALIZED_NAME_ARRAY_SCHEMA_LATEST)
  private ArraySchema arraySchemaLatest;

  public static final String SERIALIZED_NAME_ARRAY_SCHEMAS_ALL = "arraySchemasAll";
  @SerializedName(SERIALIZED_NAME_ARRAY_SCHEMAS_ALL)
  private ArraySchemaMap arraySchemasAll;

  public static final String SERIALIZED_NAME_ARRAY_METADATA = "arrayMetadata";
  @SerializedName(SERIALIZED_NAME_ARRAY_METADATA)
  private ArrayMetadata arrayMetadata;

  public static final String SERIALIZED_NAME_NON_EMPTY_DOMAIN = "nonEmptyDomain";
  @SerializedName(SERIALIZED_NAME_NON_EMPTY_DOMAIN)
  private NonEmptyDomainList nonEmptyDomain;

  public static final String SERIALIZED_NAME_ARRAY_DIRECTORY = "arrayDirectory";
  @SerializedName(SERIALIZED_NAME_ARRAY_DIRECTORY)
  private ArrayDirectory arrayDirectory;

  public static final String SERIALIZED_NAME_FRAGMENT_METADATA_ALL = "fragmentMetadataAll";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_METADATA_ALL)
  private List<FragmentMetadata> fragmentMetadataAll = null;

  public static final String SERIALIZED_NAME_OPENED_AT_END_TIMESTAMP = "openedAtEndTimestamp";
  @SerializedName(SERIALIZED_NAME_OPENED_AT_END_TIMESTAMP)
  private BigDecimal openedAtEndTimestamp;

  public Array() { 
  }

  public Array queryType(Querytype queryType) {
    
    this.queryType = queryType;
    return this;
  }

   /**
   * Get queryType
   * @return queryType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Querytype getQueryType() {
    return queryType;
  }


  public void setQueryType(Querytype queryType) {
    this.queryType = queryType;
  }


  public Array uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Array uri
   * @return uri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Array uri")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }


  public Array endTimestamp(BigDecimal endTimestamp) {
    
    this.endTimestamp = endTimestamp;
    return this;
  }

   /**
   * Ending timestamp (epoch milliseconds) array is opened at
   * @return endTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1540471791873", value = "Ending timestamp (epoch milliseconds) array is opened at")

  public BigDecimal getEndTimestamp() {
    return endTimestamp;
  }


  public void setEndTimestamp(BigDecimal endTimestamp) {
    this.endTimestamp = endTimestamp;
  }


  public Array startTimestamp(BigDecimal startTimestamp) {
    
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * Starting timestamp (epoch milliseconds) array is opened at
   * @return startTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1540471791873", value = "Starting timestamp (epoch milliseconds) array is opened at")

  public BigDecimal getStartTimestamp() {
    return startTimestamp;
  }


  public void setStartTimestamp(BigDecimal startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public Array arraySchemaLatest(ArraySchema arraySchemaLatest) {
    
    this.arraySchemaLatest = arraySchemaLatest;
    return this;
  }

   /**
   * Get arraySchemaLatest
   * @return arraySchemaLatest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ArraySchema getArraySchemaLatest() {
    return arraySchemaLatest;
  }


  public void setArraySchemaLatest(ArraySchema arraySchemaLatest) {
    this.arraySchemaLatest = arraySchemaLatest;
  }


  public Array arraySchemasAll(ArraySchemaMap arraySchemasAll) {
    
    this.arraySchemasAll = arraySchemasAll;
    return this;
  }

   /**
   * Get arraySchemasAll
   * @return arraySchemasAll
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ArraySchemaMap getArraySchemasAll() {
    return arraySchemasAll;
  }


  public void setArraySchemasAll(ArraySchemaMap arraySchemasAll) {
    this.arraySchemasAll = arraySchemasAll;
  }


  public Array arrayMetadata(ArrayMetadata arrayMetadata) {
    
    this.arrayMetadata = arrayMetadata;
    return this;
  }

   /**
   * Get arrayMetadata
   * @return arrayMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ArrayMetadata getArrayMetadata() {
    return arrayMetadata;
  }


  public void setArrayMetadata(ArrayMetadata arrayMetadata) {
    this.arrayMetadata = arrayMetadata;
  }


  public Array nonEmptyDomain(NonEmptyDomainList nonEmptyDomain) {
    
    this.nonEmptyDomain = nonEmptyDomain;
    return this;
  }

   /**
   * Get nonEmptyDomain
   * @return nonEmptyDomain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NonEmptyDomainList getNonEmptyDomain() {
    return nonEmptyDomain;
  }


  public void setNonEmptyDomain(NonEmptyDomainList nonEmptyDomain) {
    this.nonEmptyDomain = nonEmptyDomain;
  }


  public Array arrayDirectory(ArrayDirectory arrayDirectory) {
    
    this.arrayDirectory = arrayDirectory;
    return this;
  }

   /**
   * Get arrayDirectory
   * @return arrayDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ArrayDirectory getArrayDirectory() {
    return arrayDirectory;
  }


  public void setArrayDirectory(ArrayDirectory arrayDirectory) {
    this.arrayDirectory = arrayDirectory;
  }


  public Array fragmentMetadataAll(List<FragmentMetadata> fragmentMetadataAll) {
    
    this.fragmentMetadataAll = fragmentMetadataAll;
    return this;
  }

  public Array addFragmentMetadataAllItem(FragmentMetadata fragmentMetadataAllItem) {
    if (this.fragmentMetadataAll == null) {
      this.fragmentMetadataAll = new ArrayList<>();
    }
    this.fragmentMetadataAll.add(fragmentMetadataAllItem);
    return this;
  }

   /**
   * metadata for all fragments (for reads)
   * @return fragmentMetadataAll
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "metadata for all fragments (for reads)")

  public List<FragmentMetadata> getFragmentMetadataAll() {
    return fragmentMetadataAll;
  }


  public void setFragmentMetadataAll(List<FragmentMetadata> fragmentMetadataAll) {
    this.fragmentMetadataAll = fragmentMetadataAll;
  }


  public Array openedAtEndTimestamp(BigDecimal openedAtEndTimestamp) {
    
    this.openedAtEndTimestamp = openedAtEndTimestamp;
    return this;
  }

   /**
   * The ending timestamp that the array was last opened at
   * @return openedAtEndTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ending timestamp that the array was last opened at")

  public BigDecimal getOpenedAtEndTimestamp() {
    return openedAtEndTimestamp;
  }


  public void setOpenedAtEndTimestamp(BigDecimal openedAtEndTimestamp) {
    this.openedAtEndTimestamp = openedAtEndTimestamp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public Array putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Array array = (Array) o;
    return Objects.equals(this.queryType, array.queryType) &&
        Objects.equals(this.uri, array.uri) &&
        Objects.equals(this.endTimestamp, array.endTimestamp) &&
        Objects.equals(this.startTimestamp, array.startTimestamp) &&
        Objects.equals(this.arraySchemaLatest, array.arraySchemaLatest) &&
        Objects.equals(this.arraySchemasAll, array.arraySchemasAll) &&
        Objects.equals(this.arrayMetadata, array.arrayMetadata) &&
        Objects.equals(this.nonEmptyDomain, array.nonEmptyDomain) &&
        Objects.equals(this.arrayDirectory, array.arrayDirectory) &&
        Objects.equals(this.fragmentMetadataAll, array.fragmentMetadataAll) &&
        Objects.equals(this.openedAtEndTimestamp, array.openedAtEndTimestamp)&&
        Objects.equals(this.additionalProperties, array.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryType, uri, endTimestamp, startTimestamp, arraySchemaLatest, arraySchemasAll, arrayMetadata, nonEmptyDomain, arrayDirectory, fragmentMetadataAll, openedAtEndTimestamp, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Array {\n");
    sb.append("    queryType: ").append(toIndentedString(queryType)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    arraySchemaLatest: ").append(toIndentedString(arraySchemaLatest)).append("\n");
    sb.append("    arraySchemasAll: ").append(toIndentedString(arraySchemasAll)).append("\n");
    sb.append("    arrayMetadata: ").append(toIndentedString(arrayMetadata)).append("\n");
    sb.append("    nonEmptyDomain: ").append(toIndentedString(nonEmptyDomain)).append("\n");
    sb.append("    arrayDirectory: ").append(toIndentedString(arrayDirectory)).append("\n");
    sb.append("    fragmentMetadataAll: ").append(toIndentedString(fragmentMetadataAll)).append("\n");
    sb.append("    openedAtEndTimestamp: ").append(toIndentedString(openedAtEndTimestamp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryType");
    openapiFields.add("uri");
    openapiFields.add("endTimestamp");
    openapiFields.add("startTimestamp");
    openapiFields.add("arraySchemaLatest");
    openapiFields.add("arraySchemasAll");
    openapiFields.add("arrayMetadata");
    openapiFields.add("nonEmptyDomain");
    openapiFields.add("arrayDirectory");
    openapiFields.add("fragmentMetadataAll");
    openapiFields.add("openedAtEndTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("queryType");
    openapiRequiredFields.add("uri");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Array
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Array.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Array is not found in the empty JSON string", Array.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Array.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the optional field `arraySchemaLatest`
      if (jsonObj.getAsJsonObject("arraySchemaLatest") != null) {
        ArraySchema.validateJsonObject(jsonObj.getAsJsonObject("arraySchemaLatest"));
      }
      // validate the optional field `arraySchemasAll`
      if (jsonObj.getAsJsonObject("arraySchemasAll") != null) {
        ArraySchemaMap.validateJsonObject(jsonObj.getAsJsonObject("arraySchemasAll"));
      }
      // validate the optional field `arrayMetadata`
      if (jsonObj.getAsJsonObject("arrayMetadata") != null) {
        ArrayMetadata.validateJsonObject(jsonObj.getAsJsonObject("arrayMetadata"));
      }
      // validate the optional field `nonEmptyDomain`
      if (jsonObj.getAsJsonObject("nonEmptyDomain") != null) {
        NonEmptyDomainList.validateJsonObject(jsonObj.getAsJsonObject("nonEmptyDomain"));
      }
      // validate the optional field `arrayDirectory`
      if (jsonObj.getAsJsonObject("arrayDirectory") != null) {
        ArrayDirectory.validateJsonObject(jsonObj.getAsJsonObject("arrayDirectory"));
      }
      JsonArray jsonArrayfragmentMetadataAll = jsonObj.getAsJsonArray("fragmentMetadataAll");
      if (jsonArrayfragmentMetadataAll != null) {
        // ensure the json data is an array
        if (!jsonObj.get("fragmentMetadataAll").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `fragmentMetadataAll` to be an array in the JSON string but got `%s`", jsonObj.get("fragmentMetadataAll").toString()));
        }

        // validate the optional field `fragmentMetadataAll` (array)
        for (int i = 0; i < jsonArrayfragmentMetadataAll.size(); i++) {
          FragmentMetadata.validateJsonObject(jsonArrayfragmentMetadataAll.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Array.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Array' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Array> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Array.class));

       return (TypeAdapter<T>) new TypeAdapter<Array>() {
           @Override
           public void write(JsonWriter out, Array value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Array read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Array instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Array given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Array
  * @throws IOException if the JSON string is invalid with respect to Array
  */
  public static Array fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Array.class);
  }

 /**
  * Convert an instance of Array to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

