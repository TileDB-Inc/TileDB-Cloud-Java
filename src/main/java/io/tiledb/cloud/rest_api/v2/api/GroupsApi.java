/*
 * Tiledb Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.v2.api;

import io.tiledb.cloud.rest_api.v2.ApiClient;
import io.tiledb.cloud.rest_api.v2.ApiException;
import io.tiledb.cloud.rest_api.v2.model.GroupContentActivityResponse;
import io.tiledb.cloud.rest_api.v2.model.GroupContentsChangesRequest;
import io.tiledb.cloud.rest_api.v2.model.GroupContentsRetrievalRequest;
import io.tiledb.cloud.rest_api.v2.model.GroupContentsRetrievalResponse;
import io.tiledb.cloud.rest_api.v2.model.GroupCreationRequest;
import io.tiledb.cloud.rest_api.v2.model.GroupCreationResponse;
import io.tiledb.cloud.rest_api.v2.model.GroupMetadataRetrievalRequest;
import io.tiledb.cloud.rest_api.v2.model.GroupMetadataUpdateRequest;
import io.tiledb.cloud.rest_api.v2.model.GroupRegistrationRequest;
import io.tiledb.cloud.rest_api.v2.model.Metadata;
import io.tiledb.cloud.rest_api.v2.ApiCallback;
import io.tiledb.cloud.rest_api.v2.ApiResponse;
import io.tiledb.cloud.rest_api.v2.Configuration;
import io.tiledb.cloud.rest_api.v2.Pair;

import com.google.gson.reflect.TypeToken;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGroup
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupCreation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupCreationRequest groupCreation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupCreation;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) {
            localVarHeaderParams.put("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", localVarApiClient.parameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupCreationRequest groupCreation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling createGroup(Async)");
        }
        

        okhttp3.Call localVarCall = createGroupCall(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupCreation, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates an empty group
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupCreation  (optional)
     * @return GroupCreationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public GroupCreationResponse createGroup(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupCreationRequest groupCreation) throws ApiException {
        ApiResponse<GroupCreationResponse> localVarResp = createGroupWithHttpInfo(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupCreation);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an empty group
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupCreation  (optional)
     * @return ApiResponse&lt;GroupCreationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupCreationResponse> createGroupWithHttpInfo(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupCreationRequest groupCreation) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupCreation, null);
        Type localVarReturnType = new TypeToken<GroupCreationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an empty group
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupCreation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupCreationRequest groupCreation, final ApiCallback<GroupCreationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupCreation, _callback);
        Type localVarReturnType = new TypeToken<GroupCreationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param recursive If true, it descends in the group and deletes every subgroup and subarray (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(String groupNamespace, String groupName, String recursive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}/delete"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(String groupNamespace, String groupName, String recursive, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling deleteGroup(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling deleteGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deleteGroupCall(groupNamespace, groupName, recursive, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deregisters and physically deletes a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param recursive If true, it descends in the group and deletes every subgroup and subarray (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroup(String groupNamespace, String groupName, String recursive) throws ApiException {
        deleteGroupWithHttpInfo(groupNamespace, groupName, recursive);
    }

    /**
     * 
     * Deregisters and physically deletes a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param recursive If true, it descends in the group and deletes every subgroup and subarray (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupWithHttpInfo(String groupNamespace, String groupName, String recursive) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupNamespace, groupName, recursive, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deregisters and physically deletes a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param recursive If true, it descends in the group and deletes every subgroup and subarray (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> group deleted successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(String groupNamespace, String groupName, String recursive, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(groupNamespace, groupName, recursive, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deregisterGroup
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param recursive If true, it descends in the group and deregisters every subgroup and subarray (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group deregistered successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterGroupCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, String recursive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) {
            localVarHeaderParams.put("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", localVarApiClient.parameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deregisterGroupValidateBeforeCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, String recursive, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling deregisterGroup(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling deregisterGroup(Async)");
        }
        

        okhttp3.Call localVarCall = deregisterGroupCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, recursive, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deregisters a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param recursive If true, it descends in the group and deregisters every subgroup and subarray (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group deregistered successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void deregisterGroup(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, String recursive) throws ApiException {
        deregisterGroupWithHttpInfo(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, recursive);
    }

    /**
     * 
     * Deregisters a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param recursive If true, it descends in the group and deregisters every subgroup and subarray (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group deregistered successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deregisterGroupWithHttpInfo(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, String recursive) throws ApiException {
        okhttp3.Call localVarCall = deregisterGroupValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, recursive, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deregisters a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param recursive If true, it descends in the group and deregisters every subgroup and subarray (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group deregistered successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterGroupAsync(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, String recursive, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deregisterGroupValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, recursive, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupContentActivity
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity logs of group contents along with the pagination metadata </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupContentActivityCall(String groupNamespace, String groupName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}/content_activity"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupContentActivityValidateBeforeCall(String groupNamespace, String groupName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling getGroupContentActivity(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling getGroupContentActivity(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupContentActivityCall(groupNamespace, groupName, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves combined activity logs for all assets contained in a group.
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return GroupContentActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity logs of group contents along with the pagination metadata </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public GroupContentActivityResponse getGroupContentActivity(String groupNamespace, String groupName, Integer page, Integer perPage) throws ApiException {
        ApiResponse<GroupContentActivityResponse> localVarResp = getGroupContentActivityWithHttpInfo(groupNamespace, groupName, page, perPage);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves combined activity logs for all assets contained in a group.
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @return ApiResponse&lt;GroupContentActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity logs of group contents along with the pagination metadata </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupContentActivityResponse> getGroupContentActivityWithHttpInfo(String groupNamespace, String groupName, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getGroupContentActivityValidateBeforeCall(groupNamespace, groupName, page, perPage, null);
        Type localVarReturnType = new TypeToken<GroupContentActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves combined activity logs for all assets contained in a group.
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param page pagination offset (optional)
     * @param perPage pagination limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Activity logs of group contents along with the pagination metadata </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupContentActivityAsync(String groupNamespace, String groupName, Integer page, Integer perPage, final ApiCallback<GroupContentActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupContentActivityValidateBeforeCall(groupNamespace, groupName, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<GroupContentActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupMetadata
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataRetrieval  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> retrieve metadata for a group </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupMetadataCall(String groupNamespace, String groupName, GroupMetadataRetrievalRequest metadataRetrieval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataRetrieval;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}/metadata"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupMetadataValidateBeforeCall(String groupNamespace, String groupName, GroupMetadataRetrievalRequest metadataRetrieval, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling getGroupMetadata(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling getGroupMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupMetadataCall(groupNamespace, groupName, metadataRetrieval, _callback);
        return localVarCall;

    }

    /**
     * 
     * get metadata on a group using the requested config
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataRetrieval  (optional)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> retrieve metadata for a group </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public Metadata getGroupMetadata(String groupNamespace, String groupName, GroupMetadataRetrievalRequest metadataRetrieval) throws ApiException {
        ApiResponse<Metadata> localVarResp = getGroupMetadataWithHttpInfo(groupNamespace, groupName, metadataRetrieval);
        return localVarResp.getData();
    }

    /**
     * 
     * get metadata on a group using the requested config
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataRetrieval  (optional)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> retrieve metadata for a group </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metadata> getGroupMetadataWithHttpInfo(String groupNamespace, String groupName, GroupMetadataRetrievalRequest metadataRetrieval) throws ApiException {
        okhttp3.Call localVarCall = getGroupMetadataValidateBeforeCall(groupNamespace, groupName, metadataRetrieval, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get metadata on a group using the requested config
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataRetrieval  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> retrieve metadata for a group </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupMetadataAsync(String groupNamespace, String groupName, GroupMetadataRetrievalRequest metadataRetrieval, final ApiCallback<Metadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupMetadataValidateBeforeCall(groupNamespace, groupName, metadataRetrieval, _callback);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupNamespaceGroupNameOptions
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> the resource does not exist </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> the resource exists </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupNamespaceGroupNameOptionsCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) {
            localVarHeaderParams.put("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", localVarApiClient.parameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupNamespaceGroupNameOptionsValidateBeforeCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling groupsGroupNamespaceGroupNameOptions(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling groupsGroupNamespaceGroupNameOptions(Async)");
        }
        

        okhttp3.Call localVarCall = groupsGroupNamespaceGroupNameOptionsCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, _callback);
        return localVarCall;

    }

    /**
     * 
     * can be used to check if the resource exists
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> the resource does not exist </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> the resource exists </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void groupsGroupNamespaceGroupNameOptions(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME) throws ApiException {
        groupsGroupNamespaceGroupNameOptionsWithHttpInfo(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME);
    }

    /**
     * 
     * can be used to check if the resource exists
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> the resource does not exist </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> the resource exists </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupsGroupNamespaceGroupNameOptionsWithHttpInfo(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupNamespaceGroupNameOptionsValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * can be used to check if the resource exists
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> the resource does not exist </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> the resource exists </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupNamespaceGroupNameOptionsAsync(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupNamespaceGroupNameOptionsValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerGroup
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRegistration  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerGroupCall(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupRegistrationRequest groupRegistration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupRegistration;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) {
            localVarHeaderParams.put("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", localVarApiClient.parameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerGroupValidateBeforeCall(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupRegistrationRequest groupRegistration, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling registerGroup(Async)");
        }
        

        okhttp3.Call localVarCall = registerGroupCall(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRegistration, _callback);
        return localVarCall;

    }

    /**
     * 
     * Registers an already existing group
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRegistration  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void registerGroup(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupRegistrationRequest groupRegistration) throws ApiException {
        registerGroupWithHttpInfo(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRegistration);
    }

    /**
     * 
     * Registers an already existing group
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRegistration  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registerGroupWithHttpInfo(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupRegistrationRequest groupRegistration) throws ApiException {
        okhttp3.Call localVarCall = registerGroupValidateBeforeCall(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRegistration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Registers an already existing group
     * @param groupNamespace The namespace of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRegistration  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerGroupAsync(String groupNamespace, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupRegistrationRequest groupRegistration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerGroupValidateBeforeCall(groupNamespace, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRegistration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveGroup
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRetrieval  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGroupCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsRetrievalRequest groupRetrieval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupRetrieval;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) {
            localVarHeaderParams.put("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", localVarApiClient.parameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveGroupValidateBeforeCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsRetrievalRequest groupRetrieval, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling retrieveGroup(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling retrieveGroup(Async)");
        }
        

        okhttp3.Call localVarCall = retrieveGroupCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRetrieval, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the contents of a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRetrieval  (optional)
     * @return GroupContentsRetrievalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public GroupContentsRetrievalResponse retrieveGroup(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsRetrievalRequest groupRetrieval) throws ApiException {
        ApiResponse<GroupContentsRetrievalResponse> localVarResp = retrieveGroupWithHttpInfo(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRetrieval);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the contents of a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRetrieval  (optional)
     * @return ApiResponse&lt;GroupContentsRetrievalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupContentsRetrievalResponse> retrieveGroupWithHttpInfo(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsRetrievalRequest groupRetrieval) throws ApiException {
        okhttp3.Call localVarCall = retrieveGroupValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRetrieval, null);
        Type localVarReturnType = new TypeToken<GroupContentsRetrievalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the contents of a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupRetrieval  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group created successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveGroupAsync(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsRetrievalRequest groupRetrieval, final ApiCallback<GroupContentsRetrievalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveGroupValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupRetrieval, _callback);
        Type localVarReturnType = new TypeToken<GroupContentsRetrievalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupContents
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupUpdateContents  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> attributes changed successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupContentsCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsChangesRequest groupUpdateContents, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupUpdateContents;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME != null) {
            localVarHeaderParams.put("X-TILEDB-CLOUD-ACCESS-CREDENTIALS-NAME", localVarApiClient.parameterToString(X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupContentsValidateBeforeCall(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsChangesRequest groupUpdateContents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling updateGroupContents(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling updateGroupContents(Async)");
        }
        

        okhttp3.Call localVarCall = updateGroupContentsCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupUpdateContents, _callback);
        return localVarCall;

    }

    /**
     * 
     * Change the contents of the group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupUpdateContents  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> attributes changed successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupContents(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsChangesRequest groupUpdateContents) throws ApiException {
        updateGroupContentsWithHttpInfo(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupUpdateContents);
    }

    /**
     * 
     * Change the contents of the group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupUpdateContents  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> attributes changed successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupContentsWithHttpInfo(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsChangesRequest groupUpdateContents) throws ApiException {
        okhttp3.Call localVarCall = updateGroupContentsValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupUpdateContents, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Change the contents of the group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME Optional registered access credentials to use for creation (optional)
     * @param groupUpdateContents  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> attributes changed successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupContentsAsync(String groupNamespace, String groupName, String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, GroupContentsChangesRequest groupUpdateContents, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupContentsValidateBeforeCall(groupNamespace, groupName, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, groupUpdateContents, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupMetadata
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataUpdating  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group metadata updated successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupMetadataCall(String groupNamespace, String groupName, GroupMetadataUpdateRequest metadataUpdating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataUpdating;

        // create path and map variables
        String localVarPath = "/groups/{group_namespace}/{group_name}/metadata"
            .replaceAll("\\{" + "group_namespace" + "\\}", localVarApiClient.escapeString(groupNamespace.toString()))
            .replaceAll("\\{" + "group_name" + "\\}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupMetadataValidateBeforeCall(String groupNamespace, String groupName, GroupMetadataUpdateRequest metadataUpdating, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupNamespace' is set
        if (groupNamespace == null) {
            throw new ApiException("Missing the required parameter 'groupNamespace' when calling updateGroupMetadata(Async)");
        }
        
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling updateGroupMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = updateGroupMetadataCall(groupNamespace, groupName, metadataUpdating, _callback);
        return localVarCall;

    }

    /**
     * 
     * update metadata on a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataUpdating  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group metadata updated successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public void updateGroupMetadata(String groupNamespace, String groupName, GroupMetadataUpdateRequest metadataUpdating) throws ApiException {
        updateGroupMetadataWithHttpInfo(groupNamespace, groupName, metadataUpdating);
    }

    /**
     * 
     * update metadata on a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataUpdating  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group metadata updated successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGroupMetadataWithHttpInfo(String groupNamespace, String groupName, GroupMetadataUpdateRequest metadataUpdating) throws ApiException {
        okhttp3.Call localVarCall = updateGroupMetadataValidateBeforeCall(groupNamespace, groupName, metadataUpdating, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * update metadata on a group
     * @param groupNamespace The namespace of the group (required)
     * @param groupName The unique name or id of the group (required)
     * @param metadataUpdating  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group metadata updated successfully </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupMetadataAsync(String groupNamespace, String groupName, GroupMetadataUpdateRequest metadataUpdating, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupMetadataValidateBeforeCall(groupNamespace, groupName, metadataUpdating, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
