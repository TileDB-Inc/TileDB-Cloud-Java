/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.AssetBackingType;
import io.tiledb.cloud.rest_api.model.AssetOwnershipLevel;
import io.tiledb.cloud.rest_api.model.AssetType;
import io.tiledb.cloud.rest_api.model.MetadataStringified;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * metadata of an asset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class AssetInfo {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "asset_type";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private AssetType assetType;

  public static final String SERIALIZED_NAME_ASSET_BACKING_TYPE = "asset_backing_type";
  @SerializedName(SERIALIZED_NAME_ASSET_BACKING_TYPE)
  private AssetBackingType assetBackingType;

  public static final String SERIALIZED_NAME_ASSET_OWNERSHIP_LEVEL = "asset_ownership_level";
  @SerializedName(SERIALIZED_NAME_ASSET_OWNERSHIP_LEVEL)
  private AssetOwnershipLevel assetOwnershipLevel;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespace_name";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_NAMESPACE_UUID = "namespace_uuid";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_UUID)
  private String namespaceUuid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private MetadataStringified metadata;

  public AssetInfo() {
  }

  public AssetInfo(
     OffsetDateTime createdAt
  ) {
    this();
    this.createdAt = createdAt;
  }

  public AssetInfo uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * unique ID of a registered asset
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public AssetInfo assetType(AssetType assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * Get assetType
   * @return assetType
   */
  @javax.annotation.Nullable
  public AssetType getAssetType() {
    return assetType;
  }

  public void setAssetType(AssetType assetType) {
    this.assetType = assetType;
  }


  public AssetInfo assetBackingType(AssetBackingType assetBackingType) {
    this.assetBackingType = assetBackingType;
    return this;
  }

  /**
   * Get assetBackingType
   * @return assetBackingType
   */
  @javax.annotation.Nullable
  public AssetBackingType getAssetBackingType() {
    return assetBackingType;
  }

  public void setAssetBackingType(AssetBackingType assetBackingType) {
    this.assetBackingType = assetBackingType;
  }


  public AssetInfo assetOwnershipLevel(AssetOwnershipLevel assetOwnershipLevel) {
    this.assetOwnershipLevel = assetOwnershipLevel;
    return this;
  }

  /**
   * Get assetOwnershipLevel
   * @return assetOwnershipLevel
   */
  @javax.annotation.Nullable
  public AssetOwnershipLevel getAssetOwnershipLevel() {
    return assetOwnershipLevel;
  }

  public void setAssetOwnershipLevel(AssetOwnershipLevel assetOwnershipLevel) {
    this.assetOwnershipLevel = assetOwnershipLevel;
  }


  public AssetInfo namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * namespace_name that the asset is registered to
   * @return namespaceName
   */
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public AssetInfo namespaceUuid(String namespaceUuid) {
    this.namespaceUuid = namespaceUuid;
    return this;
  }

  /**
   * namespace_uuid that the asset is registered to
   * @return namespaceUuid
   */
  @javax.annotation.Nullable
  public String getNamespaceUuid() {
    return namespaceUuid;
  }

  public void setNamespaceUuid(String namespaceUuid) {
    this.namespaceUuid = namespaceUuid;
  }


  public AssetInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of asset
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssetInfo mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * mime type of the asset
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  /**
   * Time when the asset was created (rfc3339)
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public AssetInfo metadata(MetadataStringified metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public MetadataStringified getMetadata() {
    return metadata;
  }

  public void setMetadata(MetadataStringified metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetInfo assetInfo = (AssetInfo) o;
    return Objects.equals(this.uuid, assetInfo.uuid) &&
        Objects.equals(this.assetType, assetInfo.assetType) &&
        Objects.equals(this.assetBackingType, assetInfo.assetBackingType) &&
        Objects.equals(this.assetOwnershipLevel, assetInfo.assetOwnershipLevel) &&
        Objects.equals(this.namespaceName, assetInfo.namespaceName) &&
        Objects.equals(this.namespaceUuid, assetInfo.namespaceUuid) &&
        Objects.equals(this.name, assetInfo.name) &&
        Objects.equals(this.mimeType, assetInfo.mimeType) &&
        Objects.equals(this.createdAt, assetInfo.createdAt) &&
        Objects.equals(this.metadata, assetInfo.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, assetType, assetBackingType, assetOwnershipLevel, namespaceName, namespaceUuid, name, mimeType, createdAt, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetInfo {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    assetBackingType: ").append(toIndentedString(assetBackingType)).append("\n");
    sb.append("    assetOwnershipLevel: ").append(toIndentedString(assetOwnershipLevel)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    namespaceUuid: ").append(toIndentedString(namespaceUuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("asset_type");
    openapiFields.add("asset_backing_type");
    openapiFields.add("asset_ownership_level");
    openapiFields.add("namespace_name");
    openapiFields.add("namespace_uuid");
    openapiFields.add("name");
    openapiFields.add("mime_type");
    openapiFields.add("created_at");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetInfo is not found in the empty JSON string", AssetInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the optional field `asset_type`
      if (jsonObj.get("asset_type") != null && !jsonObj.get("asset_type").isJsonNull()) {
        AssetType.validateJsonElement(jsonObj.get("asset_type"));
      }
      // validate the optional field `asset_backing_type`
      if (jsonObj.get("asset_backing_type") != null && !jsonObj.get("asset_backing_type").isJsonNull()) {
        AssetBackingType.validateJsonElement(jsonObj.get("asset_backing_type"));
      }
      // validate the optional field `asset_ownership_level`
      if (jsonObj.get("asset_ownership_level") != null && !jsonObj.get("asset_ownership_level").isJsonNull()) {
        AssetOwnershipLevel.validateJsonElement(jsonObj.get("asset_ownership_level"));
      }
      if ((jsonObj.get("namespace_name") != null && !jsonObj.get("namespace_name").isJsonNull()) && !jsonObj.get("namespace_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_name").toString()));
      }
      if ((jsonObj.get("namespace_uuid") != null && !jsonObj.get("namespace_uuid").isJsonNull()) && !jsonObj.get("namespace_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_uuid").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonNull()) && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        MetadataStringified.validateJsonElement(jsonObj.get("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetInfo>() {
           @Override
           public void write(JsonWriter out, AssetInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetInfo
   * @throws IOException if the JSON string is invalid with respect to AssetInfo
   */
  public static AssetInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetInfo.class);
  }

  /**
   * Convert an instance of AssetInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

