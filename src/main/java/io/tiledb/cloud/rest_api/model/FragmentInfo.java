/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.ArraySchema;
import io.tiledb.cloud.rest_api.model.SingleFragmentInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Fragment info of an array
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class FragmentInfo {
  public static final String SERIALIZED_NAME_ARRAY_SCHEMA_ALL = "arraySchemaAll";
  @SerializedName(SERIALIZED_NAME_ARRAY_SCHEMA_ALL)
  private Map<String, ArraySchema> arraySchemaAll = new HashMap<>();

  public static final String SERIALIZED_NAME_FRAGMENT_INFO = "fragmentInfo";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_INFO)
  private List<SingleFragmentInfo> fragmentInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_TO_VACUUM = "toVacuum";
  @SerializedName(SERIALIZED_NAME_TO_VACUUM)
  private List<String> toVacuum = new ArrayList<>();

  public FragmentInfo() {
  }

  public FragmentInfo arraySchemaAll(Map<String, ArraySchema> arraySchemaAll) {
    this.arraySchemaAll = arraySchemaAll;
    return this;
  }

  public FragmentInfo putArraySchemaAllItem(String key, ArraySchema arraySchemaAllItem) {
    if (this.arraySchemaAll == null) {
      this.arraySchemaAll = new HashMap<>();
    }
    this.arraySchemaAll.put(key, arraySchemaAllItem);
    return this;
  }

  /**
   * map of all array schemas
   * @return arraySchemaAll
   */
  @javax.annotation.Nullable
  public Map<String, ArraySchema> getArraySchemaAll() {
    return arraySchemaAll;
  }

  public void setArraySchemaAll(Map<String, ArraySchema> arraySchemaAll) {
    this.arraySchemaAll = arraySchemaAll;
  }


  public FragmentInfo fragmentInfo(List<SingleFragmentInfo> fragmentInfo) {
    this.fragmentInfo = fragmentInfo;
    return this;
  }

  public FragmentInfo addFragmentInfoItem(SingleFragmentInfo fragmentInfoItem) {
    if (this.fragmentInfo == null) {
      this.fragmentInfo = new ArrayList<>();
    }
    this.fragmentInfo.add(fragmentInfoItem);
    return this;
  }

  /**
   * information about fragments in the array
   * @return fragmentInfo
   */
  @javax.annotation.Nullable
  public List<SingleFragmentInfo> getFragmentInfo() {
    return fragmentInfo;
  }

  public void setFragmentInfo(List<SingleFragmentInfo> fragmentInfo) {
    this.fragmentInfo = fragmentInfo;
  }


  public FragmentInfo toVacuum(List<String> toVacuum) {
    this.toVacuum = toVacuum;
    return this;
  }

  public FragmentInfo addToVacuumItem(String toVacuumItem) {
    if (this.toVacuum == null) {
      this.toVacuum = new ArrayList<>();
    }
    this.toVacuum.add(toVacuumItem);
    return this;
  }

  /**
   * the URIs of the fragments to vacuum
   * @return toVacuum
   */
  @javax.annotation.Nullable
  public List<String> getToVacuum() {
    return toVacuum;
  }

  public void setToVacuum(List<String> toVacuum) {
    this.toVacuum = toVacuum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FragmentInfo fragmentInfo = (FragmentInfo) o;
    return Objects.equals(this.arraySchemaAll, fragmentInfo.arraySchemaAll) &&
        Objects.equals(this.fragmentInfo, fragmentInfo.fragmentInfo) &&
        Objects.equals(this.toVacuum, fragmentInfo.toVacuum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arraySchemaAll, fragmentInfo, toVacuum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FragmentInfo {\n");
    sb.append("    arraySchemaAll: ").append(toIndentedString(arraySchemaAll)).append("\n");
    sb.append("    fragmentInfo: ").append(toIndentedString(fragmentInfo)).append("\n");
    sb.append("    toVacuum: ").append(toIndentedString(toVacuum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arraySchemaAll");
    openapiFields.add("fragmentInfo");
    openapiFields.add("toVacuum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FragmentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FragmentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FragmentInfo is not found in the empty JSON string", FragmentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FragmentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FragmentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fragmentInfo") != null && !jsonObj.get("fragmentInfo").isJsonNull()) {
        JsonArray jsonArrayfragmentInfo = jsonObj.getAsJsonArray("fragmentInfo");
        if (jsonArrayfragmentInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fragmentInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fragmentInfo` to be an array in the JSON string but got `%s`", jsonObj.get("fragmentInfo").toString()));
          }

          // validate the optional field `fragmentInfo` (array)
          for (int i = 0; i < jsonArrayfragmentInfo.size(); i++) {
            SingleFragmentInfo.validateJsonElement(jsonArrayfragmentInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("toVacuum") != null && !jsonObj.get("toVacuum").isJsonNull() && !jsonObj.get("toVacuum").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `toVacuum` to be an array in the JSON string but got `%s`", jsonObj.get("toVacuum").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FragmentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FragmentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FragmentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FragmentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<FragmentInfo>() {
           @Override
           public void write(JsonWriter out, FragmentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FragmentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FragmentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FragmentInfo
   * @throws IOException if the JSON string is invalid with respect to FragmentInfo
   */
  public static FragmentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FragmentInfo.class);
  }

  /**
   * Convert an instance of FragmentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

