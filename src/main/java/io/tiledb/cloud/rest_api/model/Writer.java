/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.DomainArray;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Writer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Writer {
  public static final String SERIALIZED_NAME_CHECK_COORD_DUPS = "checkCoordDups";
  @SerializedName(SERIALIZED_NAME_CHECK_COORD_DUPS)
  private Boolean checkCoordDups;

  public static final String SERIALIZED_NAME_CHECK_COORD_O_O_B = "checkCoordOOB";
  @SerializedName(SERIALIZED_NAME_CHECK_COORD_O_O_B)
  private Boolean checkCoordOOB;

  public static final String SERIALIZED_NAME_DEDUP_COORDS = "dedupCoords";
  @SerializedName(SERIALIZED_NAME_DEDUP_COORDS)
  private Boolean dedupCoords;

  public static final String SERIALIZED_NAME_SUBARRAY = "subarray";
  @SerializedName(SERIALIZED_NAME_SUBARRAY)
  private DomainArray subarray;

  public Writer() {
  }

  public Writer checkCoordDups(Boolean checkCoordDups) {
    this.checkCoordDups = checkCoordDups;
    return this;
  }

  /**
   * Get checkCoordDups
   * @return checkCoordDups
   */
  @javax.annotation.Nullable
  public Boolean getCheckCoordDups() {
    return checkCoordDups;
  }

  public void setCheckCoordDups(Boolean checkCoordDups) {
    this.checkCoordDups = checkCoordDups;
  }


  public Writer checkCoordOOB(Boolean checkCoordOOB) {
    this.checkCoordOOB = checkCoordOOB;
    return this;
  }

  /**
   * Get checkCoordOOB
   * @return checkCoordOOB
   */
  @javax.annotation.Nullable
  public Boolean getCheckCoordOOB() {
    return checkCoordOOB;
  }

  public void setCheckCoordOOB(Boolean checkCoordOOB) {
    this.checkCoordOOB = checkCoordOOB;
  }


  public Writer dedupCoords(Boolean dedupCoords) {
    this.dedupCoords = dedupCoords;
    return this;
  }

  /**
   * Get dedupCoords
   * @return dedupCoords
   */
  @javax.annotation.Nullable
  public Boolean getDedupCoords() {
    return dedupCoords;
  }

  public void setDedupCoords(Boolean dedupCoords) {
    this.dedupCoords = dedupCoords;
  }


  public Writer subarray(DomainArray subarray) {
    this.subarray = subarray;
    return this;
  }

  /**
   * Get subarray
   * @return subarray
   */
  @javax.annotation.Nullable
  public DomainArray getSubarray() {
    return subarray;
  }

  public void setSubarray(DomainArray subarray) {
    this.subarray = subarray;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Writer writer = (Writer) o;
    return Objects.equals(this.checkCoordDups, writer.checkCoordDups) &&
        Objects.equals(this.checkCoordOOB, writer.checkCoordOOB) &&
        Objects.equals(this.dedupCoords, writer.dedupCoords) &&
        Objects.equals(this.subarray, writer.subarray);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkCoordDups, checkCoordOOB, dedupCoords, subarray);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Writer {\n");
    sb.append("    checkCoordDups: ").append(toIndentedString(checkCoordDups)).append("\n");
    sb.append("    checkCoordOOB: ").append(toIndentedString(checkCoordOOB)).append("\n");
    sb.append("    dedupCoords: ").append(toIndentedString(dedupCoords)).append("\n");
    sb.append("    subarray: ").append(toIndentedString(subarray)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkCoordDups");
    openapiFields.add("checkCoordOOB");
    openapiFields.add("dedupCoords");
    openapiFields.add("subarray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Writer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Writer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Writer is not found in the empty JSON string", Writer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Writer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Writer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `subarray`
      if (jsonObj.get("subarray") != null && !jsonObj.get("subarray").isJsonNull()) {
        DomainArray.validateJsonElement(jsonObj.get("subarray"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Writer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Writer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Writer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Writer.class));

       return (TypeAdapter<T>) new TypeAdapter<Writer>() {
           @Override
           public void write(JsonWriter out, Writer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Writer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Writer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Writer
   * @throws IOException if the JSON string is invalid with respect to Writer
   */
  public static Writer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Writer.class);
  }

  /**
   * Convert an instance of Writer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

