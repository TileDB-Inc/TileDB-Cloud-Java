/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.AssetLocations;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * OrganizationUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class OrganizationUpdate {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEFAULT_S3_PATH = "default_s3_path";
  @SerializedName(SERIALIZED_NAME_DEFAULT_S3_PATH)
  private String defaultS3Path;

  public static final String SERIALIZED_NAME_DEFAULT_S3_PATH_CREDENTIALS_NAME = "default_s3_path_credentials_name";
  @SerializedName(SERIALIZED_NAME_DEFAULT_S3_PATH_CREDENTIALS_NAME)
  private String defaultS3PathCredentialsName;

  public static final String SERIALIZED_NAME_ASSET_LOCATIONS = "asset_locations";
  @SerializedName(SERIALIZED_NAME_ASSET_LOCATIONS)
  private AssetLocations assetLocations;

  public OrganizationUpdate() {
  }

  public OrganizationUpdate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * organization name must be unique
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrganizationUpdate logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Organization logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public OrganizationUpdate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Organization description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OrganizationUpdate defaultS3Path(String defaultS3Path) {
    this.defaultS3Path = defaultS3Path;
    return this;
  }

  /**
   * The default location to store newly-created notebooks and other assets like UDFs. The name &#x60;default_s3_path&#x60; is a legacy holdover; it may refer to any supported storage location. 
   * @return defaultS3Path
   */
  @javax.annotation.Nullable
  public String getDefaultS3Path() {
    return defaultS3Path;
  }

  public void setDefaultS3Path(String defaultS3Path) {
    this.defaultS3Path = defaultS3Path;
  }


  public OrganizationUpdate defaultS3PathCredentialsName(String defaultS3PathCredentialsName) {
    this.defaultS3PathCredentialsName = defaultS3PathCredentialsName;
    return this;
  }

  /**
   * The name of the credentials used to create and access files in the &#x60;default_s3_path&#x60;, if needed. 
   * @return defaultS3PathCredentialsName
   */
  @javax.annotation.Nullable
  public String getDefaultS3PathCredentialsName() {
    return defaultS3PathCredentialsName;
  }

  public void setDefaultS3PathCredentialsName(String defaultS3PathCredentialsName) {
    this.defaultS3PathCredentialsName = defaultS3PathCredentialsName;
  }


  public OrganizationUpdate assetLocations(AssetLocations assetLocations) {
    this.assetLocations = assetLocations;
    return this;
  }

  /**
   * Get assetLocations
   * @return assetLocations
   */
  @javax.annotation.Nullable
  public AssetLocations getAssetLocations() {
    return assetLocations;
  }

  public void setAssetLocations(AssetLocations assetLocations) {
    this.assetLocations = assetLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationUpdate organizationUpdate = (OrganizationUpdate) o;
    return Objects.equals(this.name, organizationUpdate.name) &&
        Objects.equals(this.logo, organizationUpdate.logo) &&
        Objects.equals(this.description, organizationUpdate.description) &&
        Objects.equals(this.defaultS3Path, organizationUpdate.defaultS3Path) &&
        Objects.equals(this.defaultS3PathCredentialsName, organizationUpdate.defaultS3PathCredentialsName) &&
        Objects.equals(this.assetLocations, organizationUpdate.assetLocations);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, logo, description, defaultS3Path, defaultS3PathCredentialsName, assetLocations);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationUpdate {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultS3Path: ").append(toIndentedString(defaultS3Path)).append("\n");
    sb.append("    defaultS3PathCredentialsName: ").append(toIndentedString(defaultS3PathCredentialsName)).append("\n");
    sb.append("    assetLocations: ").append(toIndentedString(assetLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("logo");
    openapiFields.add("description");
    openapiFields.add("default_s3_path");
    openapiFields.add("default_s3_path_credentials_name");
    openapiFields.add("asset_locations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationUpdate is not found in the empty JSON string", OrganizationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("default_s3_path") != null && !jsonObj.get("default_s3_path").isJsonNull()) && !jsonObj.get("default_s3_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_s3_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_s3_path").toString()));
      }
      if ((jsonObj.get("default_s3_path_credentials_name") != null && !jsonObj.get("default_s3_path_credentials_name").isJsonNull()) && !jsonObj.get("default_s3_path_credentials_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_s3_path_credentials_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_s3_path_credentials_name").toString()));
      }
      // validate the optional field `asset_locations`
      if (jsonObj.get("asset_locations") != null && !jsonObj.get("asset_locations").isJsonNull()) {
        AssetLocations.validateJsonElement(jsonObj.get("asset_locations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationUpdate>() {
           @Override
           public void write(JsonWriter out, OrganizationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationUpdate
   * @throws IOException if the JSON string is invalid with respect to OrganizationUpdate
   */
  public static OrganizationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationUpdate.class);
  }

  /**
   * Convert an instance of OrganizationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

