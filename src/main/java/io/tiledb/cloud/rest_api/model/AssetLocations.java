/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.StorageLocation;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Custom storage locations on a perâ€“asset type basis. If any is unset, a suffix of the owning (user/organization) &#x60;default_s3_path&#x60; is used. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class AssetLocations {
  public static final String SERIALIZED_NAME_ARRAYS = "arrays";
  @SerializedName(SERIALIZED_NAME_ARRAYS)
  private StorageLocation arrays;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private StorageLocation files;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private StorageLocation groups;

  public static final String SERIALIZED_NAME_ML_MODELS = "ml_models";
  @SerializedName(SERIALIZED_NAME_ML_MODELS)
  private StorageLocation mlModels;

  public static final String SERIALIZED_NAME_NOTEBOOKS = "notebooks";
  @SerializedName(SERIALIZED_NAME_NOTEBOOKS)
  private StorageLocation notebooks;

  public static final String SERIALIZED_NAME_TASK_GRAPHS = "task_graphs";
  @SerializedName(SERIALIZED_NAME_TASK_GRAPHS)
  private StorageLocation taskGraphs;

  public static final String SERIALIZED_NAME_UDFS = "udfs";
  @SerializedName(SERIALIZED_NAME_UDFS)
  private StorageLocation udfs;

  public AssetLocations() {
  }

  public AssetLocations arrays(StorageLocation arrays) {
    this.arrays = arrays;
    return this;
  }

  /**
   * Get arrays
   * @return arrays
   */
  @javax.annotation.Nullable
  public StorageLocation getArrays() {
    return arrays;
  }

  public void setArrays(StorageLocation arrays) {
    this.arrays = arrays;
  }


  public AssetLocations files(StorageLocation files) {
    this.files = files;
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public StorageLocation getFiles() {
    return files;
  }

  public void setFiles(StorageLocation files) {
    this.files = files;
  }


  public AssetLocations groups(StorageLocation groups) {
    this.groups = groups;
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public StorageLocation getGroups() {
    return groups;
  }

  public void setGroups(StorageLocation groups) {
    this.groups = groups;
  }


  public AssetLocations mlModels(StorageLocation mlModels) {
    this.mlModels = mlModels;
    return this;
  }

  /**
   * Get mlModels
   * @return mlModels
   */
  @javax.annotation.Nullable
  public StorageLocation getMlModels() {
    return mlModels;
  }

  public void setMlModels(StorageLocation mlModels) {
    this.mlModels = mlModels;
  }


  public AssetLocations notebooks(StorageLocation notebooks) {
    this.notebooks = notebooks;
    return this;
  }

  /**
   * Get notebooks
   * @return notebooks
   */
  @javax.annotation.Nullable
  public StorageLocation getNotebooks() {
    return notebooks;
  }

  public void setNotebooks(StorageLocation notebooks) {
    this.notebooks = notebooks;
  }


  public AssetLocations taskGraphs(StorageLocation taskGraphs) {
    this.taskGraphs = taskGraphs;
    return this;
  }

  /**
   * Get taskGraphs
   * @return taskGraphs
   */
  @javax.annotation.Nullable
  public StorageLocation getTaskGraphs() {
    return taskGraphs;
  }

  public void setTaskGraphs(StorageLocation taskGraphs) {
    this.taskGraphs = taskGraphs;
  }


  public AssetLocations udfs(StorageLocation udfs) {
    this.udfs = udfs;
    return this;
  }

  /**
   * Get udfs
   * @return udfs
   */
  @javax.annotation.Nullable
  public StorageLocation getUdfs() {
    return udfs;
  }

  public void setUdfs(StorageLocation udfs) {
    this.udfs = udfs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetLocations assetLocations = (AssetLocations) o;
    return Objects.equals(this.arrays, assetLocations.arrays) &&
        Objects.equals(this.files, assetLocations.files) &&
        Objects.equals(this.groups, assetLocations.groups) &&
        Objects.equals(this.mlModels, assetLocations.mlModels) &&
        Objects.equals(this.notebooks, assetLocations.notebooks) &&
        Objects.equals(this.taskGraphs, assetLocations.taskGraphs) &&
        Objects.equals(this.udfs, assetLocations.udfs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrays, files, groups, mlModels, notebooks, taskGraphs, udfs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetLocations {\n");
    sb.append("    arrays: ").append(toIndentedString(arrays)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    mlModels: ").append(toIndentedString(mlModels)).append("\n");
    sb.append("    notebooks: ").append(toIndentedString(notebooks)).append("\n");
    sb.append("    taskGraphs: ").append(toIndentedString(taskGraphs)).append("\n");
    sb.append("    udfs: ").append(toIndentedString(udfs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrays");
    openapiFields.add("files");
    openapiFields.add("groups");
    openapiFields.add("ml_models");
    openapiFields.add("notebooks");
    openapiFields.add("task_graphs");
    openapiFields.add("udfs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetLocations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetLocations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetLocations is not found in the empty JSON string", AssetLocations.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetLocations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetLocations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetLocations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetLocations.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetLocations>() {
           @Override
           public void write(JsonWriter out, AssetLocations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetLocations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetLocations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetLocations
   * @throws IOException if the JSON string is invalid with respect to AssetLocations
   */
  public static AssetLocations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetLocations.class);
  }

  /**
   * Convert an instance of AssetLocations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

