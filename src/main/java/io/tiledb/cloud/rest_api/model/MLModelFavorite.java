/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * A user-favorite MLModel item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class MLModelFavorite {
  public static final String SERIALIZED_NAME_MLMODEL_UUID = "mlmodel_uuid";
  @SerializedName(SERIALIZED_NAME_MLMODEL_UUID)
  private String mlmodelUuid;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public MLModelFavorite() {
  }

  public MLModelFavorite mlmodelUuid(String mlmodelUuid) {
    this.mlmodelUuid = mlmodelUuid;
    return this;
  }

  /**
   * unique UUID of the MLModel
   * @return mlmodelUuid
   */
  @javax.annotation.Nullable
  public String getMlmodelUuid() {
    return mlmodelUuid;
  }

  public void setMlmodelUuid(String mlmodelUuid) {
    this.mlmodelUuid = mlmodelUuid;
  }


  public MLModelFavorite namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * the namespace of the MLModel
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public MLModelFavorite name(String name) {
    this.name = name;
    return this;
  }

  /**
   * the name of the MLModel
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MLModelFavorite mlModelFavorite = (MLModelFavorite) o;
    return Objects.equals(this.mlmodelUuid, mlModelFavorite.mlmodelUuid) &&
        Objects.equals(this.namespace, mlModelFavorite.namespace) &&
        Objects.equals(this.name, mlModelFavorite.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mlmodelUuid, namespace, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MLModelFavorite {\n");
    sb.append("    mlmodelUuid: ").append(toIndentedString(mlmodelUuid)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mlmodel_uuid");
    openapiFields.add("namespace");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MLModelFavorite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MLModelFavorite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MLModelFavorite is not found in the empty JSON string", MLModelFavorite.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MLModelFavorite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MLModelFavorite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MLModelFavorite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MLModelFavorite.class));

       return (TypeAdapter<T>) new TypeAdapter<MLModelFavorite>() {
           @Override
           public void write(JsonWriter out, MLModelFavorite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MLModelFavorite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MLModelFavorite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MLModelFavorite
   * @throws IOException if the JSON string is invalid with respect to MLModelFavorite
   */
  public static MLModelFavorite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MLModelFavorite.class);
  }

  /**
   * Convert an instance of MLModelFavorite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

