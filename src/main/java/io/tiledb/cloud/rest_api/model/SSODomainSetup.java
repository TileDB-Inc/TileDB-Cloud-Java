/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Configuration settings to verify ownership of a given domain. At least one of these must be completed enable user login from the domain. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class SSODomainSetup {
  public static final String SERIALIZED_NAME_TXT = "txt";
  @SerializedName(SERIALIZED_NAME_TXT)
  private String txt;

  public static final String SERIALIZED_NAME_CNAME_SRC = "cname_src";
  @SerializedName(SERIALIZED_NAME_CNAME_SRC)
  private String cnameSrc;

  public static final String SERIALIZED_NAME_CNAME_DST = "cname_dst";
  @SerializedName(SERIALIZED_NAME_CNAME_DST)
  private String cnameDst;

  public SSODomainSetup() {
  }

  public SSODomainSetup txt(String txt) {
    this.txt = txt;
    return this;
  }

  /**
   * a DNS TXT record to set on the domain to claim.
   * @return txt
   */
  @javax.annotation.Nullable
  public String getTxt() {
    return txt;
  }

  public void setTxt(String txt) {
    this.txt = txt;
  }


  public SSODomainSetup cnameSrc(String cnameSrc) {
    this.cnameSrc = cnameSrc;
    return this;
  }

  /**
   * a DNS name to set a CNAME record on
   * @return cnameSrc
   */
  @javax.annotation.Nullable
  public String getCnameSrc() {
    return cnameSrc;
  }

  public void setCnameSrc(String cnameSrc) {
    this.cnameSrc = cnameSrc;
  }


  public SSODomainSetup cnameDst(String cnameDst) {
    this.cnameDst = cnameDst;
    return this;
  }

  /**
   * the CNAME target of &#x60;cname_src&#x60;.
   * @return cnameDst
   */
  @javax.annotation.Nullable
  public String getCnameDst() {
    return cnameDst;
  }

  public void setCnameDst(String cnameDst) {
    this.cnameDst = cnameDst;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSODomainSetup ssODomainSetup = (SSODomainSetup) o;
    return Objects.equals(this.txt, ssODomainSetup.txt) &&
        Objects.equals(this.cnameSrc, ssODomainSetup.cnameSrc) &&
        Objects.equals(this.cnameDst, ssODomainSetup.cnameDst);
  }

  @Override
  public int hashCode() {
    return Objects.hash(txt, cnameSrc, cnameDst);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSODomainSetup {\n");
    sb.append("    txt: ").append(toIndentedString(txt)).append("\n");
    sb.append("    cnameSrc: ").append(toIndentedString(cnameSrc)).append("\n");
    sb.append("    cnameDst: ").append(toIndentedString(cnameDst)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("txt");
    openapiFields.add("cname_src");
    openapiFields.add("cname_dst");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SSODomainSetup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SSODomainSetup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SSODomainSetup is not found in the empty JSON string", SSODomainSetup.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SSODomainSetup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SSODomainSetup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SSODomainSetup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SSODomainSetup.class));

       return (TypeAdapter<T>) new TypeAdapter<SSODomainSetup>() {
           @Override
           public void write(JsonWriter out, SSODomainSetup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SSODomainSetup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SSODomainSetup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SSODomainSetup
   * @throws IOException if the JSON string is invalid with respect to SSODomainSetup
   */
  public static SSODomainSetup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SSODomainSetup.class);
  }

  /**
   * Convert an instance of SSODomainSetup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

