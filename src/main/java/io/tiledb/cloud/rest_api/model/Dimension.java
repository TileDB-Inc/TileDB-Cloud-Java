/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.Datatype;
import io.tiledb.cloud.rest_api.model.DimensionTileExtent;
import io.tiledb.cloud.rest_api.model.DomainArray;
import io.tiledb.cloud.rest_api.model.FilterPipeline;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Dimension of array
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Dimension {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Datatype type;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private DomainArray domain;

  public static final String SERIALIZED_NAME_NULL_TILE_EXTENT = "nullTileExtent";
  @SerializedName(SERIALIZED_NAME_NULL_TILE_EXTENT)
  private Boolean nullTileExtent;

  public static final String SERIALIZED_NAME_TILE_EXTENT = "tileExtent";
  @SerializedName(SERIALIZED_NAME_TILE_EXTENT)
  private DimensionTileExtent tileExtent;

  public static final String SERIALIZED_NAME_FILTER_PIPELINE = "filterPipeline";
  @SerializedName(SERIALIZED_NAME_FILTER_PIPELINE)
  private FilterPipeline filterPipeline;

  public Dimension() {
  }

  public Dimension name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Dimension name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Dimension type(Datatype type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public Datatype getType() {
    return type;
  }

  public void setType(Datatype type) {
    this.type = type;
  }


  public Dimension domain(DomainArray domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public DomainArray getDomain() {
    return domain;
  }

  public void setDomain(DomainArray domain) {
    this.domain = domain;
  }


  public Dimension nullTileExtent(Boolean nullTileExtent) {
    this.nullTileExtent = nullTileExtent;
    return this;
  }

  /**
   * Is tile extent null
   * @return nullTileExtent
   */
  @javax.annotation.Nonnull
  public Boolean getNullTileExtent() {
    return nullTileExtent;
  }

  public void setNullTileExtent(Boolean nullTileExtent) {
    this.nullTileExtent = nullTileExtent;
  }


  public Dimension tileExtent(DimensionTileExtent tileExtent) {
    this.tileExtent = tileExtent;
    return this;
  }

  /**
   * Get tileExtent
   * @return tileExtent
   */
  @javax.annotation.Nullable
  public DimensionTileExtent getTileExtent() {
    return tileExtent;
  }

  public void setTileExtent(DimensionTileExtent tileExtent) {
    this.tileExtent = tileExtent;
  }


  public Dimension filterPipeline(FilterPipeline filterPipeline) {
    this.filterPipeline = filterPipeline;
    return this;
  }

  /**
   * Get filterPipeline
   * @return filterPipeline
   */
  @javax.annotation.Nullable
  public FilterPipeline getFilterPipeline() {
    return filterPipeline;
  }

  public void setFilterPipeline(FilterPipeline filterPipeline) {
    this.filterPipeline = filterPipeline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dimension dimension = (Dimension) o;
    return Objects.equals(this.name, dimension.name) &&
        Objects.equals(this.type, dimension.type) &&
        Objects.equals(this.domain, dimension.domain) &&
        Objects.equals(this.nullTileExtent, dimension.nullTileExtent) &&
        Objects.equals(this.tileExtent, dimension.tileExtent) &&
        Objects.equals(this.filterPipeline, dimension.filterPipeline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, domain, nullTileExtent, tileExtent, filterPipeline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dimension {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    nullTileExtent: ").append(toIndentedString(nullTileExtent)).append("\n");
    sb.append("    tileExtent: ").append(toIndentedString(tileExtent)).append("\n");
    sb.append("    filterPipeline: ").append(toIndentedString(filterPipeline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("domain");
    openapiFields.add("nullTileExtent");
    openapiFields.add("tileExtent");
    openapiFields.add("filterPipeline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("nullTileExtent");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dimension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dimension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dimension is not found in the empty JSON string", Dimension.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dimension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dimension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dimension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dimension.class));

       return (TypeAdapter<T>) new TypeAdapter<Dimension>() {
           @Override
           public void write(JsonWriter out, Dimension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dimension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dimension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dimension
   * @throws IOException if the JSON string is invalid with respect to Dimension
   */
  public static Dimension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dimension.class);
  }

  /**
   * Convert an instance of Dimension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

