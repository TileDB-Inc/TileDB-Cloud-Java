/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * The enumerations of a single attribute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Enumeration {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH_NAME = "path_name";
  @SerializedName(SERIALIZED_NAME_PATH_NAME)
  private String pathName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CELL_VAL_NUM = "cell_val_num";
  @SerializedName(SERIALIZED_NAME_CELL_VAL_NUM)
  private Integer cellValNum;

  public static final String SERIALIZED_NAME_ORDERED = "ordered";
  @SerializedName(SERIALIZED_NAME_ORDERED)
  private Boolean ordered;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<Integer> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFSETS = "offsets";
  @SerializedName(SERIALIZED_NAME_OFFSETS)
  private List<Integer> offsets = new ArrayList<>();

  public Enumeration() {
  }

  public Enumeration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Enumeration pathName(String pathName) {
    this.pathName = pathName;
    return this;
  }

  /**
   * Get pathName
   * @return pathName
   */
  @javax.annotation.Nullable
  public String getPathName() {
    return pathName;
  }

  public void setPathName(String pathName) {
    this.pathName = pathName;
  }


  public Enumeration type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Enumeration cellValNum(Integer cellValNum) {
    this.cellValNum = cellValNum;
    return this;
  }

  /**
   * Get cellValNum
   * @return cellValNum
   */
  @javax.annotation.Nullable
  public Integer getCellValNum() {
    return cellValNum;
  }

  public void setCellValNum(Integer cellValNum) {
    this.cellValNum = cellValNum;
  }


  public Enumeration ordered(Boolean ordered) {
    this.ordered = ordered;
    return this;
  }

  /**
   * Get ordered
   * @return ordered
   */
  @javax.annotation.Nullable
  public Boolean getOrdered() {
    return ordered;
  }

  public void setOrdered(Boolean ordered) {
    this.ordered = ordered;
  }


  public Enumeration data(List<Integer> data) {
    this.data = data;
    return this;
  }

  public Enumeration addDataItem(Integer dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public List<Integer> getData() {
    return data;
  }

  public void setData(List<Integer> data) {
    this.data = data;
  }


  public Enumeration offsets(List<Integer> offsets) {
    this.offsets = offsets;
    return this;
  }

  public Enumeration addOffsetsItem(Integer offsetsItem) {
    if (this.offsets == null) {
      this.offsets = new ArrayList<>();
    }
    this.offsets.add(offsetsItem);
    return this;
  }

  /**
   * Get offsets
   * @return offsets
   */
  @javax.annotation.Nullable
  public List<Integer> getOffsets() {
    return offsets;
  }

  public void setOffsets(List<Integer> offsets) {
    this.offsets = offsets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Enumeration enumeration = (Enumeration) o;
    return Objects.equals(this.name, enumeration.name) &&
        Objects.equals(this.pathName, enumeration.pathName) &&
        Objects.equals(this.type, enumeration.type) &&
        Objects.equals(this.cellValNum, enumeration.cellValNum) &&
        Objects.equals(this.ordered, enumeration.ordered) &&
        Objects.equals(this.data, enumeration.data) &&
        Objects.equals(this.offsets, enumeration.offsets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, pathName, type, cellValNum, ordered, data, offsets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Enumeration {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pathName: ").append(toIndentedString(pathName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    cellValNum: ").append(toIndentedString(cellValNum)).append("\n");
    sb.append("    ordered: ").append(toIndentedString(ordered)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    offsets: ").append(toIndentedString(offsets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("path_name");
    openapiFields.add("type");
    openapiFields.add("cell_val_num");
    openapiFields.add("ordered");
    openapiFields.add("data");
    openapiFields.add("offsets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Enumeration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Enumeration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Enumeration is not found in the empty JSON string", Enumeration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Enumeration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Enumeration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path_name") != null && !jsonObj.get("path_name").isJsonNull()) && !jsonObj.get("path_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull() && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("offsets") != null && !jsonObj.get("offsets").isJsonNull() && !jsonObj.get("offsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offsets` to be an array in the JSON string but got `%s`", jsonObj.get("offsets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Enumeration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Enumeration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Enumeration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Enumeration.class));

       return (TypeAdapter<T>) new TypeAdapter<Enumeration>() {
           @Override
           public void write(JsonWriter out, Enumeration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Enumeration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Enumeration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Enumeration
   * @throws IOException if the JSON string is invalid with respect to Enumeration
   */
  public static Enumeration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Enumeration.class);
  }

  /**
   * Convert an instance of Enumeration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

