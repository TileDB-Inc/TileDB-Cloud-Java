/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * The enumerations of a single attribute
 */
@ApiModel(description = "The enumerations of a single attribute")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-08T21:39:23.775746+03:00[Europe/Athens]")
public class Enumeration {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH_NAME = "path_name";
  @SerializedName(SERIALIZED_NAME_PATH_NAME)
  private String pathName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CELL_VAL_NUM = "cell_val_num";
  @SerializedName(SERIALIZED_NAME_CELL_VAL_NUM)
  private Integer cellValNum;

  public static final String SERIALIZED_NAME_ORDERED = "ordered";
  @SerializedName(SERIALIZED_NAME_ORDERED)
  private Boolean ordered;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<Integer> data = null;

  public static final String SERIALIZED_NAME_OFFSETS = "offsets";
  @SerializedName(SERIALIZED_NAME_OFFSETS)
  private List<Integer> offsets = null;

  public Enumeration() { 
  }

  public Enumeration name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Enumeration pathName(String pathName) {
    
    this.pathName = pathName;
    return this;
  }

   /**
   * Get pathName
   * @return pathName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPathName() {
    return pathName;
  }


  public void setPathName(String pathName) {
    this.pathName = pathName;
  }


  public Enumeration type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Enumeration cellValNum(Integer cellValNum) {
    
    this.cellValNum = cellValNum;
    return this;
  }

   /**
   * Get cellValNum
   * @return cellValNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCellValNum() {
    return cellValNum;
  }


  public void setCellValNum(Integer cellValNum) {
    this.cellValNum = cellValNum;
  }


  public Enumeration ordered(Boolean ordered) {
    
    this.ordered = ordered;
    return this;
  }

   /**
   * Get ordered
   * @return ordered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getOrdered() {
    return ordered;
  }


  public void setOrdered(Boolean ordered) {
    this.ordered = ordered;
  }


  public Enumeration data(List<Integer> data) {
    
    this.data = data;
    return this;
  }

  public Enumeration addDataItem(Integer dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getData() {
    return data;
  }


  public void setData(List<Integer> data) {
    this.data = data;
  }


  public Enumeration offsets(List<Integer> offsets) {
    
    this.offsets = offsets;
    return this;
  }

  public Enumeration addOffsetsItem(Integer offsetsItem) {
    if (this.offsets == null) {
      this.offsets = new ArrayList<>();
    }
    this.offsets.add(offsetsItem);
    return this;
  }

   /**
   * Get offsets
   * @return offsets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getOffsets() {
    return offsets;
  }


  public void setOffsets(List<Integer> offsets) {
    this.offsets = offsets;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public Enumeration putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Enumeration enumeration = (Enumeration) o;
    return Objects.equals(this.name, enumeration.name) &&
        Objects.equals(this.pathName, enumeration.pathName) &&
        Objects.equals(this.type, enumeration.type) &&
        Objects.equals(this.cellValNum, enumeration.cellValNum) &&
        Objects.equals(this.ordered, enumeration.ordered) &&
        Objects.equals(this.data, enumeration.data) &&
        Objects.equals(this.offsets, enumeration.offsets)&&
        Objects.equals(this.additionalProperties, enumeration.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, pathName, type, cellValNum, ordered, data, offsets, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Enumeration {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pathName: ").append(toIndentedString(pathName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    cellValNum: ").append(toIndentedString(cellValNum)).append("\n");
    sb.append("    ordered: ").append(toIndentedString(ordered)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    offsets: ").append(toIndentedString(offsets)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("path_name");
    openapiFields.add("type");
    openapiFields.add("cell_val_num");
    openapiFields.add("ordered");
    openapiFields.add("data");
    openapiFields.add("offsets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Enumeration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Enumeration.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Enumeration is not found in the empty JSON string", Enumeration.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("path_name") != null && !jsonObj.get("path_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_name").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("offsets") != null && !jsonObj.get("offsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offsets` to be an array in the JSON string but got `%s`", jsonObj.get("offsets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Enumeration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Enumeration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Enumeration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Enumeration.class));

       return (TypeAdapter<T>) new TypeAdapter<Enumeration>() {
           @Override
           public void write(JsonWriter out, Enumeration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Enumeration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Enumeration instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Enumeration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Enumeration
  * @throws IOException if the JSON string is invalid with respect to Enumeration
  */
  public static Enumeration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Enumeration.class);
  }

 /**
  * Convert an instance of Enumeration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

