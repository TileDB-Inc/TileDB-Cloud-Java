/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.NamespaceActions;
import io.tiledb.cloud.rest_api.model.OrganizationRoles;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Encapsulates information regarding inviting people using email to join organization, same permissions for all invitees
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class InvitationOrganizationJoinEmail {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<NamespaceActions> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATION_ROLE = "organization_role";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ROLE)
  private OrganizationRoles organizationRole;

  public static final String SERIALIZED_NAME_INVITEE_EMAIL = "invitee_email";
  @SerializedName(SERIALIZED_NAME_INVITEE_EMAIL)
  private List<String> inviteeEmail = new ArrayList<>();

  public InvitationOrganizationJoinEmail() {
  }

  public InvitationOrganizationJoinEmail actions(List<NamespaceActions> actions) {
    this.actions = actions;
    return this;
  }

  public InvitationOrganizationJoinEmail addActionsItem(NamespaceActions actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * List of permitted actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<NamespaceActions> getActions() {
    return actions;
  }

  public void setActions(List<NamespaceActions> actions) {
    this.actions = actions;
  }


  public InvitationOrganizationJoinEmail organizationRole(OrganizationRoles organizationRole) {
    this.organizationRole = organizationRole;
    return this;
  }

  /**
   * Get organizationRole
   * @return organizationRole
   */
  @javax.annotation.Nonnull
  public OrganizationRoles getOrganizationRole() {
    return organizationRole;
  }

  public void setOrganizationRole(OrganizationRoles organizationRole) {
    this.organizationRole = organizationRole;
  }


  public InvitationOrganizationJoinEmail inviteeEmail(List<String> inviteeEmail) {
    this.inviteeEmail = inviteeEmail;
    return this;
  }

  public InvitationOrganizationJoinEmail addInviteeEmailItem(String inviteeEmailItem) {
    if (this.inviteeEmail == null) {
      this.inviteeEmail = new ArrayList<>();
    }
    this.inviteeEmail.add(inviteeEmailItem);
    return this;
  }

  /**
   * Get inviteeEmail
   * @return inviteeEmail
   */
  @javax.annotation.Nonnull
  public List<String> getInviteeEmail() {
    return inviteeEmail;
  }

  public void setInviteeEmail(List<String> inviteeEmail) {
    this.inviteeEmail = inviteeEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvitationOrganizationJoinEmail invitationOrganizationJoinEmail = (InvitationOrganizationJoinEmail) o;
    return Objects.equals(this.actions, invitationOrganizationJoinEmail.actions) &&
        Objects.equals(this.organizationRole, invitationOrganizationJoinEmail.organizationRole) &&
        Objects.equals(this.inviteeEmail, invitationOrganizationJoinEmail.inviteeEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, organizationRole, inviteeEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvitationOrganizationJoinEmail {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    organizationRole: ").append(toIndentedString(organizationRole)).append("\n");
    sb.append("    inviteeEmail: ").append(toIndentedString(inviteeEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("organization_role");
    openapiFields.add("invitee_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organization_role");
    openapiRequiredFields.add("invitee_email");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvitationOrganizationJoinEmail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvitationOrganizationJoinEmail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvitationOrganizationJoinEmail is not found in the empty JSON string", InvitationOrganizationJoinEmail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvitationOrganizationJoinEmail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvitationOrganizationJoinEmail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvitationOrganizationJoinEmail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull() && !jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      // validate the required field `organization_role`
      OrganizationRoles.validateJsonElement(jsonObj.get("organization_role"));
      // ensure the required json array is present
      if (jsonObj.get("invitee_email") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("invitee_email").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitee_email` to be an array in the JSON string but got `%s`", jsonObj.get("invitee_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvitationOrganizationJoinEmail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvitationOrganizationJoinEmail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvitationOrganizationJoinEmail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvitationOrganizationJoinEmail.class));

       return (TypeAdapter<T>) new TypeAdapter<InvitationOrganizationJoinEmail>() {
           @Override
           public void write(JsonWriter out, InvitationOrganizationJoinEmail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvitationOrganizationJoinEmail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvitationOrganizationJoinEmail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvitationOrganizationJoinEmail
   * @throws IOException if the JSON string is invalid with respect to InvitationOrganizationJoinEmail
   */
  public static InvitationOrganizationJoinEmail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvitationOrganizationJoinEmail.class);
  }

  /**
   * Convert an instance of InvitationOrganizationJoinEmail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

