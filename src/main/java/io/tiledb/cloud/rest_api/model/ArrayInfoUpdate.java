/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.tiledb.cloud.rest_api.model.FileType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * metadata of an array
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class ArrayInfoUpdate {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private FileType fileType;

  public static final String SERIALIZED_NAME_FILE_PROPERTIES = "file_properties";
  @SerializedName(SERIALIZED_NAME_FILE_PROPERTIES)
  private Map<String, String> fileProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_ACCESS_CREDENTIALS_NAME = "access_credentials_name";
  @SerializedName(SERIALIZED_NAME_ACCESS_CREDENTIALS_NAME)
  private String accessCredentialsName;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_LICENSE_ID = "license_id";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private String licenseId;

  public static final String SERIALIZED_NAME_LICENSE_TEXT = "license_text";
  @SerializedName(SERIALIZED_NAME_LICENSE_TEXT)
  private String licenseText;

  public static final String SERIALIZED_NAME_READ_ONLY = "read_only";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public ArrayInfoUpdate() {
  }

  public ArrayInfoUpdate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * description of array
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ArrayInfoUpdate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * description of array
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ArrayInfoUpdate uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * uri of array
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public ArrayInfoUpdate fileType(FileType fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * Get fileType
   * @return fileType
   */
  @javax.annotation.Nullable
  public FileType getFileType() {
    return fileType;
  }

  public void setFileType(FileType fileType) {
    this.fileType = fileType;
  }


  public ArrayInfoUpdate fileProperties(Map<String, String> fileProperties) {
    this.fileProperties = fileProperties;
    return this;
  }

  public ArrayInfoUpdate putFilePropertiesItem(String key, String filePropertiesItem) {
    if (this.fileProperties == null) {
      this.fileProperties = new HashMap<>();
    }
    this.fileProperties.put(key, filePropertiesItem);
    return this;
  }

  /**
   * map of file properties created for this array
   * @return fileProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getFileProperties() {
    return fileProperties;
  }

  public void setFileProperties(Map<String, String> fileProperties) {
    this.fileProperties = fileProperties;
  }


  public ArrayInfoUpdate accessCredentialsName(String accessCredentialsName) {
    this.accessCredentialsName = accessCredentialsName;
    return this;
  }

  /**
   * the name of the access credentials to use. if unset, the default credentials will be used
   * @return accessCredentialsName
   */
  @javax.annotation.Nullable
  public String getAccessCredentialsName() {
    return accessCredentialsName;
  }

  public void setAccessCredentialsName(String accessCredentialsName) {
    this.accessCredentialsName = accessCredentialsName;
  }


  public ArrayInfoUpdate logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * logo (base64 encoded) for the array. Optional
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public ArrayInfoUpdate tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ArrayInfoUpdate addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * optional tags for array
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ArrayInfoUpdate licenseId(String licenseId) {
    this.licenseId = licenseId;
    return this;
  }

  /**
   * License identifier from SPDX License List or Custom
   * @return licenseId
   */
  @javax.annotation.Nullable
  public String getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(String licenseId) {
    this.licenseId = licenseId;
  }


  public ArrayInfoUpdate licenseText(String licenseText) {
    this.licenseText = licenseText;
    return this;
  }

  /**
   * License text
   * @return licenseText
   */
  @javax.annotation.Nullable
  public String getLicenseText() {
    return licenseText;
  }

  public void setLicenseText(String licenseText) {
    this.licenseText = licenseText;
  }


  public ArrayInfoUpdate readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Suggests if the array is in read_only mode
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArrayInfoUpdate arrayInfoUpdate = (ArrayInfoUpdate) o;
    return Objects.equals(this.description, arrayInfoUpdate.description) &&
        Objects.equals(this.name, arrayInfoUpdate.name) &&
        Objects.equals(this.uri, arrayInfoUpdate.uri) &&
        Objects.equals(this.fileType, arrayInfoUpdate.fileType) &&
        Objects.equals(this.fileProperties, arrayInfoUpdate.fileProperties) &&
        Objects.equals(this.accessCredentialsName, arrayInfoUpdate.accessCredentialsName) &&
        Objects.equals(this.logo, arrayInfoUpdate.logo) &&
        Objects.equals(this.tags, arrayInfoUpdate.tags) &&
        Objects.equals(this.licenseId, arrayInfoUpdate.licenseId) &&
        Objects.equals(this.licenseText, arrayInfoUpdate.licenseText) &&
        Objects.equals(this.readOnly, arrayInfoUpdate.readOnly);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, uri, fileType, fileProperties, accessCredentialsName, logo, tags, licenseId, licenseText, readOnly);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArrayInfoUpdate {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    fileProperties: ").append(toIndentedString(fileProperties)).append("\n");
    sb.append("    accessCredentialsName: ").append(toIndentedString(accessCredentialsName)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    licenseText: ").append(toIndentedString(licenseText)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("uri");
    openapiFields.add("file_type");
    openapiFields.add("file_properties");
    openapiFields.add("access_credentials_name");
    openapiFields.add("logo");
    openapiFields.add("tags");
    openapiFields.add("license_id");
    openapiFields.add("license_text");
    openapiFields.add("read_only");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArrayInfoUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArrayInfoUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArrayInfoUpdate is not found in the empty JSON string", ArrayInfoUpdate.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArrayInfoUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArrayInfoUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArrayInfoUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArrayInfoUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ArrayInfoUpdate>() {
           @Override
           public void write(JsonWriter out, ArrayInfoUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArrayInfoUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArrayInfoUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArrayInfoUpdate
   * @throws IOException if the JSON string is invalid with respect to ArrayInfoUpdate
   */
  public static ArrayInfoUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArrayInfoUpdate.class);
  }

  /**
   * Convert an instance of ArrayInfoUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

