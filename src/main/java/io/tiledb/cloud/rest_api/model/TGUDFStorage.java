/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.tiledb.cloud.rest_api.JSON;

/**
 * Storage options for mounting persistent volumes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class TGUDFStorage {
  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TILEDB_URI = "tiledb_uri";
  @SerializedName(SERIALIZED_NAME_TILEDB_URI)
  private String tiledbUri;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storage_class";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private String storageClass;

  public TGUDFStorage() {
  }

  public TGUDFStorage path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Mount path for the attached volume. 
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public TGUDFStorage tiledbUri(String tiledbUri) {
    this.tiledbUri = tiledbUri;
    return this;
  }

  /**
   * TileDB filesystem to mount 
   * @return tiledbUri
   */
  @javax.annotation.Nullable
  public String getTiledbUri() {
    return tiledbUri;
  }

  public void setTiledbUri(String tiledbUri) {
    this.tiledbUri = tiledbUri;
  }


  public TGUDFStorage size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Storage size. 
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public TGUDFStorage storageClass(String storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * Storage class to use for creating the volume. 
   * @return storageClass
   */
  @javax.annotation.Nullable
  public String getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(String storageClass) {
    this.storageClass = storageClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TGUDFStorage tgUDFStorage = (TGUDFStorage) o;
    return Objects.equals(this.path, tgUDFStorage.path) &&
        Objects.equals(this.tiledbUri, tgUDFStorage.tiledbUri) &&
        Objects.equals(this.size, tgUDFStorage.size) &&
        Objects.equals(this.storageClass, tgUDFStorage.storageClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, tiledbUri, size, storageClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TGUDFStorage {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    tiledbUri: ").append(toIndentedString(tiledbUri)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("path");
    openapiFields.add("tiledb_uri");
    openapiFields.add("size");
    openapiFields.add("storage_class");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TGUDFStorage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TGUDFStorage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TGUDFStorage is not found in the empty JSON string", TGUDFStorage.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TGUDFStorage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TGUDFStorage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TGUDFStorage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TGUDFStorage.class));

       return (TypeAdapter<T>) new TypeAdapter<TGUDFStorage>() {
           @Override
           public void write(JsonWriter out, TGUDFStorage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TGUDFStorage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TGUDFStorage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TGUDFStorage
   * @throws IOException if the JSON string is invalid with respect to TGUDFStorage
   */
  public static TGUDFStorage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TGUDFStorage.class);
  }

  /**
   * Convert an instance of TGUDFStorage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

