/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.Error;
import java.time.OffsetDateTime;
import io.tiledb.cloud.rest_api.model.TaskGraphClientNodeStatus;
import io.tiledb.cloud.rest_api.model.TaskGraphLog;
import io.tiledb.cloud.rest_api.model.TaskGraphLogsData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskGraphLogsApi
 */
@Disabled
public class TaskGraphLogsApiTest {

    private final TaskGraphLogsApi api = new TaskGraphLogsApi();

    /**
     * Create a task graph log.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskGraphLogTest() throws ApiException {
        String workspace = null;
        TaskGraphLog log = null;
        TaskGraphLog response = api.createTaskGraphLog(workspace, log);
        // TODO: test validations
    }

    /**
     * Fetch information about a single task graph execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskGraphLogTest() throws ApiException {
        String workspace = null;
        String id = null;
        TaskGraphLog response = api.getTaskGraphLog(workspace, id);
        // TODO: test validations
    }

    /**
     * Fetch the task graph logs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaskGraphLogsTest() throws ApiException {
        String namespace = null;
        String createdBy = null;
        String status = null;
        String search = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer page = null;
        Integer perPage = null;
        TaskGraphLogsData response = api.listTaskGraphLogs(namespace, createdBy, status, search, startTime, endTime, page, perPage);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportClientNodeTest() throws ApiException {
        String workspace = null;
        String id = null;
        TaskGraphClientNodeStatus report = null;
        api.reportClientNode(workspace, id, report);
        // TODO: test validations
    }

    /**
     * Resubmits a task graph in the given namespace using the associated execution id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resubmitTaskGraphExecutionTest() throws ApiException {
        String workspace = null;
        String id = null;
        TaskGraphLog response = api.resubmitTaskGraphExecution(workspace, id);
        // TODO: test validations
    }

    /**
     * Retries failed tasks of a task graph in the given namespace using the associated execution id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryTaskGraphExecutionTest() throws ApiException {
        String workspace = null;
        String id = null;
        TaskGraphLog response = api.retryTaskGraphExecution(workspace, id);
        // TODO: test validations
    }

    /**
     * Stops a task graph execution in the given namespace using the associated associated execution id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTaskGraphExecutionTest() throws ApiException {
        String workspace = null;
        String id = null;
        api.stopTaskGraphExecution(workspace, id);
        // TODO: test validations
    }

    /**
     * Submit a single task graph for execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitTaskGraphTest() throws ApiException {
        String workspace = null;
        String id = null;
        String rootTaskGraphUuid = null;
        TaskGraphLog response = api.submitTaskGraph(workspace, id, rootTaskGraphUuid);
        // TODO: test validations
    }

    /**
     * Update information about a single task graph execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskGraphLogTest() throws ApiException {
        String workspace = null;
        String id = null;
        TaskGraphLog log = null;
        api.updateTaskGraphLog(workspace, id, log);
        // TODO: test validations
    }

}
