/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.AWSAccessCredentials;
import io.tiledb.cloud.rest_api.model.Error;
import java.time.OffsetDateTime;
import io.tiledb.cloud.rest_api.model.OrganizationUser;
import io.tiledb.cloud.rest_api.model.ResetUserPasswordRequest;
import io.tiledb.cloud.rest_api.model.Token;
import io.tiledb.cloud.rest_api.model.TokenRequest;
import io.tiledb.cloud.rest_api.model.TokenScope;
import io.tiledb.cloud.rest_api.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Add aws keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        AWSAccessCredentials awsAccessCredentials = null;
        api.addAWSAccessCredentials(workspace, teamspace, awsAccessCredentials);
        // TODO: test validations
    }

    /**
     * add a user to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToOrganizationTest() throws ApiException {
        String organization = null;
        OrganizationUser user = null;
        api.addUserToOrganization(organization, user);
        // TODO: test validations
    }

    /**
     * Check if aws keys are set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        List<AWSAccessCredentials> response = api.checkAWSAccessCredentials(workspace, teamspace);
        // TODO: test validations
    }

    /**
     * Check if aws keys are set by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkAWSAccessCredentialsByNameTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        AWSAccessCredentials response = api.checkAWSAccessCredentialsByName(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * confirm user email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmEmailTest() throws ApiException {
        api.confirmEmail();
        // TODO: test validations
    }

    /**
     * create a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        User user = null;
        api.createUser(user);
        // TODO: test validations
    }

    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.deleteAWSAccessCredentials(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String username = null;
        api.deleteUser(username);
        // TODO: test validations
    }

    /**
     * delete a user from an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserFromOrganizationTest() throws ApiException {
        String organization = null;
        String username = null;
        api.deleteUserFromOrganization(organization, username);
        // TODO: test validations
    }

    /**
     * get a user from an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationUserTest() throws ApiException {
        String organization = null;
        String username = null;
        OrganizationUser response = api.getOrganizationUser(organization, username);
        // TODO: test validations
    }

    /**
     * Get session token for user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        String rememberMe = null;
        OffsetDateTime expires = null;
        Token response = api.getSession(rememberMe, expires);
        // TODO: test validations
    }

    /**
     * retrieves available token scopes for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenScopesTest() throws ApiException {
        List<TokenScope> response = api.getTokenScopes();
        // TODO: test validations
    }

    /**
     * get a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        User response = api.getUser();
        // TODO: test validations
    }

    /**
     * get a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserWithUsernameTest() throws ApiException {
        String username = null;
        User response = api.getUserWithUsername(username);
        // TODO: test validations
    }

    /**
     * Request an authorization token, optionally taken a TokenRequest object to set parameters on the token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestTokenTest() throws ApiException {
        TokenRequest tokenRequest = null;
        Token response = api.requestToken(tokenRequest);
        // TODO: test validations
    }

    /**
     * reset user password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetUserPasswordTest() throws ApiException {
        ResetUserPasswordRequest user = null;
        api.resetUserPassword(user);
        // TODO: test validations
    }

    /**
     * revoke an authorization token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        String token = null;
        api.revokeToken(token);
        // TODO: test validations
    }

    /**
     * Fetch a list of user tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tokensGetTest() throws ApiException {
        List<Token> response = api.tokensGet();
        // TODO: test validations
    }

    /**
     * Fetch a list of user session tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tokensSessionGetTest() throws ApiException {
        List<Token> response = api.tokensSessionGet();
        // TODO: test validations
    }

    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        AWSAccessCredentials awsAccessCredentials = null;
        api.updateAWSAccessCredentials(workspace, teamspace, name, awsAccessCredentials);
        // TODO: test validations
    }

    /**
     * update a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String username = null;
        User user = null;
        api.updateUser(username, user);
        // TODO: test validations
    }

    /**
     * update a user in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserInOrganizationTest() throws ApiException {
        String organization = null;
        String username = null;
        OrganizationUser user = null;
        api.updateUserInOrganization(organization, username, user);
        // TODO: test validations
    }

}
