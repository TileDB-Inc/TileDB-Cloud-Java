/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.ArrayEndTimestampData;
import io.tiledb.cloud.rest_api.model.Error;
import java.io.File;
import io.tiledb.cloud.rest_api.model.GenericUDF;
import io.tiledb.cloud.rest_api.model.MultiArrayUDF;
import io.tiledb.cloud.rest_api.model.UDFCopied;
import io.tiledb.cloud.rest_api.model.UDFCopy;
import io.tiledb.cloud.rest_api.model.UDFInfo;
import io.tiledb.cloud.rest_api.model.UDFInfoUpdate;
import io.tiledb.cloud.rest_api.model.UDFSharing;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UdfApi
 */
@Disabled
public class UdfApiTest {

    private final UdfApi api = new UdfApi();

    /**
     * delete a registered UDF -- this will remove all sharing and can not be undone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUDFInfoTest() throws ApiException {
        String workspace = null;
        String name = null;
        api.deleteUDFInfo(workspace, name);
        // TODO: test validations
    }

    /**
     * get a specific UDF in the given namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUDFInfoTest() throws ApiException {
        String workspace = null;
        String name = null;
        UDFInfo response = api.getUDFInfo(workspace, name);
        // TODO: test validations
    }

    /**
     * Get all sharing details of the UDF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUDFInfoSharingPoliciesTest() throws ApiException {
        String workspace = null;
        String name = null;
        List<UDFSharing> response = api.getUDFInfoSharingPolicies(workspace, name);
        // TODO: test validations
    }

    /**
     * Copy a tiledb udf at the specified location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void handleCopyUDFTest() throws ApiException {
        String workspace = null;
        String name = null;
        UDFCopy udFCopy = null;
        String X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME = null;
        Integer endTimestamp = null;
        UDFCopied response = api.handleCopyUDF(workspace, name, udFCopy, X_TILEDB_CLOUD_ACCESS_CREDENTIALS_NAME, endTimestamp);
        // TODO: test validations
    }

    /**
     * register a UDF in the given namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerUDFInfoTest() throws ApiException {
        String workspace = null;
        String name = null;
        UDFInfoUpdate udf = null;
        api.registerUDFInfo(workspace, name, udf);
        // TODO: test validations
    }

    /**
     * Share a UDF with a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareUDFInfoTest() throws ApiException {
        String workspace = null;
        String name = null;
        UDFSharing udfSharing = null;
        api.shareUDFInfo(workspace, name, udfSharing);
        // TODO: test validations
    }

    /**
     * submit a generic UDF in the given namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitGenericUDFTest() throws ApiException {
        String workspace = null;
        GenericUDF udf = null;
        String acceptEncoding = null;
        File response = api.submitGenericUDF(workspace, udf, acceptEncoding);
        // TODO: test validations
    }

    /**
     * submit a multi-array UDF in the given namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitMultiArrayUDFTest() throws ApiException {
        String workspace = null;
        MultiArrayUDF udf = null;
        String acceptEncoding = null;
        File response = api.submitMultiArrayUDF(workspace, udf, acceptEncoding);
        // TODO: test validations
    }

    /**
     * send a UDF to run against a specified array/URI registered to a group/project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitUDFTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String array = null;
        MultiArrayUDF udf = null;
        String xPayer = null;
        String acceptEncoding = null;
        String v2 = null;
        File response = api.submitUDF(workspace, teamspace, array, udf, xPayer, acceptEncoding, v2);
        // TODO: test validations
    }

    /**
     * retrieve a list of timestamps from the array fragment info listing in milliseconds, paginated
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void udfWorkspaceArrayEndTimestampsGetTest() throws ApiException {
        String workspace = null;
        String array = null;
        Integer page = null;
        Integer perPage = null;
        ArrayEndTimestampData response = api.udfWorkspaceArrayEndTimestampsGet(workspace, array, page, perPage);
        // TODO: test validations
    }

    /**
     * update an existing registered UDF in the given namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUDFInfoTest() throws ApiException {
        String workspace = null;
        String name = null;
        UDFInfoUpdate udf = null;
        api.updateUDFInfo(workspace, name, udf);
        // TODO: test validations
    }

}
