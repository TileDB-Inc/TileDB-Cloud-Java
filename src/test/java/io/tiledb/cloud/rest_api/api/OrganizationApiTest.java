/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.AWSAccessCredentials;
import io.tiledb.cloud.rest_api.model.DomainCheckResult;
import io.tiledb.cloud.rest_api.model.Error;
import io.tiledb.cloud.rest_api.model.Organization;
import io.tiledb.cloud.rest_api.model.OrganizationUpdate;
import io.tiledb.cloud.rest_api.model.OrganizationUser;
import io.tiledb.cloud.rest_api.model.SSODomainConfig;
import io.tiledb.cloud.rest_api.model.SSODomainConfigResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationApi
 */
@Disabled
public class OrganizationApiTest {

    private final OrganizationApi api = new OrganizationApi();

    /**
     * Add aws keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        AWSAccessCredentials awsAccessCredentials = null;
        api.addAWSAccessCredentials(workspace, teamspace, awsAccessCredentials);
        // TODO: test validations
    }

    /**
     * add a user to an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToOrganizationTest() throws ApiException {
        String organization = null;
        OrganizationUser user = null;
        api.addUserToOrganization(organization, user);
        // TODO: test validations
    }

    /**
     * Check if aws keys are set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        List<AWSAccessCredentials> response = api.checkAWSAccessCredentials(workspace, teamspace);
        // TODO: test validations
    }

    /**
     * Check if aws keys are set by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkAWSAccessCredentialsByNameTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        AWSAccessCredentials response = api.checkAWSAccessCredentialsByName(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Immediately verify ownership of the specified SSO domain ownership claim. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSSODomainTest() throws ApiException {
        String organization = null;
        String uuid = null;
        DomainCheckResult response = api.checkSSODomain(organization, uuid);
        // TODO: test validations
    }

    /**
     * create a organization, the user creating will be listed as owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws ApiException {
        Organization organization = null;
        api.createOrganization(organization);
        // TODO: test validations
    }

    /**
     * Create a new SSO connection that connects this organization to this domain. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSSODomainTest() throws ApiException {
        String organization = null;
        SSODomainConfig config = null;
        SSODomainConfig response = api.createSSODomain(organization, config);
        // TODO: test validations
    }

    /**
     * delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.deleteAWSAccessCredentials(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * delete a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        String organization = null;
        api.deleteOrganization(organization);
        // TODO: test validations
    }

    /**
     * Deletes the configuration for the given SSO connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSSODomainTest() throws ApiException {
        String organization = null;
        String uuid = null;
        api.deleteSSODomain(organization, uuid);
        // TODO: test validations
    }

    /**
     * delete a user from an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserFromOrganizationTest() throws ApiException {
        String organization = null;
        String username = null;
        api.deleteUserFromOrganization(organization, username);
        // TODO: test validations
    }

    /**
     * get all organizations that the user is member of
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllOrganizationsTest() throws ApiException {
        List<Organization> response = api.getAllOrganizations();
        // TODO: test validations
    }

    /**
     * get a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationTest() throws ApiException {
        String organization = null;
        Organization response = api.getOrganization(organization);
        // TODO: test validations
    }

    /**
     * get a user from an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationUserTest() throws ApiException {
        String organization = null;
        String username = null;
        OrganizationUser response = api.getOrganizationUser(organization, username);
        // TODO: test validations
    }

    /**
     * Gets details about the given SSO domain connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSSODomainTest() throws ApiException {
        String organization = null;
        String uuid = null;
        SSODomainConfig response = api.getSSODomain(organization, uuid);
        // TODO: test validations
    }

    /**
     * Lists all the SSO connections associated with the given organization. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSSODomainsTest() throws ApiException {
        String organization = null;
        SSODomainConfigResponse response = api.getSSODomains(organization);
        // TODO: test validations
    }

    /**
     * Update aws keys or associated buckets. This will update the key associations for each array in the namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAWSAccessCredentialsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        AWSAccessCredentials awsAccessCredentials = null;
        api.updateAWSAccessCredentials(workspace, teamspace, name, awsAccessCredentials);
        // TODO: test validations
    }

    /**
     * update a organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws ApiException {
        String organization = null;
        OrganizationUpdate organizationDetails = null;
        api.updateOrganization(organization, organizationDetails);
        // TODO: test validations
    }

    /**
     * Updates the configuration for the given SSO connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSSODomainTest() throws ApiException {
        String organization = null;
        String uuid = null;
        SSODomainConfig config = null;
        SSODomainConfig response = api.updateSSODomain(organization, uuid, config);
        // TODO: test validations
    }

    /**
     * update a user in an organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserInOrganizationTest() throws ApiException {
        String organization = null;
        String username = null;
        OrganizationUser user = null;
        api.updateUserInOrganization(organization, username, user);
        // TODO: test validations
    }

}
