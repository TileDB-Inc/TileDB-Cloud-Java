/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.Error;
import java.io.File;
import io.tiledb.cloud.rest_api.model.Query;
import io.tiledb.cloud.rest_api.model.QueryJson;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueryApi
 */
@Disabled
public class QueryApiTest {

    private final QueryApi api = new QueryApi();

    /**
     * send a query to run against a specified array/URI registered to a group/project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finalizeQueryTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String array = null;
        String type = null;
        String contentType = null;
        Query query = null;
        String xPayer = null;
        Integer openAt = null;
        Query response = api.finalizeQuery(workspace, teamspace, array, type, contentType, query, xPayer, openAt);
        // TODO: test validations
    }

    /**
     * send a query to run against a specified array/URI registered to a group/project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEstResultSizesTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String array = null;
        String type = null;
        String contentType = null;
        Query query = null;
        String xPayer = null;
        Integer openAt = null;
        Query response = api.getEstResultSizes(workspace, teamspace, array, type, contentType, query, xPayer, openAt);
        // TODO: test validations
    }

    /**
     * send a query to run against a specified array/URI registered to a group/project, returns file bytes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String array = null;
        String contentType = null;
        String xPayer = null;
        File response = api.getFile(workspace, teamspace, array, contentType, xPayer);
        // TODO: test validations
    }

    /**
     * send a query to run against a specified array/URI registered to a group/project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitQueryTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String array = null;
        String type = null;
        String contentType = null;
        Query query = null;
        String xPayer = null;
        Integer openAt = null;
        Query response = api.submitQuery(workspace, teamspace, array, type, contentType, query, xPayer, openAt);
        // TODO: test validations
    }

    /**
     * send a query to run against a specified array/URI registered to a group/project, returns JSON results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitQueryJsonTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String array = null;
        String contentType = null;
        QueryJson queryJson = null;
        String xPayer = null;
        Object response = api.submitQueryJson(workspace, teamspace, array, contentType, queryJson, xPayer);
        // TODO: test validations
    }

}
