/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.ArrayFavorite;
import io.tiledb.cloud.rest_api.model.ArrayFavoritesData;
import io.tiledb.cloud.rest_api.model.Error;
import io.tiledb.cloud.rest_api.model.MLModelFavorite;
import io.tiledb.cloud.rest_api.model.MLModelFavoritesData;
import io.tiledb.cloud.rest_api.model.NotebookFavorite;
import io.tiledb.cloud.rest_api.model.NotebookFavoritesData;
import io.tiledb.cloud.rest_api.model.UDFFavorite;
import io.tiledb.cloud.rest_api.model.UDFFavoritesData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FavoritesApi
 */
@Disabled
public class FavoritesApiTest {

    private final FavoritesApi api = new FavoritesApi();

    /**
     * Add a new array favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addArrayFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.addArrayFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Add a new ML model favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMLModelFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.addMLModelFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Add a new notebook favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNotebookFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.addNotebookFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Add a new UDF favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUDFFavoriteTest() throws ApiException {
        String workspace = null;
        String name = null;
        api.addUDFFavorite(workspace, name);
        // TODO: test validations
    }

    /**
     * Delete specific array favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteArrayFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.deleteArrayFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Delete specific ML model favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMLModelFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.deleteMLModelFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Delete specific notebook favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotebookFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        api.deleteNotebookFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Delete specific UDF favorite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUDFFavoriteTest() throws ApiException {
        String workspace = null;
        String name = null;
        api.deleteUDFFavorite(workspace, name);
        // TODO: test validations
    }

    /**
     * Fetch array favorite of a specific array
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArrayFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        ArrayFavorite response = api.getArrayFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Fetch ML model favorite of a specific ML model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMLModelFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        MLModelFavorite response = api.getMLModelFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Fetch notebook favorite of a specific notebook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotebookFavoriteTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String name = null;
        NotebookFavorite response = api.getNotebookFavorite(workspace, teamspace, name);
        // TODO: test validations
    }

    /**
     * Fetch UDF favorite of a specific UDF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUDFFavoriteTest() throws ApiException {
        String workspace = null;
        String name = null;
        UDFFavorite response = api.getUDFFavorite(workspace, name);
        // TODO: test validations
    }

    /**
     * Fetch a page of array favorites of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArrayFavoritesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        ArrayFavoritesData response = api.listArrayFavorites(page, perPage);
        // TODO: test validations
    }

    /**
     * Fetch all favorite array uuids of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArrayFavoritesUUIDsTest() throws ApiException {
        List<ArrayFavorite> response = api.listArrayFavoritesUUIDs();
        // TODO: test validations
    }

    /**
     * Fetch a page of ML models favorites of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMLModelFavoritesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        MLModelFavoritesData response = api.listMLModelFavorites(page, perPage);
        // TODO: test validations
    }

    /**
     * Fetch all favorite ML models uuids of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMLModelFavoritesUUIDsTest() throws ApiException {
        List<MLModelFavorite> response = api.listMLModelFavoritesUUIDs();
        // TODO: test validations
    }

    /**
     * Fetch a page of notebook favorites of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNotebookFavoritesTest() throws ApiException {
        Boolean isDashboard = null;
        Integer page = null;
        Integer perPage = null;
        NotebookFavoritesData response = api.listNotebookFavorites(isDashboard, page, perPage);
        // TODO: test validations
    }

    /**
     * Fetch all favorite notebook uuids of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNotebookFavoritesUUIDsTest() throws ApiException {
        List<NotebookFavorite> response = api.listNotebookFavoritesUUIDs();
        // TODO: test validations
    }

    /**
     * Fetch a page of UDF favorites of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUDFFavoritesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        UDFFavoritesData response = api.listUDFFavorites(page, perPage);
        // TODO: test validations
    }

    /**
     * Fetch all favorite UDF uuids of connected user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUDFFavoritesUUIDsTest() throws ApiException {
        List<UDFFavorite> response = api.listUDFFavoritesUUIDs();
        // TODO: test validations
    }

}
