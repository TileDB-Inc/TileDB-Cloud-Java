/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.api;

import io.tiledb.cloud.rest_api.ApiException;
import io.tiledb.cloud.rest_api.model.Error;
import io.tiledb.cloud.rest_api.model.TaskGraph;
import io.tiledb.cloud.rest_api.model.TaskGraphLog;
import io.tiledb.cloud.rest_api.model.TaskGraphs;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskGraphsApi
 */
@Disabled
public class TaskGraphsApiTest {

    private final TaskGraphsApi api = new TaskGraphsApi();

    /**
     * Create a single task graph for execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTaskGraphTest() throws ApiException {
        String workspace = null;
        TaskGraph graph = null;
        TaskGraph response = api.createTaskGraph(workspace, graph);
        // TODO: test validations
    }

    /**
     * Fetch information about a single task graph. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskGraphTest() throws ApiException {
        String workspace = null;
        String id = null;
        TaskGraph response = api.getTaskGraph(workspace, id);
        // TODO: test validations
    }

    /**
     * Fetch the task graphs of a namespace the user has access to. The returned entries will include only summary data, and will not include information about the individual tasks that were executed. (This information is available when requesting an individual task graph log.) Entries in the response are ordered from newest to oldest. Pagination parameters work as in other API methods; see PaginationMetadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaskGraphsTest() throws ApiException {
        String workspace = null;
        TaskGraphs response = api.listTaskGraphs(workspace);
        // TODO: test validations
    }

    /**
     * Submit a single task graph for execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitTaskGraphTest() throws ApiException {
        String workspace = null;
        String id = null;
        String rootTaskGraphUuid = null;
        TaskGraphLog response = api.submitTaskGraph(workspace, id, rootTaskGraphUuid);
        // TODO: test validations
    }

    /**
     * Update information about a single task graph execution. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskGraphTest() throws ApiException {
        String workspace = null;
        String id = null;
        TaskGraph graph = null;
        api.updateTaskGraph(workspace, id, graph);
        // TODO: test validations
    }

}
