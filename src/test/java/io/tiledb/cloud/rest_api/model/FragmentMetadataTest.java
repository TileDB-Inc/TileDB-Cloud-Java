/*
 * TileDB Storage Platform API
 * TileDB Storage Platform REST API
 *
 * The version of the OpenAPI document: 2.17.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.rest_api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for FragmentMetadata
 */
public class FragmentMetadataTest {
    private final FragmentMetadata model = new FragmentMetadata();

    /**
     * Model tests for FragmentMetadata
     */
    @Test
    public void testFragmentMetadata() {
        // TODO: test FragmentMetadata
    }

    /**
     * Test the property 'fileSizes'
     */
    @Test
    public void fileSizesTest() {
        // TODO: test fileSizes
    }

    /**
     * Test the property 'fileVarSizes'
     */
    @Test
    public void fileVarSizesTest() {
        // TODO: test fileVarSizes
    }

    /**
     * Test the property 'fileValiditySizes'
     */
    @Test
    public void fileValiditySizesTest() {
        // TODO: test fileValiditySizes
    }

    /**
     * Test the property 'fragmentUri'
     */
    @Test
    public void fragmentUriTest() {
        // TODO: test fragmentUri
    }

    /**
     * Test the property 'hasTimestamps'
     */
    @Test
    public void hasTimestampsTest() {
        // TODO: test hasTimestamps
    }

    /**
     * Test the property 'hasDeleteMeta'
     */
    @Test
    public void hasDeleteMetaTest() {
        // TODO: test hasDeleteMeta
    }

    /**
     * Test the property 'sparseTileNum'
     */
    @Test
    public void sparseTileNumTest() {
        // TODO: test sparseTileNum
    }

    /**
     * Test the property 'tileIndexBase'
     */
    @Test
    public void tileIndexBaseTest() {
        // TODO: test tileIndexBase
    }

    /**
     * Test the property 'tileOffsets'
     */
    @Test
    public void tileOffsetsTest() {
        // TODO: test tileOffsets
    }

    /**
     * Test the property 'tileVarOffsets'
     */
    @Test
    public void tileVarOffsetsTest() {
        // TODO: test tileVarOffsets
    }

    /**
     * Test the property 'tileVarSizes'
     */
    @Test
    public void tileVarSizesTest() {
        // TODO: test tileVarSizes
    }

    /**
     * Test the property 'tileValidityOffsets'
     */
    @Test
    public void tileValidityOffsetsTest() {
        // TODO: test tileValidityOffsets
    }

    /**
     * Test the property 'tileMinBuffer'
     */
    @Test
    public void tileMinBufferTest() {
        // TODO: test tileMinBuffer
    }

    /**
     * Test the property 'tileMinVarBuffer'
     */
    @Test
    public void tileMinVarBufferTest() {
        // TODO: test tileMinVarBuffer
    }

    /**
     * Test the property 'tileMaxBuffer'
     */
    @Test
    public void tileMaxBufferTest() {
        // TODO: test tileMaxBuffer
    }

    /**
     * Test the property 'tileMaxVarBuffer'
     */
    @Test
    public void tileMaxVarBufferTest() {
        // TODO: test tileMaxVarBuffer
    }

    /**
     * Test the property 'tileSums'
     */
    @Test
    public void tileSumsTest() {
        // TODO: test tileSums
    }

    /**
     * Test the property 'tileNullCounts'
     */
    @Test
    public void tileNullCountsTest() {
        // TODO: test tileNullCounts
    }

    /**
     * Test the property 'fragmentMins'
     */
    @Test
    public void fragmentMinsTest() {
        // TODO: test fragmentMins
    }

    /**
     * Test the property 'fragmentMaxs'
     */
    @Test
    public void fragmentMaxsTest() {
        // TODO: test fragmentMaxs
    }

    /**
     * Test the property 'fragmentSums'
     */
    @Test
    public void fragmentSumsTest() {
        // TODO: test fragmentSums
    }

    /**
     * Test the property 'fragmentNullCounts'
     */
    @Test
    public void fragmentNullCountsTest() {
        // TODO: test fragmentNullCounts
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'timestampRange'
     */
    @Test
    public void timestampRangeTest() {
        // TODO: test timestampRange
    }

    /**
     * Test the property 'lastTileCellNum'
     */
    @Test
    public void lastTileCellNumTest() {
        // TODO: test lastTileCellNum
    }

}
