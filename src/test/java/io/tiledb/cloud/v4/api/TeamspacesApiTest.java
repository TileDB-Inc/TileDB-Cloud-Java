/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.TeamspaceGetResponse;
import io.tiledb.cloud.v4.model.TeamspaceUpdateRequest;
import io.tiledb.cloud.v4.model.TeamspaceUserGetResponse;
import io.tiledb.cloud.v4.model.TeamspaceUserUpdateRequest;
import io.tiledb.cloud.v4.model.TeamspaceUsersBulkUpdateRequestInner;
import io.tiledb.cloud.v4.model.TeamspaceUsersCreateRequestInner;
import io.tiledb.cloud.v4.model.TeamspaceUsersCreateResponse;
import io.tiledb.cloud.v4.model.TeamspaceUsersJoinResponse;
import io.tiledb.cloud.v4.model.TeamspaceUsersListResponse;
import io.tiledb.cloud.v4.model.TeamspacesCreateRequest;
import io.tiledb.cloud.v4.model.TeamspacesCreateResponse;
import io.tiledb.cloud.v4.model.TeamspacesListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamspacesApi
 */
@Disabled
public class TeamspacesApiTest {

    private final TeamspacesApi api = new TeamspacesApi();

    /**
     * Create one or more teamspace users in a teamspace
     *
     * Create one or more teamspace users in a teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamspaceUsersTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        List<TeamspaceUsersCreateRequestInner> teamspaceUsersCreateRequestInner = null;
        TeamspaceUsersCreateResponse response = api.createTeamspaceUsers(workspace, teamspace, teamspaceUsersCreateRequestInner);
        // TODO: test validations
    }

    /**
     * Create a teamspace
     *
     * Create a teamspace. The user creating the teamspace will be the teamspace owner. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamspacesTest() throws ApiException {
        String workspace = null;
        TeamspacesCreateRequest teamspacesCreateRequest = null;
        TeamspacesCreateResponse response = api.createTeamspaces(workspace, teamspacesCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete a teamspace
     *
     * Delete the given teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTeamspaceTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        api.deleteTeamspace(workspace, teamspace);
        // TODO: test validations
    }

    /**
     * Delete a teamspace user
     *
     * Delete the given teamspace user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTeamspaceUserTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String userId = null;
        api.deleteTeamspaceUser(workspace, teamspace, userId);
        // TODO: test validations
    }

    /**
     * Delete the given teamspace users in a teamspace
     *
     * Delete the given teamspace users in a teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTeamspaceUsersTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        List<String> requestBody = null;
        api.deleteTeamspaceUsers(workspace, teamspace, requestBody);
        // TODO: test validations
    }

    /**
     * Delete all teamspaces in the workspace
     *
     * Delete all teamspaces in the workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTeamspacesTest() throws ApiException {
        String workspace = null;
        api.deleteTeamspaces(workspace);
        // TODO: test validations
    }

    /**
     * Retrieve a teamspace
     *
     * Retrieve the given teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamspaceTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        TeamspaceGetResponse response = api.getTeamspace(workspace, teamspace);
        // TODO: test validations
    }

    /**
     * Retrieve a teamspace user
     *
     * Retrieve the given teamspace user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamspaceUserTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String userId = null;
        TeamspaceUserGetResponse response = api.getTeamspaceUser(workspace, teamspace, userId);
        // TODO: test validations
    }

    /**
     * Join the given public teamspace
     *
     * Allows users to join a public teamspace if they are a member of the corresponding workspace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinTeamspaceTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        TeamspaceUsersJoinResponse response = api.joinTeamspace(workspace, teamspace);
        // TODO: test validations
    }

    /**
     * Leave the given teamspace
     *
     * Allows teamspace members to leave a teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leaveTeamspaceTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        api.leaveTeamspace(workspace, teamspace);
        // TODO: test validations
    }

    /**
     * Retrieve all teamspace users in a teamspace
     *
     * Retrieve a list of all teamspace users in a teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamspaceUsersTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        TeamspaceUsersListResponse response = api.listTeamspaceUsers(workspace, teamspace);
        // TODO: test validations
    }

    /**
     * Retrieve all teamspaces in the workspace
     *
     * Retrieve all teamspaces in the workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamspacesTest() throws ApiException {
        String workspace = null;
        String orderBy = null;
        String order = null;
        TeamspacesListResponse response = api.listTeamspaces(workspace, orderBy, order);
        // TODO: test validations
    }

    /**
     * Update the given teamspace
     *
     * Update a teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTeamspaceTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        TeamspaceUpdateRequest teamspaceUpdateRequest = null;
        api.updateTeamspace(workspace, teamspace, teamspaceUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update a teamspace user
     *
     * Update the given teamspace user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTeamspaceUserTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String userId = null;
        TeamspaceUserUpdateRequest teamspaceUserUpdateRequest = null;
        api.updateTeamspaceUser(workspace, teamspace, userId, teamspaceUserUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update multiple teamspace users in a teamspace
     *
     * Update multiple teamspace users in a teamspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTeamspaceUsersTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        List<TeamspaceUsersBulkUpdateRequestInner> teamspaceUsersBulkUpdateRequestInner = null;
        api.updateTeamspaceUsers(workspace, teamspace, teamspaceUsersBulkUpdateRequestInner);
        // TODO: test validations
    }

}
