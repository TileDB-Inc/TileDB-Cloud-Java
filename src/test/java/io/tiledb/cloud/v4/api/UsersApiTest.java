/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.model.ChangePasswordRequest;
import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.RequestEmailConfirmationRequest;
import io.tiledb.cloud.v4.model.RequestPasswordResetRequest;
import io.tiledb.cloud.v4.model.ResetPasswordRequest;
import io.tiledb.cloud.v4.model.UserCreateRequest;
import io.tiledb.cloud.v4.model.UserCreateResponse;
import io.tiledb.cloud.v4.model.UserGetResponse;
import io.tiledb.cloud.v4.model.UserSelfResponse;
import io.tiledb.cloud.v4.model.UserUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Changes a user&#39;s password.
     *
     * This endpoint allows a user to change their password. The user must provide the current password along with the new password. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        ChangePasswordRequest changePasswordRequest = null;
        api.changePassword(changePasswordRequest);
        // TODO: test validations
    }

    /**
     * Confirm an email address
     *
     * Operation to confirm the email address by providing the token sent to user&#39;s email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmEmailTest() throws ApiException {
        String X_TILEDB_REST_API_KEY = null;
        api.confirmEmail(X_TILEDB_REST_API_KEY);
        // TODO: test validations
    }

    /**
     * Create a user
     *
     * create a user for a new registration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        UserCreateRequest userCreateRequest = null;
        UserCreateResponse response = api.createUser(userCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * Delete an existing user based on the provided user id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        api.deleteUser(userId);
        // TODO: test validations
    }

    /**
     * Retrieve the current user
     *
     * Retrieve the user that is currently logged in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfUserTest() throws ApiException {
        UserSelfResponse response = api.getSelfUser();
        // TODO: test validations
    }

    /**
     * Retrieve a user
     *
     * Retrieve an existing user based on the provided user id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        UserGetResponse response = api.getUser(userId);
        // TODO: test validations
    }

    /**
     * Request a new email to be sent containing the email confirmation token
     *
     * Operation to request for a new email to allow the user to confirm their email address. This email contains a link with the required api token. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestEmailConfirmationTest() throws ApiException {
        RequestEmailConfirmationRequest requestEmailConfirmationRequest = null;
        api.requestEmailConfirmation(requestEmailConfirmationRequest);
        // TODO: test validations
    }

    /**
     * Request a password reset while unauthorized
     *
     * This endpoint sends an email to the user&#39;s registered email address with a password reset link.   The link contains a scoped token that authorizes the user to reset their password securely. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPasswordResetTest() throws ApiException {
        RequestPasswordResetRequest requestPasswordResetRequest = null;
        api.requestPasswordReset(requestPasswordResetRequest);
        // TODO: test validations
    }

    /**
     * Reset a user&#39;s password using a scoped token.
     *
     * This endpoint allows a user to reset their password.  The user must provide a valid scoped token, received via email, along with their new password. The token ensures secure and authorized access to update the password. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        String X_TILEDB_REST_API_KEY = null;
        ResetPasswordRequest resetPasswordRequest = null;
        api.resetPassword(X_TILEDB_REST_API_KEY, resetPasswordRequest);
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * Update an existing user based on the provided data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String userId = null;
        UserUpdateRequest userUpdateRequest = null;
        api.updateUser(userId, userUpdateRequest);
        // TODO: test validations
    }

}
