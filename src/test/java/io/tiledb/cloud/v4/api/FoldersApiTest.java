/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.model.Error;
import io.tiledb.cloud.v4.model.FolderContentsResponse;
import io.tiledb.cloud.v4.model.FolderCreateRequestInner;
import io.tiledb.cloud.v4.model.FolderCreateResponse;
import io.tiledb.cloud.v4.model.FolderGetResponse;
import io.tiledb.cloud.v4.model.FolderListResponse;
import io.tiledb.cloud.v4.model.FolderUpdateRequest;
import io.tiledb.cloud.v4.model.FoldersContentsModifyInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersApi
 */
@Disabled
public class FoldersApiTest {

    private final FoldersApi api = new FoldersApi();

    /**
     * Create a folder in the given teamspace
     *
     * Create a new folder in the given teamspace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String folder = null;
        FolderCreateRequestInner folderCreateRequestInner = null;
        FolderCreateResponse response = api.createFolder(workspace, teamspace, folder, folderCreateRequestInner);
        // TODO: test validations
    }

    /**
     * Delete a folder
     *
     * delete a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String folder = null;
        api.deleteFolder(workspace, teamspace, folder);
        // TODO: test validations
    }

    /**
     * Retrieve a folder&#39;s content
     *
     * Retrieve the given folder&#39;s content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String folder = null;
        FolderGetResponse response = api.getFolder(workspace, teamspace, folder);
        // TODO: test validations
    }

    /**
     * Retrieve a folder
     *
     * Retrieve the given folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderContentsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String folder = null;
        FolderContentsResponse response = api.getFolderContents(workspace, teamspace, folder);
        // TODO: test validations
    }

    /**
     * Retrieves folder listing for the given teamspace
     *
     * End point to retrieve folders for the passed teamspace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFoldersTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        Integer page = null;
        Integer perPage = null;
        FolderListResponse response = api.listFolders(workspace, teamspace, page, perPage);
        // TODO: test validations
    }

    /**
     * Add or remove assets under a folder
     *
     * Add or remove assets under a folder 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyFolderContentsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String folder = null;
        FoldersContentsModifyInner foldersContentsModifyInner = null;
        api.modifyFolderContents(workspace, teamspace, folder, foldersContentsModifyInner);
        // TODO: test validations
    }

    /**
     * Update the given folder
     *
     * Update a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFolderTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String folder = null;
        FolderUpdateRequest folderUpdateRequest = null;
        api.updateFolder(workspace, teamspace, folder, folderUpdateRequest);
        // TODO: test validations
    }

}
