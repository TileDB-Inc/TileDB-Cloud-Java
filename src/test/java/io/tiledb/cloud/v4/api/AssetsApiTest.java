/*
 * Specification file for tiledb-server v4 API
 * This spec is exposed to the public under /v4 route group
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@tiledb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.tiledb.cloud.v4.api;

import io.tiledb.cloud.v4.ApiException;
import io.tiledb.cloud.v4.model.AssetGetResponse;
import io.tiledb.cloud.v4.model.AssetListResponse;
import io.tiledb.cloud.v4.model.AssetMetadataCreateRequestInner;
import io.tiledb.cloud.v4.model.AssetMetadataCreateResponse;
import io.tiledb.cloud.v4.model.AssetMetadataDeleteRequestInner;
import io.tiledb.cloud.v4.model.AssetMetadataListResponse;
import io.tiledb.cloud.v4.model.AssetMetadataUpdateRequest;
import io.tiledb.cloud.v4.model.AssetPathResponse;
import io.tiledb.cloud.v4.model.AssetType;
import io.tiledb.cloud.v4.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetsApi
 */
@Disabled
public class AssetsApiTest {

    private final AssetsApi api = new AssetsApi();

    /**
     * Create asset&#39;s pair metadata
     *
     * Create asset&#39;s pair metadata (key, value and type should be provided)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssetMetadataTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String asset = null;
        List<AssetMetadataCreateRequestInner> assetMetadataCreateRequestInner = null;
        AssetMetadataCreateResponse response = api.createAssetMetadata(workspace, teamspace, asset, assetMetadataCreateRequestInner);
        // TODO: test validations
    }

    /**
     * Delete the given asset&#39;s metadata pairs
     *
     * Delete asset&#39;s metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssetMetadataTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String assetId = null;
        List<AssetMetadataDeleteRequestInner> assetMetadataDeleteRequestInner = null;
        api.deleteAssetMetadata(workspace, teamspace, assetId, assetMetadataDeleteRequestInner);
        // TODO: test validations
    }

    /**
     * Retrieve asset
     *
     * Retrieve the asset by the given asset_id or path
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String asset = null;
        AssetGetResponse response = api.getAsset(workspace, teamspace, asset);
        // TODO: test validations
    }

    /**
     * Retrieve asset&#39;s metadata
     *
     * Retrieve the given asset&#39;s metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetMetadataTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String asset = null;
        AssetMetadataListResponse response = api.getAssetMetadata(workspace, teamspace, asset);
        // TODO: test validations
    }

    /**
     * Retrieve all assets in a given path
     *
     * Retrieve all assets in a given path, e.g., a request for &#x60;/a/b/c&#x60; will return the assets &#x60;a&#x60;, &#x60;b&#x60;, and &#x60;c&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetsInPathTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String path = null;
        AssetPathResponse response = api.getAssetsInPath(workspace, teamspace, path);
        // TODO: test validations
    }

    /**
     * Retrieves asset listing for the given teamspace
     *
     * End point to retrieve assets for the passed teamspace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssetsTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String path = null;
        Integer page = null;
        Integer perPage = null;
        AssetType assetType = null;
        String createdBy = null;
        String orderBy = null;
        String expand = null;
        AssetListResponse response = api.listAssets(workspace, teamspace, path, page, perPage, assetType, createdBy, orderBy, expand);
        // TODO: test validations
    }

    /**
     * Update the given asset&#39;s metadata pair
     *
     * Update asset&#39;s metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssetMetadataTest() throws ApiException {
        String workspace = null;
        String teamspace = null;
        String asset = null;
        AssetMetadataUpdateRequest assetMetadataUpdateRequest = null;
        api.updateAssetMetadata(workspace, teamspace, asset, assetMetadataUpdateRequest);
        // TODO: test validations
    }

}
